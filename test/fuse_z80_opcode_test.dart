// fuse_unit_test.dart -- translated Z80 unit tests from FUSE Z80 emulator
//
// The FUSE emulator contains a large unit test suite of over 1,300 tests,
// which cover both documented and undocumented opcodes:
//   http://fuse-emulator.sourceforge.net/

import 'package:dart_z80/dart_z80.dart';
import 'package:test/test.dart';

Memory memory = Memory(0x10000);
Z80 z80 = Z80(memory, startAddress: 0xA000);

void poke(int addr, int val) => memory.writeByte(addr, val);
int peek(int addr) => memory.readByte(addr);

// We use register names for the fields and we don't fuss too much about this.
// ignore_for_file: non_constant_identifier_names

void loadRegisters(
    {int af = 0,
    int bc = 0,
    int de = 0,
    int hl = 0,
    int af_ = 0,
    int bc_ = 0,
    int de_ = 0,
    int hl_ = 0,
    int ix = 0,
    int iy = 0,
    int sp = 0,
    int pc = 0}) {
  z80.af = af;
  z80.bc = bc;
  z80.de = de;
  z80.hl = hl;
  z80.a_ = highByte(af_);
  z80.f_ = lowByte(af_);
  z80.b_ = highByte(bc_);
  z80.c_ = lowByte(bc_);
  z80.d_ = highByte(de_);
  z80.e_ = lowByte(de_);
  z80.h_ = highByte(hl_);
  z80.l_ = lowByte(hl_);
  z80.ix = ix;
  z80.iy = iy;
  z80.sp = sp;
  z80.pc = pc;
}

void checkRegisters(
    {int af = 0,
    int bc = 0,
    int de = 0,
    int hl = 0,
    int af_ = 0,
    int bc_ = 0,
    int de_ = 0,
    int hl_ = 0,
    int ix = 0,
    int iy = 0,
    int sp = 0,
    int pc = 0}) {
  expect(highByte(z80.af), equals(highByte(af)),
      reason: "Register A: expected ${toHex8(highByte(af))}, "
          "actual ${toHex8(highByte(z80.af))}");
  // While we attempt basic emulation of the undocumented bits 3 and 5,
  // we're not going to fail a test because of them (at least, right now).
  // So we OR both values with 0b000101000 (0x28) to mask out any difference.
  expect(lowByte(z80.af | 0x28), equals(lowByte(af | 0x28)),
      reason: "Register F [SZ5H3PNC]: expected ${toBin8(lowByte(af))}, "
          "actual ${toBin8(lowByte(z80.af))}");
  expect(z80.bc, equals(bc), reason: "Register BC mismatch");
  expect(z80.de, equals(de), reason: "Register DE mismatch");
  expect(z80.hl, equals(hl), reason: "Register HL mismatch");
  expect(z80.af_, equals(af_), reason: "Register AF' mismatch");
  expect(z80.bc_, equals(bc_), reason: "Register BC' mismatch");
  expect(z80.de_, equals(de_), reason: "Register DE' mismatch");
  expect(z80.hl_, equals(hl_), reason: "Register HL' mismatch");
  expect(z80.ix, equals(ix), reason: "Register IX mismatch");
  expect(z80.iy, equals(iy), reason: "Register IY mismatch");
  expect(z80.sp, equals(sp), reason: "Register SP mismatch");
  expect(z80.pc, equals(pc), reason: "Register PC mismatch");
}

// ignore: avoid_positional_boolean_parameters
void checkSpecialRegisters(
    {int i = 0,
    int r = 0,
    bool iff1 = false,
    bool iff2 = false,
    int tStates = 0}) {
  expect(z80.i, equals(i), reason: "Register I mismatch");

  // TODO: r is "magic" and we haven't finished doing magic yet
  // expect(z80.r, equals(r));

  expect(z80.iff1, equals(iff1), reason: "Register IFF1 mismatch");
  expect(z80.iff2, equals(iff2), reason: "Register IFF2 mismatch");
  expect(z80.tStates, equals(tStates), reason: "tStates mismatch");
}

void main() {
  setUp(() {
    z80.reset();
    memory.reset();
  });
  tearDown(() {});

  // Test instruction 00 | NOP
  test(
      "OPCODE "
      "00 | NOP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 01 | LD BC, **
  test(
      "OPCODE "
      "01 | LD BC, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x01);
    poke(0x0001, 0x12);
    poke(0x0002, 0x34);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x3412,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction 02 | LD (BC), A
  test(
      "OPCODE "
      "02 | LD (BC), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5600,
        bc: 0x0001,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x02);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5600,
        bc: 0x0001,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(1), equals(0x56));
  });

  // Test instruction 02_1 | LD (BC), A
  test(
      "OPCODE "
      "02_1 | LD (BC), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1300,
        bc: 0x6b65,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x02);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1300,
        bc: 0x6b65,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(27493), equals(0x13));
  });

  // Test instruction 03 | INC BC
  test(
      "OPCODE "
      "03 | INC BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x789a,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x03);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x789b,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction 04 | INC B
  test(
      "OPCODE "
      "04 | INC B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0xff00,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x04);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0050,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 05 | DEC B
  test(
      "OPCODE "
      "05 | DEC B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x05);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00ba,
        bc: 0xff00,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 06 | LD B, *
  test(
      "OPCODE "
      "06 | LD B, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x06);
    poke(0x0001, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0xbc00,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 07 | RLCA
  test(
      "OPCODE "
      "07 | RLCA", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8800,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x07);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1101,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 08 | EX AF, AF'
  test(
      "OPCODE "
      "08 | EX AF, AF'", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdef0,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x1234,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x08);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1234,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0xdef0,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 09 | ADD HL, BC
  test(
      "OPCODE "
      "09 | ADD HL, BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x5678,
        de: 0x0000,
        hl: 0x9abc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x09);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0030,
        bc: 0x5678,
        de: 0x0000,
        hl: 0xf134,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction 0a | LD A, (BC)
  test(
      "OPCODE "
      "0a | LD A, (BC)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0001,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x0a);
    poke(0x0001, 0xde);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xde00,
        bc: 0x0001,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 0a_1 | LD A, (BC)
  test(
      "OPCODE "
      "0a_1 | LD A, (BC)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x1234,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x0a);
    poke(0x1234, 0x56);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5600,
        bc: 0x1234,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 0b | DEC BC
  test(
      "OPCODE "
      "0b | DEC BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x0b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0xffff,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction 0c | INC C
  test(
      "OPCODE "
      "0c | INC C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x007f,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x0c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0094,
        bc: 0x0080,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 0d | DEC C
  test(
      "OPCODE "
      "0d | DEC C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0080,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x0d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x003e,
        bc: 0x007f,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 0e | LD C, *
  test(
      "OPCODE "
      "0e | LD C, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x0e);
    poke(0x0001, 0xf0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x00f0,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 0f | RRCA
  test(
      "OPCODE "
      "0f | RRCA", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x0f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa021,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 10 | DJNZ *
  test(
      "OPCODE "
      "10 | DJNZ *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0800,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x00);
    poke(0x0001, 0x10);
    poke(0x0002, 0xfd);
    poke(0x0003, 0x0c);

    // Execute machine for tState cycles
    while (z80.tStates < 132) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0001,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x11, iff1: false, iff2: false, tStates: 135);
  });

  // Test instruction 11 | LD DE, **
  test(
      "OPCODE "
      "11 | LD DE, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x11);
    poke(0x0001, 0x9a);
    poke(0x0002, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xbc9a,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction 12 | LD (DE), A
  test(
      "OPCODE "
      "12 | LD (DE), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5600,
        bc: 0x0000,
        de: 0x8000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x12);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5600,
        bc: 0x0000,
        de: 0x8000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(32768), equals(0x56));
  });

  // Test instruction 13 | INC DE
  test(
      "OPCODE "
      "13 | INC DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xdef0,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x13);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xdef1,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction 14 | INC D
  test(
      "OPCODE "
      "14 | INC D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x2700,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x14);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0028,
        bc: 0x0000,
        de: 0x2800,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 15 | DEC D
  test(
      "OPCODE "
      "15 | DEC D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x1000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x15);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x001a,
        bc: 0x0000,
        de: 0x0f00,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 16 | LD D, *
  test(
      "OPCODE "
      "16 | LD D, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x16);
    poke(0x0001, 0x12);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x1200,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 17 | RLA
  test(
      "OPCODE "
      "17 | RLA", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0801,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x17);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 18 | JR *
  test(
      "OPCODE "
      "18 | JR *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x18);
    poke(0x0001, 0x40);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0042);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction 19 | ADD HL, DE
  test(
      "OPCODE "
      "19 | ADD HL, DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x3456,
        hl: 0x789a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x19);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0028,
        bc: 0x0000,
        de: 0x3456,
        hl: 0xacf0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction 1a | LD A, (DE)
  test(
      "OPCODE "
      "1a | LD A, (DE)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x8000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x1a);
    poke(0x8000, 0x13);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1300,
        bc: 0x0000,
        de: 0x8000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 1b | DEC DE
  test(
      "OPCODE "
      "1b | DEC DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xe5d4,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x1b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xe5d3,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction 1c | INC E
  test(
      "OPCODE "
      "1c | INC E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x00aa,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x1c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00a8,
        bc: 0x0000,
        de: 0x00ab,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 1d | DEC E
  test(
      "OPCODE "
      "1d | DEC E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x00aa,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x1d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00aa,
        bc: 0x0000,
        de: 0x00a9,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 1e | LD E, *
  test(
      "OPCODE "
      "1e | LD E, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x1e);
    poke(0x0001, 0xef);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x00ef,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 1f | RRA
  test(
      "OPCODE "
      "1f | RRA", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x01c4,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x1f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00c5,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 20_1 | JR NZ, *
  test(
      "OPCODE "
      "20_1 | JR NZ, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x20);
    poke(0x0001, 0x40);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0042);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction 20_2 | JR NZ, *
  test(
      "OPCODE "
      "20_2 | JR NZ, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0040,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x20);
    poke(0x0001, 0x40);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0040,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 21 | LD HL, **
  test(
      "OPCODE "
      "21 | LD HL, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x21);
    poke(0x0001, 0x28);
    poke(0x0002, 0xed);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xed28,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction 22 | LD (**), HL
  test(
      "OPCODE "
      "22 | LD (**), HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xc64c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x22);
    poke(0x0001, 0xb0);
    poke(0x0002, 0xc3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xc64c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 16);
    expect(peek(50096), equals(0x4c));
    expect(peek(50097), equals(0xc6));
  });

  // Test instruction 23 | INC HL
  test(
      "OPCODE "
      "23 | INC HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x9c4e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x23);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x9c4f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction 24 | INC H
  test(
      "OPCODE "
      "24 | INC H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x7200,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x24);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0020,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x7300,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 25 | DEC H
  test(
      "OPCODE "
      "25 | DEC H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xa500,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x25);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00a2,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xa400,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 26 | LD H, *
  test(
      "OPCODE "
      "26 | LD H, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x26);
    poke(0x0001, 0x3a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x3a00,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 27_1 | DAA
  test(
      "OPCODE "
      "27_1 | DAA", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9a02,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x27);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3423,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 27 | DAA
  test(
      "OPCODE "
      "27 | DAA", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1f00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x27);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2530,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 28_1 | JR Z, *
  test(
      "OPCODE "
      "28_1 | JR Z, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x28);
    poke(0x0001, 0x8e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 28_2 | JR Z, *
  test(
      "OPCODE "
      "28_2 | JR Z, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0040,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x28);
    poke(0x0001, 0x8e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0040,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xff90);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction 29 | ADD HL, HL
  test(
      "OPCODE "
      "29 | ADD HL, HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xcdfa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x29);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0019,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x9bf4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction 2a | LD HL, (**)
  test(
      "OPCODE "
      "2a | LD HL, (**)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x2a);
    poke(0x0001, 0x45);
    poke(0x0002, 0xac);
    poke(0xac45, 0xc4);
    poke(0xac46, 0xde);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xdec4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction 2b | DEC HL
  test(
      "OPCODE "
      "2b | DEC HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x9e66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x2b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x9e65,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction 2c | INC L
  test(
      "OPCODE "
      "2c | INC L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0026,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x2c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0020,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0027,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 2d | DEC L
  test(
      "OPCODE "
      "2d | DEC L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0032,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x2d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0022,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0031,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 2e | LD L, *
  test(
      "OPCODE "
      "2e | LD L, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x2e);
    poke(0x0001, 0x18);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0018,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 2f | CPL
  test(
      "OPCODE "
      "2f | CPL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8900,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x2f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7632,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 30_1 | JR NC, *
  test(
      "OPCODE "
      "30_1 | JR NC, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0036,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x30);
    poke(0x0001, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0036,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0052);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction 30_2 | JR NC, *
  test(
      "OPCODE "
      "30_2 | JR NC, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0037,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x30);
    poke(0x0001, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0037,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 31 | LD SP, **
  test(
      "OPCODE "
      "31 | LD SP, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x31);
    poke(0x0001, 0xd4);
    poke(0x0002, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x61d4,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction 32 | LD (**), A
  test(
      "OPCODE "
      "32 | LD (**), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0e00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x32);
    poke(0x0001, 0xac);
    poke(0x0002, 0xad);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0e00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 13);
    expect(peek(44460), equals(0x0e));
  });

  // Test instruction 32_1 | LD (**), A
  test(
      "OPCODE "
      "32_1 | LD (**), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5600,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x32);
    poke(0x0001, 0x34);
    poke(0x0002, 0x12);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5600,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 13);
    expect(peek(4660), equals(0x56));
  });

  // Test instruction 33 | INC SP
  test(
      "OPCODE "
      "33 | INC SP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xa55a,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x33);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xa55b,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction 34 | INC (HL)
  test(
      "OPCODE "
      "34 | INC (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xfe1d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x34);
    poke(0xfe1d, 0xfd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00a8,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xfe1d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(65053), equals(0xfe));
  });

  // Test instruction 35 | DEC (HL)
  test(
      "OPCODE "
      "35 | DEC (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x470c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x35);
    poke(0x470c, 0x82);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0082,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x470c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(18188), equals(0x81));
  });

  // Test instruction 36 | LD (HL), *
  test(
      "OPCODE "
      "36 | LD (HL), *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x7d29,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x36);
    poke(0x0001, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x7d29,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
    expect(peek(32041), equals(0x7c));
  });

  // Test instruction 37_1 | SCF
  test(
      "OPCODE "
      "37_1 | SCF", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x00ff,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00c5,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 37_2 | SCF
  test(
      "OPCODE "
      "37_2 | SCF", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff29,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 37_3 | SCF
  test(
      "OPCODE "
      "37_3 | SCF", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xffff,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xffed,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 37 | SCF
  test(
      "OPCODE "
      "37 | SCF", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0001,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 38_1 | JR C, *
  test(
      "OPCODE "
      "38_1 | JR C, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x00b2,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x38);
    poke(0x0001, 0x66);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00b2,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 38_2 | JR C, *
  test(
      "OPCODE "
      "38_2 | JR C, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x00b3,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x38);
    poke(0x0001, 0x66);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00b3,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0068);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction 39 | ADD HL, SP
  test(
      "OPCODE "
      "39 | ADD HL, SP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x1aef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xc534,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x39);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0030,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xe023,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xc534,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction 3a | LD A, (**)
  test(
      "OPCODE "
      "3a | LD A, (**)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x3a);
    poke(0x0001, 0x52);
    poke(0x0002, 0x99);
    poke(0x9952, 0x28);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2800,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 13);
  });

  // Test instruction 3b | DEC SP
  test(
      "OPCODE "
      "3b | DEC SP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x9d36,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x3b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x9d35,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction 3c | INC A
  test(
      "OPCODE "
      "3c | INC A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcf00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x3c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd090,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 3d | DEC A
  test(
      "OPCODE "
      "3d | DEC A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xea00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x3d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe9aa,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 3e | LD A, *
  test(
      "OPCODE "
      "3e | LD A, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x3e);
    poke(0x0001, 0xd6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd600,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 3f | CCF
  test(
      "OPCODE "
      "3f | CCF", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x005b,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x3f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0050,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 40 | LD B, B
  test(
      "OPCODE "
      "40 | LD B, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x40);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 41 | LD B, C
  test(
      "OPCODE "
      "41 | LD B, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x41);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0x9898,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 42 | LD B, D
  test(
      "OPCODE "
      "42 | LD B, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x42);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0x9098,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 43 | LD B, E
  test(
      "OPCODE "
      "43 | LD B, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x43);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xd898,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 44 | LD B, H
  test(
      "OPCODE "
      "44 | LD B, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x44);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xa198,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 45 | LD B, L
  test(
      "OPCODE "
      "45 | LD B, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x45);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0x6998,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 46 | LD B, (HL)
  test(
      "OPCODE "
      "46 | LD B, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x46);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0x5098,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 47 | LD B, A
  test(
      "OPCODE "
      "47 | LD B, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x47);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0x0298,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 48 | LD C, B
  test(
      "OPCODE "
      "48 | LD C, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x48);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcfcf,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 49 | LD C, C
  test(
      "OPCODE "
      "49 | LD C, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x49);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 4a | LD C, D
  test(
      "OPCODE "
      "4a | LD C, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x4a);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf90,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 4b | LD C, E
  test(
      "OPCODE "
      "4b | LD C, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x4b);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcfd8,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 4c | LD C, H
  test(
      "UNDOCUMENTED "
      "4c | LD C, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x4c);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcfa1,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  }, tags: 'undocumented');

  // Test instruction 4d | LD C, L
  test(
      "OPCODE "
      "4d | LD C, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x4d);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf69,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 4e | LD C, (HL)
  test(
      "UNDOCUMENTED "
      "4e | LD C, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x4e);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf50,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  }, tags: 'undocumented');

  // Test instruction 4f | LD C, A
  test(
      "OPCODE "
      "4f | LD C, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x4f);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf02,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 50 | LD D, B
  test(
      "OPCODE "
      "50 | LD D, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x50);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0xcfd8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 51 | LD D, C
  test(
      "OPCODE "
      "51 | LD D, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x51);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x98d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 52 | LD D, D
  test(
      "OPCODE "
      "52 | LD D, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x52);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 53 | LD D, E
  test(
      "OPCODE "
      "53 | LD D, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x53);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0xd8d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 54 | LD D, H
  test(
      "UNDOCUMENTED "
      "54 | LD D, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x54);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0xa1d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  }, tags: 'undocumented');

  // Test instruction 55 | LD D, L
  test(
      "OPCODE "
      "55 | LD D, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x55);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x69d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 56 | LD D, (HL)
  test(
      "OPCODE "
      "56 | LD D, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x56);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x50d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 57 | LD D, A
  test(
      "OPCODE "
      "57 | LD D, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x57);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x02d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 58 | LD E, B
  test(
      "OPCODE "
      "58 | LD E, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x58);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90cf,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 59 | LD E, C
  test(
      "OPCODE "
      "59 | LD E, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x59);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x9098,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 5a | LD E, D
  test(
      "OPCODE "
      "5a | LD E, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x5a);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x9090,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 5b | LD E, E
  test(
      "OPCODE "
      "5b | LD E, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x5b);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 5c | LD E, H
  test(
      "UNDOCUMENTED "
      "5c | LD E, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x5c);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90a1,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  }, tags: 'undocumented');

  // Test instruction 5d | LD E, L
  test(
      "OPCODE "
      "5d | LD E, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x5d);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x9069,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 5e | LD E, (HL)
  test(
      "OPCODE "
      "5e | LD E, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x5e);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x9050,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 5f | LD E, A
  test(
      "OPCODE "
      "5f | LD E, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x5f);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x9002,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 60 | LD H, B
  test(
      "OPCODE "
      "60 | LD H, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x60);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xcf69,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 61 | LD H, C
  test(
      "OPCODE "
      "61 | LD H, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x61);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0x9869,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 62 | LD H, D
  test(
      "OPCODE "
      "62 | LD H, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x62);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0x9069,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 63 | LD H, E
  test(
      "UNDOCUMENTED "
      "63 | LD H, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x63);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xd869,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  }, tags: 'undocumented');

  // Test instruction 64 | LD H, H
  test(
      "UNDOCUMENTED "
      "64 | LD H, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x64);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  }, tags: 'undocumented');

  // Test instruction 65 | LD H, L
  test(
      "OPCODE "
      "65 | LD H, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x65);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0x6969,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 66 | LD H, (HL)
  test(
      "OPCODE "
      "66 | LD H, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x66);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0x5069,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 67 | LD H, A
  test(
      "OPCODE "
      "67 | LD H, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x67);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0x0269,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 68 | LD L, B
  test(
      "OPCODE "
      "68 | LD L, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x68);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa1cf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 69 | LD L, C
  test(
      "OPCODE "
      "69 | LD L, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x69);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa198,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 6a | LD L, D
  test(
      "OPCODE "
      "6a | LD L, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x6a);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa190,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 6b | LD L, E
  test(
      "UNDOCUMENTED "
      "6b | LD L, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x6b);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa1d8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  }, tags: 'undocumented');

  // Test instruction 6c | LD L, H
  test(
      "UNDOCUMENTED "
      "6c | LD L, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x6c);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa1a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  }, tags: 'undocumented');

  // Test instruction 6d | LD L, L
  test(
      "OPCODE "
      "6d | LD L, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x6d);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 6e | LD L, (HL)
  test(
      "UNDOCUMENTED "
      "6e | LD L, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x6e);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa150,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  }, tags: 'undocumented');

  // Test instruction 6f | LD L, A
  test(
      "OPCODE "
      "6f | LD L, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x6f);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa102,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 70 | LD (HL), B
  test(
      "UNDOCUMENTED "
      "70 | LD (HL), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x70);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(41321), equals(0xcf));
  }, tags: 'undocumented');

  // Test instruction 71 | LD (HL), C
  test(
      "UNDOCUMENTED "
      "71 | LD (HL), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x71);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(41321), equals(0x98));
  }, tags: 'undocumented');

  // Test instruction 72 | LD (HL), D
  test(
      "OPCODE "
      "72 | LD (HL), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x72);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(41321), equals(0x90));
  });

  // Test instruction 73 | LD (HL), E
  test(
      "OPCODE "
      "73 | LD (HL), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x73);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(41321), equals(0xd8));
  });

  // Test instruction 74 | LD (HL), H
  test(
      "UNDOCUMENTED "
      "74 | LD (HL), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x74);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(41321), equals(0xa1));
  }, tags: 'undocumented');

  // Test instruction 75 | LD (HL), L
  test(
      "OPCODE "
      "75 | LD (HL), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x75);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(41321), equals(0x69));
  });

  // Test instruction 76 | HALT
  test(
      "OPCODE "
      "76 | HALT", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x76);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 77 | LD (HL), A
  test(
      "OPCODE "
      "77 | LD (HL), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x77);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
    expect(peek(41321), equals(0x02));
  });

  // Test instruction 78 | LD A, B
  test(
      "OPCODE "
      "78 | LD A, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x78);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcf00,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 79 | LD A, C
  test(
      "OPCODE "
      "79 | LD A, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x79);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9800,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 7a | LD A, D
  test(
      "OPCODE "
      "7a | LD A, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x7a);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9000,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 7b | LD A, E
  test(
      "OPCODE "
      "7b | LD A, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x7b);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd800,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 7c | LD A, H
  test(
      "UNDOCUMENTED "
      "7c | LD A, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x7c);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa100,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  }, tags: 'undocumented');

  // Test instruction 7d | LD A, L
  test(
      "OPCODE "
      "7d | LD A, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x7d);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6900,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 7e | LD A, (HL)
  test(
      "OPCODE "
      "7e | LD A, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x7e);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5000,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 7f | LD A, A
  test(
      "OPCODE "
      "7f | LD A, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x7f);
    poke(0xa169, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0xcf98,
        de: 0x90d8,
        hl: 0xa169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 80 | ADD A, B
  test(
      "OPCODE "
      "80 | ADD A, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x80);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0411,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 81 | ADD A, C
  test(
      "OPCODE "
      "81 | ADD A, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x81);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3031,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 82 | ADD A, D
  test(
      "OPCODE "
      "82 | ADD A, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x82);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1501,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 83 | ADD A, E
  test(
      "OPCODE "
      "83 | ADD A, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x83);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0211,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 84 | ADD A, H
  test(
      "OPCODE "
      "84 | ADD A, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x84);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd191,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 85 | ADD A, L
  test(
      "OPCODE "
      "85 | ADD A, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x85);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9b89,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 86 | ADD A, (HL)
  test(
      "OPCODE "
      "86 | ADD A, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x86);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3e29,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 87 | ADD A, A
  test(
      "OPCODE "
      "87 | ADD A, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x87);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xeaa9,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 88 | ADC A, B
  test(
      "OPCODE "
      "88 | ADC A, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x88);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0411,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 89 | ADC A, C
  test(
      "OPCODE "
      "89 | ADC A, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x89);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3031,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 8a | ADC A, D
  test(
      "OPCODE "
      "8a | ADC A, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x8a);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1501,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 8b | ADC A, E
  test(
      "OPCODE "
      "8b | ADC A, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x8b);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0211,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 8c | ADC A, H
  test(
      "OPCODE "
      "8c | ADC A, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x8c);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd191,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 8d | ADC A, L
  test(
      "OPCODE "
      "8d | ADC A, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x8d);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9b89,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 8e | ADC A, (HL)
  test(
      "OPCODE "
      "8e | ADC A, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x8e);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3e29,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 8f | ADC A, A
  test(
      "OPCODE "
      "8f | ADC A, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x8f);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xeaa9,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 90 | SUB B
  test(
      "OPCODE "
      "90 | SUB B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x90);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe6b2,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 91 | SUB C
  test(
      "OPCODE "
      "91 | SUB C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x91);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbaba,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 92 | SUB D
  test(
      "OPCODE "
      "92 | SUB D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x92);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd582,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 93 | SUB E
  test(
      "OPCODE "
      "93 | SUB E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x93);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe8ba,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 94 | SUB H
  test(
      "OPCODE "
      "94 | SUB H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x94);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x191a,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 95 | SUB L
  test(
      "OPCODE "
      "95 | SUB L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x95);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4f1a,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 96 | SUB (HL)
  test(
      "OPCODE "
      "96 | SUB (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x96);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xacba,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 97 | SUB A
  test(
      "OPCODE "
      "97 | SUB A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x97);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0042,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 98 | SBC B
  test(
      "OPCODE "
      "98 | SBC B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x98);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe6b2,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 99 | SBC C
  test(
      "OPCODE "
      "99 | SBC C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x99);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbaba,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 9a | SBC D
  test(
      "OPCODE "
      "9a | SBC D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x9a);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd582,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 9b | SBC E
  test(
      "OPCODE "
      "9b | SBC E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x9b);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe8ba,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 9c | SBC H
  test(
      "OPCODE "
      "9c | SBC H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x9c);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x191a,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 9d | SBC L
  test(
      "OPCODE "
      "9d | SBC L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x9d);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4f1a,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction 9e | SBC (HL)
  test(
      "OPCODE "
      "9e | SBC (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x9e);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xacba,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction 9f | SBC A, A
  test(
      "OPCODE "
      "9f | SBC A, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0x9f);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0042,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a0 | AND B
  test(
      "OPCODE "
      "a0 | AND B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa0);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0514,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a1 | AND C
  test(
      "OPCODE "
      "a1 | AND C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa1);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3130,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a2 | AND D
  test(
      "OPCODE "
      "a2 | AND D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa2);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2030,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a3 | AND E
  test(
      "OPCODE "
      "a3 | AND E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa3);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0514,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a4 | AND H
  test(
      "OPCODE "
      "a4 | AND H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa4);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd494,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a5 | AND L
  test(
      "OPCODE "
      "a5 | AND L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa5);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa4b0,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a6 | AND (HL)
  test(
      "OPCODE "
      "a6 | AND (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa6);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4114,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction a7 | AND A
  test(
      "OPCODE "
      "a7 | AND A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa7);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf5b4,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a8 | XOR B
  test(
      "OPCODE "
      "a8 | XOR B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa8);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfaac,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction a9 | XOR C
  test(
      "OPCODE "
      "a9 | XOR C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xa9);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xce88,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction aa | XOR D
  test(
      "OPCODE "
      "aa | XOR D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xaa);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd580,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction ab | XOR E
  test(
      "OPCODE "
      "ab | XOR E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xab);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf8a8,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction ac | XOR H
  test(
      "OPCODE "
      "ac | XOR H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xac);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2928,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction ad | XOR L
  test(
      "OPCODE "
      "ad | XOR L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xad);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5304,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction ae | XOR (HL)
  test(
      "OPCODE "
      "ae | XOR (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xae);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbca8,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction af | XOR A
  test(
      "OPCODE "
      "af | XOR A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xaf);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0044,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b0 | OR B
  test(
      "OPCODE "
      "b0 | OR B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb0);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xffac,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b1 | OR C
  test(
      "OPCODE "
      "b1 | OR C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb1);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xffac,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b2 | OR D
  test(
      "OPCODE "
      "b2 | OR D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb2);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf5a4,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b3 | OR E
  test(
      "OPCODE "
      "b3 | OR E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb3);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfda8,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b4 | OR H
  test(
      "OPCODE "
      "b4 | OR H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb4);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfda8,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b5 | OR L
  test(
      "OPCODE "
      "b5 | OR L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb5);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf7a0,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b6 | OR (HL)
  test(
      "OPCODE "
      "b6 | OR (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb6);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfda8,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction b7 | OR A
  test(
      "OPCODE "
      "b7 | OR A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb7);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf5a4,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b8 | CP B
  test(
      "OPCODE "
      "b8 | CP B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb8);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf59a,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction b9 | CP C
  test(
      "OPCODE "
      "b9 | CP C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xb9);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf5ba,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction ba | CP D
  test(
      "OPCODE "
      "ba | CP D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xba);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf5a2,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction bb | CP E
  test(
      "OPCODE "
      "bb | CP E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xbb);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf59a,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction bc | CP H
  test(
      "OPCODE "
      "bc | CP H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xbc);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf51a,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction bd | CP L
  test(
      "OPCODE "
      "bd | CP L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xbd);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf532,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction be | CP (HL)
  test(
      "OPCODE "
      "be | CP (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xbe);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf59a,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction bf | CP A
  test(
      "OPCODE "
      "bf | CP A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf500,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xbf);
    poke(0xdca6, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf562,
        bc: 0x0f3b,
        de: 0x200d,
        hl: 0xdca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction c0_1 | RET NZ
  test(
      "OPCODE "
      "c0_1 | RET NZ", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc0);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f9,
        pc: 0xafe9);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction c0_2 | RET NZ
  test(
      "OPCODE "
      "c0_2 | RET NZ", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x00d8,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc0);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00d8,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 5);
  });

  // Test instruction c1 | POP BC
  test(
      "OPCODE "
      "c1 | POP BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4143,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc1);
    poke(0x4143, 0xce);
    poke(0x4144, 0xe8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0xe8ce,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4145,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction c2_1 | JP NZ, **
  test(
      "OPCODE "
      "c2_1 | JP NZ, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc2);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xe11b);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction c2_2 | JP NZ, **
  test(
      "OPCODE "
      "c2_2 | JP NZ, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x00c7,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc2);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00c7,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction c3 | JP **
  test(
      "OPCODE "
      "c3 | JP **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc3);
    poke(0x0001, 0xed);
    poke(0x0002, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x7ced);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction c4_1 | CALL NZ, **
  test(
      "OPCODE "
      "c4_1 | CALL NZ, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc4);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5696,
        pc: 0x9c61);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(22166), equals(0x03));
    expect(peek(22167), equals(0x00));
  });

  // Test instruction c4_2 | CALL NZ, **
  test(
      "OPCODE "
      "c4_2 | CALL NZ, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x004e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc4);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x004e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction c5 | PUSH BC
  test(
      "OPCODE "
      "c5 | PUSH BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x53e3,
        bc: 0x1459,
        de: 0x775f,
        hl: 0x1a2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xec12,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x53e3,
        bc: 0x1459,
        de: 0x775f,
        hl: 0x1a2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xec10,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(60432), equals(0x59));
    expect(peek(60433), equals(0x14));
  });

  // Test instruction c6 | ADD A, *
  test(
      "OPCODE "
      "c6 | ADD A, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xca00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc6);
    poke(0x0001, 0x6f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3939,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction c7 | RST 0
  test(
      "OPCODE "
      "c7 | RST 0", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5507,
        pc: 0x6d33);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x6d33, 0xc7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5505,
        pc: 0x0000);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(21765), equals(0x34));
    expect(peek(21766), equals(0x6d));
  });

  // Test instruction c8_1 | RET Z
  test(
      "OPCODE "
      "c8_1 | RET Z", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc8);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 5);
  });

  // Test instruction c8_2 | RET Z
  test(
      "OPCODE "
      "c8_2 | RET Z", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x00d8,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc8);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00d8,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f9,
        pc: 0xafe9);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction c9 | RET
  test(
      "OPCODE "
      "c9 | RET", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x887e,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xc9);
    poke(0x887e, 0x36);
    poke(0x887f, 0x11);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x8880,
        pc: 0x1136);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction ca_1 | JP Z, **
  test(
      "OPCODE "
      "ca_1 | JP Z, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xca);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction ca_2 | JP Z, **
  test(
      "OPCODE "
      "ca_2 | JP Z, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x00c7,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xca);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00c7,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xe11b);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction cb00 | RLC B
  test(
      "OPCODE "
      "cb00 | RLC B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xda00,
        bc: 0xe479,
        de: 0x552e,
        hl: 0xa806,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x00);
    poke(0xa806, 0x76);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xda8d,
        bc: 0xc979,
        de: 0x552e,
        hl: 0xa806,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb01 | RLC C
  test(
      "OPCODE "
      "cb01 | RLC C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1000,
        bc: 0xb379,
        de: 0xb480,
        hl: 0xef65,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x01);
    poke(0xef65, 0xfb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x10a0,
        bc: 0xb3f2,
        de: 0xb480,
        hl: 0xef65,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb02 | RLC D
  test(
      "OPCODE "
      "cb02 | RLC D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2e00,
        bc: 0x9adf,
        de: 0xae6e,
        hl: 0xa7f2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x02);
    poke(0xa7f2, 0x4a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2e09,
        bc: 0x9adf,
        de: 0x5d6e,
        hl: 0xa7f2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb03 | RLC E
  test(
      "OPCODE "
      "cb03 | RLC E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6800,
        bc: 0x9995,
        de: 0xde3f,
        hl: 0xca71,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x03);
    poke(0xca71, 0xe7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x682c,
        bc: 0x9995,
        de: 0xde7e,
        hl: 0xca71,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb04 | RLC H
  test(
      "OPCODE "
      "cb04 | RLC H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8c00,
        bc: 0xbeea,
        de: 0x0ce4,
        hl: 0x67b0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x04);
    poke(0x67b0, 0xcd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8c88,
        bc: 0xbeea,
        de: 0x0ce4,
        hl: 0xceb0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb05 | RLC L
  test(
      "OPCODE "
      "cb05 | RLC L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3600,
        bc: 0xe19f,
        de: 0x78c9,
        hl: 0xcb32,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x05);
    poke(0xcb32, 0x1b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3620,
        bc: 0xe19f,
        de: 0x78c9,
        hl: 0xcb64,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb06 | RLC (HL)
  test(
      "OPCODE "
      "cb06 | RLC (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8a00,
        bc: 0xdb02,
        de: 0x8fb1,
        hl: 0x5b04,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x06);
    poke(0x5b04, 0xd4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8aad,
        bc: 0xdb02,
        de: 0x8fb1,
        hl: 0x5b04,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(23300), equals(0xa9));
  });

  // Test instruction cb07 | RLC A
  test(
      "OPCODE "
      "cb07 | RLC A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6d00,
        bc: 0x19cf,
        de: 0x7259,
        hl: 0xdcaa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x07);
    poke(0xdcaa, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xda88,
        bc: 0x19cf,
        de: 0x7259,
        hl: 0xdcaa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb08 | RRC B
  test(
      "OPCODE "
      "cb08 | RRC B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8000,
        bc: 0xcdb5,
        de: 0x818e,
        hl: 0x2ee2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x08);
    poke(0x2ee2, 0x53);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x80a1,
        bc: 0xe6b5,
        de: 0x818e,
        hl: 0x2ee2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb09 | RRC C
  test(
      "OPCODE "
      "cb09 | RRC C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1800,
        bc: 0x125c,
        de: 0xdd97,
        hl: 0x59c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x09);
    poke(0x59c6, 0x9e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x182c,
        bc: 0x122e,
        de: 0xdd97,
        hl: 0x59c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb0a | RRC D
  test(
      "OPCODE "
      "cb0a | RRC D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1200,
        bc: 0x3ba1,
        de: 0x7724,
        hl: 0x63ad,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x0a);
    poke(0x63ad, 0x96);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x12ad,
        bc: 0x3ba1,
        de: 0xbb24,
        hl: 0x63ad,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb0b | RRC E
  test(
      "OPCODE "
      "cb0b | RRC E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7600,
        bc: 0x2abf,
        de: 0xb626,
        hl: 0x0289,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x0b);
    poke(0x0289, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7600,
        bc: 0x2abf,
        de: 0xb613,
        hl: 0x0289,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb0c | RRC H
  test(
      "OPCODE "
      "cb0c | RRC H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0e00,
        bc: 0x6fc5,
        de: 0x2f12,
        hl: 0x34d9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x0c);
    poke(0x34d9, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0e08,
        bc: 0x6fc5,
        de: 0x2f12,
        hl: 0x1ad9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb0d | RRC L
  test(
      "OPCODE "
      "cb0d | RRC L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6300,
        bc: 0x95a3,
        de: 0xfcd2,
        hl: 0x519a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x0d);
    poke(0x519a, 0x7a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x630c,
        bc: 0x95a3,
        de: 0xfcd2,
        hl: 0x514d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb0e | RRC (HL)
  test(
      "OPCODE "
      "cb0e | RRC (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfc00,
        bc: 0xadf9,
        de: 0x4925,
        hl: 0x543e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x0e);
    poke(0x543e, 0xd2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfc2c,
        bc: 0xadf9,
        de: 0x4925,
        hl: 0x543e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(21566), equals(0x69));
  });

  // Test instruction cb0f | RRC A
  test(
      "OPCODE "
      "cb0f | RRC A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc300,
        bc: 0x18f3,
        de: 0x41b8,
        hl: 0x070b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x0f);
    poke(0x070b, 0x86);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe1a5,
        bc: 0x18f3,
        de: 0x41b8,
        hl: 0x070b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb10 | RL B
  test(
      "OPCODE "
      "cb10 | RL B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf800,
        bc: 0xdc25,
        de: 0x33b3,
        hl: 0x0d74,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x10);
    poke(0x0d74, 0x3d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf8ad,
        bc: 0xb825,
        de: 0x33b3,
        hl: 0x0d74,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb11 | RL C
  test(
      "OPCODE "
      "cb11 | RL C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6500,
        bc: 0xe25c,
        de: 0x4b8a,
        hl: 0xed42,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x11);
    poke(0xed42, 0xb7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x65ac,
        bc: 0xe2b8,
        de: 0x4b8a,
        hl: 0xed42,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb12 | RL D
  test(
      "OPCODE "
      "cb12 | RL D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7700,
        bc: 0x1384,
        de: 0x0f50,
        hl: 0x29c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x12);
    poke(0x29c6, 0x88);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x770c,
        bc: 0x1384,
        de: 0x1e50,
        hl: 0x29c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb13 | RL E
  test(
      "OPCODE "
      "cb13 | RL E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xce00,
        bc: 0x9f17,
        de: 0xe128,
        hl: 0x3ed7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x13);
    poke(0x3ed7, 0xea);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xce04,
        bc: 0x9f17,
        de: 0xe150,
        hl: 0x3ed7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb14 | RL H
  test(
      "OPCODE "
      "cb14 | RL H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb200,
        bc: 0x541a,
        de: 0x60c7,
        hl: 0x7c9a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x14);
    poke(0x7c9a, 0x0f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb2a8,
        bc: 0x541a,
        de: 0x60c7,
        hl: 0xf89a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb15 | RL L
  test(
      "OPCODE "
      "cb15 | RL L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2d00,
        bc: 0xc1df,
        de: 0x6eab,
        hl: 0x03e2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x15);
    poke(0x03e2, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2d81,
        bc: 0xc1df,
        de: 0x6eab,
        hl: 0x03c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb16 | RL (HL)
  test(
      "OPCODE "
      "cb16 | RL (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3600,
        bc: 0x3b53,
        de: 0x1a4a,
        hl: 0x684e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x16);
    poke(0x684e, 0xc3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3681,
        bc: 0x3b53,
        de: 0x1a4a,
        hl: 0x684e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(26702), equals(0x86));
  });

  // Test instruction cb17 | RL A
  test(
      "OPCODE "
      "cb17 | RL A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5400,
        bc: 0xd090,
        de: 0xf60d,
        hl: 0x0fa2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x17);
    poke(0x0fa2, 0x23);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa8a8,
        bc: 0xd090,
        de: 0xf60d,
        hl: 0x0fa2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb18 | RR B
  test(
      "OPCODE "
      "cb18 | RR B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8600,
        bc: 0xc658,
        de: 0x755f,
        hl: 0x9596,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x18);
    poke(0x9596, 0xb6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8624,
        bc: 0x6358,
        de: 0x755f,
        hl: 0x9596,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb19 | RR C
  test(
      "OPCODE "
      "cb19 | RR C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9600,
        bc: 0xbeb3,
        de: 0x7c22,
        hl: 0x71c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x19);
    poke(0x71c8, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x960d,
        bc: 0xbe59,
        de: 0x7c22,
        hl: 0x71c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb1a | RR D
  test(
      "OPCODE "
      "cb1a | RR D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3900,
        bc: 0x882f,
        de: 0x543b,
        hl: 0x5279,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x1a);
    poke(0x5279, 0x26);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3928,
        bc: 0x882f,
        de: 0x2a3b,
        hl: 0x5279,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb1b | RR E
  test(
      "OPCODE "
      "cb1b | RR E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9e00,
        bc: 0xb338,
        de: 0x876c,
        hl: 0xe8b4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x1b);
    poke(0xe8b4, 0xb9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9e24,
        bc: 0xb338,
        de: 0x8736,
        hl: 0xe8b4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb1c | RR H
  test(
      "OPCODE "
      "cb1c | RR H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4b00,
        bc: 0xb555,
        de: 0x238f,
        hl: 0x311d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x1c);
    poke(0x311d, 0x11);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4b0d,
        bc: 0xb555,
        de: 0x238f,
        hl: 0x181d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb1d | RR L
  test(
      "OPCODE "
      "cb1d | RR L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2100,
        bc: 0x3d7e,
        de: 0x5e39,
        hl: 0xe451,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x1d);
    poke(0xe451, 0x47);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x212d,
        bc: 0x3d7e,
        de: 0x5e39,
        hl: 0xe428,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb1e | RR (HL)
  test(
      "OPCODE "
      "cb1e | RR (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5e00,
        bc: 0x66b9,
        de: 0x80dc,
        hl: 0x00ef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x1e);
    poke(0x00ef, 0x91);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5e0d,
        bc: 0x66b9,
        de: 0x80dc,
        hl: 0x00ef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(239), equals(0x48));
  });

  // Test instruction cb1f | RR A
  test(
      "OPCODE "
      "cb1f | RR A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xed00,
        bc: 0xb838,
        de: 0x8e18,
        hl: 0xace7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x1f);
    poke(0xace7, 0x82);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7621,
        bc: 0xb838,
        de: 0x8e18,
        hl: 0xace7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb20 | SLA B
  test(
      "OPCODE "
      "cb20 | SLA B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc700,
        bc: 0x0497,
        de: 0xd72b,
        hl: 0xccb6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x20);
    poke(0xccb6, 0x1a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc708,
        bc: 0x0897,
        de: 0xd72b,
        hl: 0xccb6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb21 | SLA C
  test(
      "OPCODE "
      "cb21 | SLA C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2200,
        bc: 0x5cf4,
        de: 0x938e,
        hl: 0x37a8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x21);
    poke(0x37a8, 0xdd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x22ad,
        bc: 0x5ce8,
        de: 0x938e,
        hl: 0x37a8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb22 | SLA D
  test(
      "OPCODE "
      "cb22 | SLA D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8500,
        bc: 0x0950,
        de: 0xe7e8,
        hl: 0x0641,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x22);
    poke(0x0641, 0x4d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8589,
        bc: 0x0950,
        de: 0xcee8,
        hl: 0x0641,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb23 | SLA E
  test(
      "OPCODE "
      "cb23 | SLA E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2100,
        bc: 0x2a7c,
        de: 0x37d0,
        hl: 0xaa59,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x23);
    poke(0xaa59, 0xc1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x21a5,
        bc: 0x2a7c,
        de: 0x37a0,
        hl: 0xaa59,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb24 | SLA H
  test(
      "OPCODE "
      "cb24 | SLA H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfb00,
        bc: 0xb9de,
        de: 0x7014,
        hl: 0x84b6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x24);
    poke(0x84b6, 0x80);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfb09,
        bc: 0xb9de,
        de: 0x7014,
        hl: 0x08b6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb25 | SLA L
  test(
      "OPCODE "
      "cb25 | SLA L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1500,
        bc: 0x6bbc,
        de: 0x894e,
        hl: 0x85bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x25);
    poke(0x85bc, 0xef);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x152d,
        bc: 0x6bbc,
        de: 0x894e,
        hl: 0x8578,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb26 | SLA (HL)
  test(
      "OPCODE "
      "cb26 | SLA (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0a00,
        bc: 0x372e,
        de: 0xe315,
        hl: 0x283a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x26);
    poke(0x283a, 0xee);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0a89,
        bc: 0x372e,
        de: 0xe315,
        hl: 0x283a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(10298), equals(0xdc));
  });

  // Test instruction cb27 | SLA A
  test(
      "OPCODE "
      "cb27 | SLA A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbf00,
        bc: 0xbdba,
        de: 0x67ab,
        hl: 0x5ea2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x27);
    poke(0x5ea2, 0xbd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7e2d,
        bc: 0xbdba,
        de: 0x67ab,
        hl: 0x5ea2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb28 | SRA B
  test(
      "OPCODE "
      "cb28 | SRA B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc000,
        bc: 0x0435,
        de: 0x3e0f,
        hl: 0x021b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x28);
    poke(0x021b, 0x90);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc000,
        bc: 0x0235,
        de: 0x3e0f,
        hl: 0x021b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb29 | SRA C
  test(
      "OPCODE "
      "cb29 | SRA C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0600,
        bc: 0xf142,
        de: 0x6ada,
        hl: 0xc306,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x29);
    poke(0xc306, 0x5c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0624,
        bc: 0xf121,
        de: 0x6ada,
        hl: 0xc306,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb2a | SRA D
  test(
      "OPCODE "
      "cb2a | SRA D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3000,
        bc: 0xec3a,
        de: 0x7f7d,
        hl: 0x3473,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x2a);
    poke(0x3473, 0x34);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x302d,
        bc: 0xec3a,
        de: 0x3f7d,
        hl: 0x3473,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb2b | SRA E
  test(
      "OPCODE "
      "cb2b | SRA E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe000,
        bc: 0xccf0,
        de: 0xbbda,
        hl: 0xb78a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x2b);
    poke(0xb78a, 0xab);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe0ac,
        bc: 0xccf0,
        de: 0xbbed,
        hl: 0xb78a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb2c | SRA H
  test(
      "OPCODE "
      "cb2c | SRA H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5b00,
        bc: 0x25c0,
        de: 0x996d,
        hl: 0x1e7b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x2c);
    poke(0x1e7b, 0x2c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5b0c,
        bc: 0x25c0,
        de: 0x996d,
        hl: 0x0f7b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb2d | SRA L
  test(
      "OPCODE "
      "cb2d | SRA L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5e00,
        bc: 0xc51b,
        de: 0x58e3,
        hl: 0x78ea,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x2d);
    poke(0x78ea, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5ea4,
        bc: 0xc51b,
        de: 0x58e3,
        hl: 0x78f5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb2e | SRA (HL)
  test(
      "OPCODE "
      "cb2e | SRA (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3900,
        bc: 0xa2cd,
        de: 0x0629,
        hl: 0x24bf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x2e);
    poke(0x24bf, 0xb5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3989,
        bc: 0xa2cd,
        de: 0x0629,
        hl: 0x24bf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(9407), equals(0xda));
  });

  // Test instruction cb2f | SRA A
  test(
      "OPCODE "
      "cb2f | SRA A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaa00,
        bc: 0xa194,
        de: 0xd0e3,
        hl: 0x5c65,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x2f);
    poke(0x5c65, 0xc9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd580,
        bc: 0xa194,
        de: 0xd0e3,
        hl: 0x5c65,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb30 | SLL B
  test(
      "UNDOCUMENTED "
      "cb30 | SLL B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcd00,
        bc: 0x7a81,
        de: 0xd67b,
        hl: 0x656b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x30);
    poke(0x656b, 0x32);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcda4,
        bc: 0xf581,
        de: 0xd67b,
        hl: 0x656b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction cb31 | SLL C
  test(
      "UNDOCUMENTED "
      "cb31 | SLL C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2800,
        bc: 0xe7fa,
        de: 0x6d8c,
        hl: 0x75a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x31);
    poke(0x75a4, 0x0c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x28a5,
        bc: 0xe7f5,
        de: 0x6d8c,
        hl: 0x75a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction cb32 | SLL D
  test(
      "UNDOCUMENTED "
      "cb32 | SLL D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1300,
        bc: 0x3f36,
        de: 0xf608,
        hl: 0x5e56,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x32);
    poke(0x5e56, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x13ad,
        bc: 0x3f36,
        de: 0xed08,
        hl: 0x5e56,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction cb33 | SLL E
  test(
      "UNDOCUMENTED "
      "cb33 | SLL E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd500,
        bc: 0x9720,
        de: 0x7644,
        hl: 0x038f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x33);
    poke(0x038f, 0xba);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd588,
        bc: 0x9720,
        de: 0x7689,
        hl: 0x038f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction cb34 | SLL H
  test(
      "UNDOCUMENTED "
      "cb34 | SLL H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1200,
        bc: 0x77f6,
        de: 0x0206,
        hl: 0xfb38,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x34);
    poke(0xfb38, 0x07);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x12a1,
        bc: 0x77f6,
        de: 0x0206,
        hl: 0xf738,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction cb35 | SLL L
  test(
      "UNDOCUMENTED "
      "cb35 | SLL L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3c00,
        bc: 0xfd68,
        de: 0xea91,
        hl: 0x7861,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x35);
    poke(0x7861, 0x72);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c84,
        bc: 0xfd68,
        de: 0xea91,
        hl: 0x78c3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction cb36 | SLL (HL)
  test(
      "UNDOCUMENTED "
      "cb36 | SLL (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8a00,
        bc: 0x1185,
        de: 0x1dde,
        hl: 0x6d38,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x36);
    poke(0x6d38, 0xf1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8aa1,
        bc: 0x1185,
        de: 0x1dde,
        hl: 0x6d38,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(27960), equals(0xe3));
  }, tags: 'undocumented');

  // Test instruction cb37 | SLL A
  test(
      "UNDOCUMENTED "
      "cb37 | SLL A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4300,
        bc: 0xd7bc,
        de: 0x9133,
        hl: 0x6e56,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x37);
    poke(0x6e56, 0xf8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8784,
        bc: 0xd7bc,
        de: 0x9133,
        hl: 0x6e56,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction cb38 | SRL B
  test(
      "OPCODE "
      "cb38 | SRL B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdf00,
        bc: 0x7c1b,
        de: 0x9f9f,
        hl: 0x4ff2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x38);
    poke(0x4ff2, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdf28,
        bc: 0x3e1b,
        de: 0x9f9f,
        hl: 0x4ff2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb39 | SRL C
  test(
      "OPCODE "
      "cb39 | SRL C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6600,
        bc: 0xb702,
        de: 0x14f5,
        hl: 0x3c17,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x39);
    poke(0x3c17, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6600,
        bc: 0xb701,
        de: 0x14f5,
        hl: 0x3c17,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb3a | SRL D
  test(
      "OPCODE "
      "cb3a | SRL D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd100,
        bc: 0x5c5f,
        de: 0xe42e,
        hl: 0xf1b1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x3a);
    poke(0xf1b1, 0x6e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd124,
        bc: 0x5c5f,
        de: 0x722e,
        hl: 0xf1b1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb3b | SRL E
  test(
      "OPCODE "
      "cb3b | SRL E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb200,
        bc: 0x38c8,
        de: 0xa560,
        hl: 0x7419,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x3b);
    poke(0x7419, 0x11);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb224,
        bc: 0x38c8,
        de: 0xa530,
        hl: 0x7419,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb3c | SRL H
  test(
      "OPCODE "
      "cb3c | SRL H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7800,
        bc: 0xcfae,
        de: 0x66d8,
        hl: 0x2ad8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x3c);
    poke(0x2ad8, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7800,
        bc: 0xcfae,
        de: 0x66d8,
        hl: 0x15d8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb3d | SRL L
  test(
      "OPCODE "
      "cb3d | SRL L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe600,
        bc: 0xdcda,
        de: 0x06aa,
        hl: 0x46cd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x3d);
    poke(0x46cd, 0xf9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe625,
        bc: 0xdcda,
        de: 0x06aa,
        hl: 0x4666,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb3e | SRL (HL)
  test(
      "OPCODE "
      "cb3e | SRL (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa900,
        bc: 0x6a34,
        de: 0xe8d0,
        hl: 0xa96c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x3e);
    poke(0xa96c, 0xa0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa904,
        bc: 0x6a34,
        de: 0xe8d0,
        hl: 0xa96c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(43372), equals(0x50));
  });

  // Test instruction cb3f | SRL A
  test(
      "OPCODE "
      "cb3f | SRL A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf100,
        bc: 0xceea,
        de: 0x721e,
        hl: 0x77f0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x3f);
    poke(0x77f0, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x782d,
        bc: 0xceea,
        de: 0x721e,
        hl: 0x77f0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb40 | BIT 0, B
  test(
      "OPCODE "
      "cb40 | BIT 0, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9e00,
        bc: 0xbcb2,
        de: 0xefaa,
        hl: 0x505f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x40);
    poke(0x505f, 0x59);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9e7c,
        bc: 0xbcb2,
        de: 0xefaa,
        hl: 0x505f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb41 | BIT 0, C
  test(
      "OPCODE "
      "cb41 | BIT 0, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9e00,
        bc: 0x1b43,
        de: 0x954e,
        hl: 0x7be9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x41);
    poke(0x7be9, 0xf7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9e10,
        bc: 0x1b43,
        de: 0x954e,
        hl: 0x7be9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb42 | BIT 0, D
  test(
      "OPCODE "
      "cb42 | BIT 0, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf200,
        bc: 0xdd12,
        de: 0x7d4f,
        hl: 0x551f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x42);
    poke(0x551f, 0xc9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf238,
        bc: 0xdd12,
        de: 0x7d4f,
        hl: 0x551f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb43 | BIT 0, E
  test(
      "OPCODE "
      "cb43 | BIT 0, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xad00,
        bc: 0xc3b3,
        de: 0xf1d0,
        hl: 0xbab4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x43);
    poke(0xbab4, 0x76);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xad54,
        bc: 0xc3b3,
        de: 0xf1d0,
        hl: 0xbab4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb44 | BIT 0, H
  test(
      "OPCODE "
      "cb44 | BIT 0, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb700,
        bc: 0xc829,
        de: 0x27e3,
        hl: 0x5b92,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x44);
    poke(0x5b92, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb718,
        bc: 0xc829,
        de: 0x27e3,
        hl: 0x5b92,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb45 | BIT 0, L
  test(
      "OPCODE "
      "cb45 | BIT 0, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7700,
        bc: 0x68ee,
        de: 0x0c77,
        hl: 0x409b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x45);
    poke(0x409b, 0x64);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7718,
        bc: 0x68ee,
        de: 0x0c77,
        hl: 0x409b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb46 | BIT 0, (HL)
  test(
      "OPCODE "
      "cb46 | BIT 0, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7200,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x46);
    poke(0x6131, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7210,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb46_1 | BIT 0, (HL)
  test(
      "OPCODE "
      "cb46_1 | BIT 0, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7200,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x46);
    poke(0x6131, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7210,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb46_2 | BIT 0, (HL)
  test(
      "OPCODE "
      "cb46_2 | BIT 0, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7200,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x46);
    poke(0x6131, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7238,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb46_3 | BIT 0, (HL)
  test(
      "OPCODE "
      "cb46_3 | BIT 0, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7200,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x46);
    poke(0x6131, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7238,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb46_4 | BIT 0, (HL)
  test(
      "OPCODE "
      "cb46_4 | BIT 0, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7200,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x46);
    poke(0x6131, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7218,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb46_5 | BIT 0, (HL)
  test(
      "OPCODE "
      "cb46_5 | BIT 0, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7200,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x46);
    poke(0x6131, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7230,
        bc: 0x7ae3,
        de: 0xa11e,
        hl: 0x6131,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb47_1 | BIT 0, A
  test(
      "OPCODE "
      "cb47_1 | BIT 0, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x47);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff38,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb47 | BIT 0, A
  test(
      "OPCODE "
      "cb47 | BIT 0, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1000,
        bc: 0xd8ca,
        de: 0xe2c4,
        hl: 0x8a8c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x47);
    poke(0x8a8c, 0x0e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1054,
        bc: 0xd8ca,
        de: 0xe2c4,
        hl: 0x8a8c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb48 | BIT 1, B
  test(
      "OPCODE "
      "cb48 | BIT 1, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa900,
        bc: 0x6264,
        de: 0xe833,
        hl: 0x6de0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x48);
    poke(0x6de0, 0x8c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa930,
        bc: 0x6264,
        de: 0xe833,
        hl: 0x6de0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb49 | BIT 1, C
  test(
      "OPCODE "
      "cb49 | BIT 1, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6c00,
        bc: 0xd0f7,
        de: 0x1db7,
        hl: 0xa040,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x49);
    poke(0xa040, 0x5f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6c30,
        bc: 0xd0f7,
        de: 0x1db7,
        hl: 0xa040,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb4a | BIT 1, D
  test(
      "OPCODE "
      "cb4a | BIT 1, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4f00,
        bc: 0xf04c,
        de: 0x5b29,
        hl: 0x77a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x4a);
    poke(0x77a4, 0x96);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4f18,
        bc: 0xf04c,
        de: 0x5b29,
        hl: 0x77a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb4b | BIT 1, E
  test(
      "OPCODE "
      "cb4b | BIT 1, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5500,
        bc: 0x9848,
        de: 0x095f,
        hl: 0x40ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x4b);
    poke(0x40ca, 0x8a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5518,
        bc: 0x9848,
        de: 0x095f,
        hl: 0x40ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb4c | BIT 1, H
  test(
      "OPCODE "
      "cb4c | BIT 1, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8800,
        bc: 0x0521,
        de: 0xbf31,
        hl: 0x6d5d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x4c);
    poke(0x6d5d, 0xe7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x887c,
        bc: 0x0521,
        de: 0xbf31,
        hl: 0x6d5d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb4d | BIT 1, L
  test(
      "OPCODE "
      "cb4d | BIT 1, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf900,
        bc: 0x27d0,
        de: 0x0f7e,
        hl: 0x158d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x4d);
    poke(0x158d, 0xe0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf95c,
        bc: 0x27d0,
        de: 0x0f7e,
        hl: 0x158d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb4e | BIT 1, (HL)
  test(
      "OPCODE "
      "cb4e | BIT 1, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2600,
        bc: 0x9207,
        de: 0x459a,
        hl: 0xada3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x4e);
    poke(0xada3, 0x5b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2610,
        bc: 0x9207,
        de: 0x459a,
        hl: 0xada3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb4f_1 | BIT 1, A
  test(
      "OPCODE "
      "cb4f_1 | BIT 1, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x4f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff38,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb4f | BIT 1, A
  test(
      "OPCODE "
      "cb4f | BIT 1, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1700,
        bc: 0x2dc1,
        de: 0xaca2,
        hl: 0x0bcc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x4f);
    poke(0x0bcc, 0xa3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1710,
        bc: 0x2dc1,
        de: 0xaca2,
        hl: 0x0bcc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb50 | BIT 2, B
  test(
      "OPCODE "
      "cb50 | BIT 2, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2300,
        bc: 0x2749,
        de: 0x1012,
        hl: 0x84d2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x50);
    poke(0x84d2, 0x6a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2330,
        bc: 0x2749,
        de: 0x1012,
        hl: 0x84d2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb51 | BIT 2, C
  test(
      "OPCODE "
      "cb51 | BIT 2, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2200,
        bc: 0xb7db,
        de: 0xe19d,
        hl: 0xaafc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x51);
    poke(0xaafc, 0xa6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x225c,
        bc: 0xb7db,
        de: 0xe19d,
        hl: 0xaafc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb52 | BIT 2, D
  test(
      "OPCODE "
      "cb52 | BIT 2, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8b00,
        bc: 0xff7a,
        de: 0xb0ff,
        hl: 0xac44,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x52);
    poke(0xac44, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8b74,
        bc: 0xff7a,
        de: 0xb0ff,
        hl: 0xac44,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb53 | BIT 2, E
  test(
      "OPCODE "
      "cb53 | BIT 2, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6000,
        bc: 0x31a1,
        de: 0xa4f4,
        hl: 0x7c75,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x53);
    poke(0x7c75, 0xab);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6030,
        bc: 0x31a1,
        de: 0xa4f4,
        hl: 0x7c75,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb54 | BIT 2, H
  test(
      "OPCODE "
      "cb54 | BIT 2, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3800,
        bc: 0x7ccc,
        de: 0x89cc,
        hl: 0x1999,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x54);
    poke(0x1999, 0x98);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x385c,
        bc: 0x7ccc,
        de: 0x89cc,
        hl: 0x1999,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb55 | BIT 2, L
  test(
      "OPCODE "
      "cb55 | BIT 2, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf900,
        bc: 0x1f79,
        de: 0x19cd,
        hl: 0xfb4b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x55);
    poke(0xfb4b, 0x0b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf95c,
        bc: 0x1f79,
        de: 0x19cd,
        hl: 0xfb4b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb56 | BIT 2, (HL)
  test(
      "OPCODE "
      "cb56 | BIT 2, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1500,
        bc: 0x2bfe,
        de: 0xe3b5,
        hl: 0xbbf9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x56);
    poke(0xbbf9, 0x10);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1554,
        bc: 0x2bfe,
        de: 0xe3b5,
        hl: 0xbbf9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb57_1 | BIT 2, A
  test(
      "OPCODE "
      "cb57_1 | BIT 2, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x57);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff38,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb57 | BIT 2, A
  test(
      "OPCODE "
      "cb57 | BIT 2, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6600,
        bc: 0xaf32,
        de: 0x532a,
        hl: 0xda50,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x57);
    poke(0xda50, 0x30);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6630,
        bc: 0xaf32,
        de: 0x532a,
        hl: 0xda50,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb58 | BIT 3, B
  test(
      "OPCODE "
      "cb58 | BIT 3, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5000,
        bc: 0x1aee,
        de: 0x2e47,
        hl: 0x1479,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x58);
    poke(0x1479, 0xa0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5018,
        bc: 0x1aee,
        de: 0x2e47,
        hl: 0x1479,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb59 | BIT 3, C
  test(
      "OPCODE "
      "cb59 | BIT 3, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7200,
        bc: 0x5e68,
        de: 0xff28,
        hl: 0x2075,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x59);
    poke(0x2075, 0xc1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7238,
        bc: 0x5e68,
        de: 0xff28,
        hl: 0x2075,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb5a | BIT 3, D
  test(
      "OPCODE "
      "cb5a | BIT 3, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xeb00,
        bc: 0xfea7,
        de: 0x17d1,
        hl: 0xd99b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x5a);
    poke(0xd99b, 0xe8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xeb54,
        bc: 0xfea7,
        de: 0x17d1,
        hl: 0xd99b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb5b | BIT 3, E
  test(
      "OPCODE "
      "cb5b | BIT 3, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6b00,
        bc: 0x6f2c,
        de: 0x3fe3,
        hl: 0x1691,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x5b);
    poke(0x1691, 0xc7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6b74,
        bc: 0x6f2c,
        de: 0x3fe3,
        hl: 0x1691,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb5c | BIT 3, H
  test(
      "OPCODE "
      "cb5c | BIT 3, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3300,
        bc: 0xa7e7,
        de: 0x2077,
        hl: 0x13e9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x5c);
    poke(0x13e9, 0xae);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3354,
        bc: 0xa7e7,
        de: 0x2077,
        hl: 0x13e9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb5d | BIT 3, L
  test(
      "OPCODE "
      "cb5d | BIT 3, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc100,
        bc: 0xafcc,
        de: 0xc8b1,
        hl: 0xee49,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x5d);
    poke(0xee49, 0xa6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc118,
        bc: 0xafcc,
        de: 0xc8b1,
        hl: 0xee49,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb5e | BIT 3, (HL)
  test(
      "OPCODE "
      "cb5e | BIT 3, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3000,
        bc: 0xad43,
        de: 0x16c1,
        hl: 0x349a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x5e);
    poke(0x349a, 0x3c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3010,
        bc: 0xad43,
        de: 0x16c1,
        hl: 0x349a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb5f_1 | BIT 3, A
  test(
      "OPCODE "
      "cb5f_1 | BIT 3, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x5f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff38,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb5f | BIT 3, A
  test(
      "OPCODE "
      "cb5f | BIT 3, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8c00,
        bc: 0x1b67,
        de: 0x2314,
        hl: 0x6133,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x5f);
    poke(0x6133, 0x90);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8c18,
        bc: 0x1b67,
        de: 0x2314,
        hl: 0x6133,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb60 | BIT 4, B
  test(
      "OPCODE "
      "cb60 | BIT 4, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9900,
        bc: 0x34b5,
        de: 0x0fd8,
        hl: 0x5273,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x60);
    poke(0x5273, 0x0a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9930,
        bc: 0x34b5,
        de: 0x0fd8,
        hl: 0x5273,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb61 | BIT 4, C
  test(
      "OPCODE "
      "cb61 | BIT 4, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd100,
        bc: 0x219f,
        de: 0x3bb4,
        hl: 0x7c44,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x61);
    poke(0x7c44, 0x77);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd118,
        bc: 0x219f,
        de: 0x3bb4,
        hl: 0x7c44,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb62 | BIT 4, D
  test(
      "OPCODE "
      "cb62 | BIT 4, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaf00,
        bc: 0xbdf8,
        de: 0xc536,
        hl: 0x8cc5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x62);
    poke(0x8cc5, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaf54,
        bc: 0xbdf8,
        de: 0xc536,
        hl: 0x8cc5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb63 | BIT 4, E
  test(
      "OPCODE "
      "cb63 | BIT 4, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2a00,
        bc: 0x5e16,
        de: 0xf627,
        hl: 0x84ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x63);
    poke(0x84ca, 0xe6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2a74,
        bc: 0x5e16,
        de: 0xf627,
        hl: 0x84ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb64 | BIT 4, H
  test(
      "OPCODE "
      "cb64 | BIT 4, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa900,
        bc: 0xa365,
        de: 0xc00b,
        hl: 0xea94,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x64);
    poke(0xea94, 0x0c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa97c,
        bc: 0xa365,
        de: 0xc00b,
        hl: 0xea94,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb65 | BIT 4, L
  test(
      "OPCODE "
      "cb65 | BIT 4, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1800,
        bc: 0x8d58,
        de: 0x4256,
        hl: 0x427a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x65);
    poke(0x427a, 0xee);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1838,
        bc: 0x8d58,
        de: 0x4256,
        hl: 0x427a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb66 | BIT 4, (HL)
  test(
      "OPCODE "
      "cb66 | BIT 4, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4c00,
        bc: 0x3ef7,
        de: 0xe544,
        hl: 0xa44f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x66);
    poke(0xa44f, 0xd2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4c10,
        bc: 0x3ef7,
        de: 0xe544,
        hl: 0xa44f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb67_1 | BIT 4, A
  test(
      "OPCODE "
      "cb67_1 | BIT 4, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x67);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff38,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb67 | BIT 4, A
  test(
      "OPCODE "
      "cb67 | BIT 4, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8600,
        bc: 0x5e92,
        de: 0x2986,
        hl: 0x394d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x67);
    poke(0x394d, 0x10);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8654,
        bc: 0x5e92,
        de: 0x2986,
        hl: 0x394d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb68 | BIT 5, B
  test(
      "OPCODE "
      "cb68 | BIT 5, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd700,
        bc: 0x0f6a,
        de: 0x18a6,
        hl: 0xddd2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x68);
    poke(0xddd2, 0x16);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd75c,
        bc: 0x0f6a,
        de: 0x18a6,
        hl: 0xddd2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb69 | BIT 5, C
  test(
      "OPCODE "
      "cb69 | BIT 5, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xda00,
        bc: 0x691b,
        de: 0x7c79,
        hl: 0x1dba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x69);
    poke(0x1dba, 0x8a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xda5c,
        bc: 0x691b,
        de: 0x7c79,
        hl: 0x1dba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb6a | BIT 5, D
  test(
      "OPCODE "
      "cb6a | BIT 5, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2200,
        bc: 0x13e8,
        de: 0x86d4,
        hl: 0x4e09,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x6a);
    poke(0x4e09, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2254,
        bc: 0x13e8,
        de: 0x86d4,
        hl: 0x4e09,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb6b | BIT 5, E
  test(
      "OPCODE "
      "cb6b | BIT 5, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaf00,
        bc: 0x5123,
        de: 0x7635,
        hl: 0x1ca9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x6b);
    poke(0x1ca9, 0x86);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaf30,
        bc: 0x5123,
        de: 0x7635,
        hl: 0x1ca9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb6c | BIT 5, H
  test(
      "OPCODE "
      "cb6c | BIT 5, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4300,
        bc: 0xfaa6,
        de: 0xabc2,
        hl: 0x5605,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x6c);
    poke(0x5605, 0x2b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4354,
        bc: 0xfaa6,
        de: 0xabc2,
        hl: 0x5605,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb6d | BIT 5, L
  test(
      "OPCODE "
      "cb6d | BIT 5, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7f00,
        bc: 0xf099,
        de: 0xd435,
        hl: 0xd9ad,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x6d);
    poke(0xd9ad, 0x4e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7f38,
        bc: 0xf099,
        de: 0xd435,
        hl: 0xd9ad,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb6e | BIT 5, (HL)
  test(
      "OPCODE "
      "cb6e | BIT 5, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4a00,
        bc: 0x08c9,
        de: 0x8177,
        hl: 0xd8ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x6e);
    poke(0xd8ba, 0x31);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4a10,
        bc: 0x08c9,
        de: 0x8177,
        hl: 0xd8ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb6f_1 | BIT 5, A
  test(
      "OPCODE "
      "cb6f_1 | BIT 5, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x6f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff38,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb6f | BIT 5, A
  test(
      "OPCODE "
      "cb6f | BIT 5, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa100,
        bc: 0x8c80,
        de: 0x4678,
        hl: 0x4d34,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x6f);
    poke(0x4d34, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa130,
        bc: 0x8c80,
        de: 0x4678,
        hl: 0x4d34,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb70 | BIT 6, B
  test(
      "OPCODE "
      "cb70 | BIT 6, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1900,
        bc: 0x958a,
        de: 0x5dab,
        hl: 0xf913,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x70);
    poke(0xf913, 0xcf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1954,
        bc: 0x958a,
        de: 0x5dab,
        hl: 0xf913,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb71 | BIT 6, C
  test(
      "OPCODE "
      "cb71 | BIT 6, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3d00,
        bc: 0x095e,
        de: 0xd6df,
        hl: 0x42fe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x71);
    poke(0x42fe, 0x24);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3d18,
        bc: 0x095e,
        de: 0xd6df,
        hl: 0x42fe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb72 | BIT 6, D
  test(
      "OPCODE "
      "cb72 | BIT 6, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa500,
        bc: 0xc0bf,
        de: 0x4c8d,
        hl: 0xad11,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x72);
    poke(0xad11, 0x3b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa518,
        bc: 0xc0bf,
        de: 0x4c8d,
        hl: 0xad11,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb73 | BIT 6, E
  test(
      "OPCODE "
      "cb73 | BIT 6, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf200,
        bc: 0x49a6,
        de: 0xb279,
        hl: 0x2ecc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x73);
    poke(0x2ecc, 0xe0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf238,
        bc: 0x49a6,
        de: 0xb279,
        hl: 0x2ecc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb74 | BIT 6, H
  test(
      "OPCODE "
      "cb74 | BIT 6, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0500,
        bc: 0x445e,
        de: 0x05e9,
        hl: 0x983d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x74);
    poke(0x983d, 0xfa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x055c,
        bc: 0x445e,
        de: 0x05e9,
        hl: 0x983d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb75 | BIT 6, L
  test(
      "OPCODE "
      "cb75 | BIT 6, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6b00,
        bc: 0x83c6,
        de: 0x635a,
        hl: 0xd18d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x75);
    poke(0xd18d, 0x11);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6b5c,
        bc: 0x83c6,
        de: 0x635a,
        hl: 0xd18d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb76 | BIT 6, (HL)
  test(
      "OPCODE "
      "cb76 | BIT 6, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf800,
        bc: 0x3057,
        de: 0x3629,
        hl: 0xbc71,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x76);
    poke(0xbc71, 0x18);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf854,
        bc: 0x3057,
        de: 0x3629,
        hl: 0xbc71,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb77_1 | BIT 6, A
  test(
      "OPCODE "
      "cb77_1 | BIT 6, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x77);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff38,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb77 | BIT 6, A
  test(
      "OPCODE "
      "cb77 | BIT 6, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9200,
        bc: 0xd6f8,
        de: 0x5100,
        hl: 0x736d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x77);
    poke(0x736d, 0x36);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9254,
        bc: 0xd6f8,
        de: 0x5100,
        hl: 0x736d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb78 | BIT 7, B
  test(
      "OPCODE "
      "cb78 | BIT 7, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7200,
        bc: 0x1cf8,
        de: 0x8d2b,
        hl: 0xc76a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x78);
    poke(0xc76a, 0x1f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x725c,
        bc: 0x1cf8,
        de: 0x8d2b,
        hl: 0xc76a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb79 | BIT 7, C
  test(
      "OPCODE "
      "cb79 | BIT 7, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa800,
        bc: 0x809e,
        de: 0x1124,
        hl: 0x39e8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x79);
    poke(0x39e8, 0x98);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa898,
        bc: 0x809e,
        de: 0x1124,
        hl: 0x39e8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb7a | BIT 7, D
  test(
      "OPCODE "
      "cb7a | BIT 7, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5800,
        bc: 0x7d24,
        de: 0x63e1,
        hl: 0xd9af,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x7a);
    poke(0xd9af, 0xed);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5874,
        bc: 0x7d24,
        de: 0x63e1,
        hl: 0xd9af,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb7b | BIT 7, E
  test(
      "OPCODE "
      "cb7b | BIT 7, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0300,
        bc: 0x50ab,
        de: 0x05bd,
        hl: 0x6bd0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x7b);
    poke(0x6bd0, 0xa5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x03b8,
        bc: 0x50ab,
        de: 0x05bd,
        hl: 0x6bd0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb7c | BIT 7, H
  test(
      "OPCODE "
      "cb7c | BIT 7, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xad00,
        bc: 0xf77b,
        de: 0x55ae,
        hl: 0x063b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x7c);
    poke(0x063b, 0x34);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xad54,
        bc: 0xf77b,
        de: 0x55ae,
        hl: 0x063b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb7d | BIT 7, L
  test(
      "OPCODE "
      "cb7d | BIT 7, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8200,
        bc: 0xb792,
        de: 0x38cb,
        hl: 0x5f9b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x7d);
    poke(0x5f9b, 0x97);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8298,
        bc: 0xb792,
        de: 0x38cb,
        hl: 0x5f9b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb7e | BIT 7, (HL)
  test(
      "OPCODE "
      "cb7e | BIT 7, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4200,
        bc: 0x3b91,
        de: 0xf59c,
        hl: 0xa25e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x7e);
    poke(0xa25e, 0xd7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4290,
        bc: 0x3b91,
        de: 0xf59c,
        hl: 0xa25e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction cb7f_1 | BIT 7, A
  test(
      "OPCODE "
      "cb7f_1 | BIT 7, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x7f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xffb8,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb7f | BIT 7, A
  test(
      "OPCODE "
      "cb7f | BIT 7, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6a00,
        bc: 0x84ec,
        de: 0xcf4e,
        hl: 0x185b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x7f);
    poke(0x185b, 0xf1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6a7c,
        bc: 0x84ec,
        de: 0xcf4e,
        hl: 0x185b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb80 | RES 0, B
  test(
      "OPCODE "
      "cb80 | RES 0, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8f00,
        bc: 0x702f,
        de: 0x17bd,
        hl: 0xa706,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x80);
    poke(0xa706, 0x0a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8f00,
        bc: 0x702f,
        de: 0x17bd,
        hl: 0xa706,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb81 | RES 0, C
  test(
      "OPCODE "
      "cb81 | RES 0, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xae00,
        bc: 0x947f,
        de: 0x7153,
        hl: 0x6616,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x81);
    poke(0x6616, 0x74);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xae00,
        bc: 0x947e,
        de: 0x7153,
        hl: 0x6616,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb82 | RES 0, D
  test(
      "OPCODE "
      "cb82 | RES 0, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8100,
        bc: 0xbed2,
        de: 0xc719,
        hl: 0x4572,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x82);
    poke(0x4572, 0x2f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8100,
        bc: 0xbed2,
        de: 0xc619,
        hl: 0x4572,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb83 | RES 0, E
  test(
      "OPCODE "
      "cb83 | RES 0, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe600,
        bc: 0x63a2,
        de: 0xccf7,
        hl: 0xae9a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x83);
    poke(0xae9a, 0x16);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe600,
        bc: 0x63a2,
        de: 0xccf6,
        hl: 0xae9a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb84 | RES 0, H
  test(
      "OPCODE "
      "cb84 | RES 0, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xce00,
        bc: 0xe0cc,
        de: 0xd305,
        hl: 0xd6c0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x84);
    poke(0xd6c0, 0x72);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xce00,
        bc: 0xe0cc,
        de: 0xd305,
        hl: 0xd6c0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb85 | RES 0, L
  test(
      "OPCODE "
      "cb85 | RES 0, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf300,
        bc: 0xed79,
        de: 0x9db7,
        hl: 0xdda0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x85);
    poke(0xdda0, 0x8a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf300,
        bc: 0xed79,
        de: 0x9db7,
        hl: 0xdda0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb86 | RES 0, (HL)
  test(
      "OPCODE "
      "cb86 | RES 0, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2a00,
        bc: 0xb0b9,
        de: 0x9426,
        hl: 0x1b48,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x86);
    poke(0x1b48, 0x62);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2a00,
        bc: 0xb0b9,
        de: 0x9426,
        hl: 0x1b48,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cb87 | RES 0, A
  test(
      "OPCODE "
      "cb87 | RES 0, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1100,
        bc: 0x86dc,
        de: 0x1798,
        hl: 0xdfc5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x87);
    poke(0xdfc5, 0xde);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1000,
        bc: 0x86dc,
        de: 0x1798,
        hl: 0xdfc5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb88 | RES 1, B
  test(
      "OPCODE "
      "cb88 | RES 1, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe300,
        bc: 0x8a21,
        de: 0xe33e,
        hl: 0x674d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x88);
    poke(0x674d, 0x5f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe300,
        bc: 0x8821,
        de: 0xe33e,
        hl: 0x674d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb89 | RES 1, C
  test(
      "OPCODE "
      "cb89 | RES 1, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6000,
        bc: 0xd186,
        de: 0xc5b6,
        hl: 0x1bd7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x89);
    poke(0x1bd7, 0xf2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6000,
        bc: 0xd184,
        de: 0xc5b6,
        hl: 0x1bd7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb8a | RES 1, D
  test(
      "OPCODE "
      "cb8a | RES 1, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3e00,
        bc: 0x5fcd,
        de: 0x0b38,
        hl: 0xb98e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x8a);
    poke(0xb98e, 0x2f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3e00,
        bc: 0x5fcd,
        de: 0x0938,
        hl: 0xb98e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb8b | RES 1, E
  test(
      "OPCODE "
      "cb8b | RES 1, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6500,
        bc: 0x040e,
        de: 0x103f,
        hl: 0x4a07,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x8b);
    poke(0x4a07, 0x3f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6500,
        bc: 0x040e,
        de: 0x103d,
        hl: 0x4a07,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb8c | RES 1, H
  test(
      "OPCODE "
      "cb8c | RES 1, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf800,
        bc: 0x6d27,
        de: 0x9bdf,
        hl: 0xdaef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x8c);
    poke(0xdaef, 0x0c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf800,
        bc: 0x6d27,
        de: 0x9bdf,
        hl: 0xd8ef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb8d | RES 1, L
  test(
      "OPCODE "
      "cb8d | RES 1, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3e00,
        bc: 0x5469,
        de: 0x2c28,
        hl: 0xbd72,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x8d);
    poke(0xbd72, 0x13);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3e00,
        bc: 0x5469,
        de: 0x2c28,
        hl: 0xbd70,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb8e | RES 1, (HL)
  test(
      "OPCODE "
      "cb8e | RES 1, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1f00,
        bc: 0x140b,
        de: 0xb492,
        hl: 0x63a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x8e);
    poke(0x63a7, 0xd4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1f00,
        bc: 0x140b,
        de: 0xb492,
        hl: 0x63a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cb8f | RES 1, A
  test(
      "OPCODE "
      "cb8f | RES 1, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2500,
        bc: 0xc522,
        de: 0xca46,
        hl: 0x1c1a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x8f);
    poke(0x1c1a, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2500,
        bc: 0xc522,
        de: 0xca46,
        hl: 0x1c1a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb90 | RES 2, B
  test(
      "OPCODE "
      "cb90 | RES 2, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5700,
        bc: 0x595c,
        de: 0x4f0a,
        hl: 0xc73c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x90);
    poke(0xc73c, 0xa2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5700,
        bc: 0x595c,
        de: 0x4f0a,
        hl: 0xc73c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb91 | RES 2, C
  test(
      "OPCODE "
      "cb91 | RES 2, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5e00,
        bc: 0x8f26,
        de: 0xa735,
        hl: 0x97e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x91);
    poke(0x97e0, 0x5e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5e00,
        bc: 0x8f22,
        de: 0xa735,
        hl: 0x97e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb92 | RES 2, D
  test(
      "OPCODE "
      "cb92 | RES 2, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3300,
        bc: 0x7d9f,
        de: 0x87d0,
        hl: 0x83d0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x92);
    poke(0x83d0, 0x2b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3300,
        bc: 0x7d9f,
        de: 0x83d0,
        hl: 0x83d0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb93 | RES 2, E
  test(
      "OPCODE "
      "cb93 | RES 2, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc200,
        bc: 0x4e05,
        de: 0xb3f8,
        hl: 0x2234,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x93);
    poke(0x2234, 0xa0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc200,
        bc: 0x4e05,
        de: 0xb3f8,
        hl: 0x2234,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb94 | RES 2, H
  test(
      "OPCODE "
      "cb94 | RES 2, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xee00,
        bc: 0x8f4b,
        de: 0x2831,
        hl: 0xd6a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x94);
    poke(0xd6a6, 0xd0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xee00,
        bc: 0x8f4b,
        de: 0x2831,
        hl: 0xd2a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb95 | RES 2, L
  test(
      "OPCODE "
      "cb95 | RES 2, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3c00,
        bc: 0x6af2,
        de: 0xb25d,
        hl: 0x36ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x95);
    poke(0x36ff, 0xcd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c00,
        bc: 0x6af2,
        de: 0xb25d,
        hl: 0x36fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb96 | RES 2, (HL)
  test(
      "OPCODE "
      "cb96 | RES 2, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7600,
        bc: 0xb027,
        de: 0xd0a5,
        hl: 0x3324,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x96);
    poke(0x3324, 0x21);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7600,
        bc: 0xb027,
        de: 0xd0a5,
        hl: 0x3324,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cb97 | RES 2, A
  test(
      "OPCODE "
      "cb97 | RES 2, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1600,
        bc: 0xad09,
        de: 0x7902,
        hl: 0x97bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x97);
    poke(0x97bc, 0x75);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1200,
        bc: 0xad09,
        de: 0x7902,
        hl: 0x97bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb98 | RES 3, B
  test(
      "OPCODE "
      "cb98 | RES 3, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3400,
        bc: 0xb61c,
        de: 0x771d,
        hl: 0x5d5e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x98);
    poke(0x5d5e, 0xa4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3400,
        bc: 0xb61c,
        de: 0x771d,
        hl: 0x5d5e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb99 | RES 3, C
  test(
      "OPCODE "
      "cb99 | RES 3, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5100,
        bc: 0x65be,
        de: 0x1359,
        hl: 0x8bec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x99);
    poke(0x8bec, 0x0b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5100,
        bc: 0x65b6,
        de: 0x1359,
        hl: 0x8bec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb9a | RES 3, D
  test(
      "OPCODE "
      "cb9a | RES 3, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6400,
        bc: 0x976d,
        de: 0x4c25,
        hl: 0xdcb2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x9a);
    poke(0xdcb2, 0x09);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6400,
        bc: 0x976d,
        de: 0x4425,
        hl: 0xdcb2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb9b | RES 3, E
  test(
      "OPCODE "
      "cb9b | RES 3, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa100,
        bc: 0xb58a,
        de: 0xd264,
        hl: 0x2bd6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x9b);
    poke(0x2bd6, 0xd3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa100,
        bc: 0xb58a,
        de: 0xd264,
        hl: 0x2bd6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb9c | RES 3, H
  test(
      "OPCODE "
      "cb9c | RES 3, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd800,
        bc: 0x63d6,
        de: 0xac7b,
        hl: 0xc7a0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x9c);
    poke(0xc7a0, 0x75);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd800,
        bc: 0x63d6,
        de: 0xac7b,
        hl: 0xc7a0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb9d | RES 3, L
  test(
      "OPCODE "
      "cb9d | RES 3, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0d00,
        bc: 0xd840,
        de: 0x0810,
        hl: 0x0800,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x9d);
    poke(0x0800, 0xcd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0d00,
        bc: 0xd840,
        de: 0x0810,
        hl: 0x0800,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cb9e | RES 3, (HL)
  test(
      "OPCODE "
      "cb9e | RES 3, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3b00,
        bc: 0xebbf,
        de: 0x9434,
        hl: 0x3a65,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x9e);
    poke(0x3a65, 0x2a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3b00,
        bc: 0xebbf,
        de: 0x9434,
        hl: 0x3a65,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(14949), equals(0x22));
  });

  // Test instruction cb9f | RES 3, A
  test(
      "OPCODE "
      "cb9f | RES 3, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb200,
        bc: 0xd1de,
        de: 0xf991,
        hl: 0x72f6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0x9f);
    poke(0x72f6, 0x72);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb200,
        bc: 0xd1de,
        de: 0xf991,
        hl: 0x72f6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba0 | RES 4, B
  test(
      "OPCODE "
      "cba0 | RES 4, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfa00,
        bc: 0xd669,
        de: 0x71e1,
        hl: 0xc80d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa0);
    poke(0xc80d, 0xc0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfa00,
        bc: 0xc669,
        de: 0x71e1,
        hl: 0xc80d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba1 | RES 4, C
  test(
      "OPCODE "
      "cba1 | RES 4, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8200,
        bc: 0x75e4,
        de: 0xa0de,
        hl: 0xd0ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa1);
    poke(0xd0ba, 0xbd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8200,
        bc: 0x75e4,
        de: 0xa0de,
        hl: 0xd0ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba2 | RES 4, D
  test(
      "OPCODE "
      "cba2 | RES 4, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdd00,
        bc: 0x2b0d,
        de: 0x5554,
        hl: 0x6fc0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa2);
    poke(0x6fc0, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdd00,
        bc: 0x2b0d,
        de: 0x4554,
        hl: 0x6fc0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba3 | RES 4, E
  test(
      "OPCODE "
      "cba3 | RES 4, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2200,
        bc: 0x2f0d,
        de: 0x4d2c,
        hl: 0x6666,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa3);
    poke(0x6666, 0x8e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2200,
        bc: 0x2f0d,
        de: 0x4d2c,
        hl: 0x6666,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba4 | RES 4, H
  test(
      "OPCODE "
      "cba4 | RES 4, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd600,
        bc: 0xd8ed,
        de: 0x9cd4,
        hl: 0x8bb1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa4);
    poke(0x8bb1, 0xbb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd600,
        bc: 0xd8ed,
        de: 0x9cd4,
        hl: 0x8bb1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba5 | RES 4, L
  test(
      "OPCODE "
      "cba5 | RES 4, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb400,
        bc: 0xb393,
        de: 0x3e42,
        hl: 0x88ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa5);
    poke(0x88ca, 0x4f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb400,
        bc: 0xb393,
        de: 0x3e42,
        hl: 0x88ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba6 | RES 4, (HL)
  test(
      "OPCODE "
      "cba6 | RES 4, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0a00,
        bc: 0x4c34,
        de: 0xf5a7,
        hl: 0xe70d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa6);
    poke(0xe70d, 0x27);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0a00,
        bc: 0x4c34,
        de: 0xf5a7,
        hl: 0xe70d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cba7 | RES 4, A
  test(
      "OPCODE "
      "cba7 | RES 4, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4500,
        bc: 0xaf61,
        de: 0x569a,
        hl: 0xc77b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa7);
    poke(0xc77b, 0xff);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4500,
        bc: 0xaf61,
        de: 0x569a,
        hl: 0xc77b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba8 | RES 5, B
  test(
      "OPCODE "
      "cba8 | RES 5, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6400,
        bc: 0xf269,
        de: 0xbae4,
        hl: 0xc9e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa8);
    poke(0xc9e7, 0x46);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6400,
        bc: 0xd269,
        de: 0xbae4,
        hl: 0xc9e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cba9 | RES 5, C
  test(
      "OPCODE "
      "cba9 | RES 5, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe400,
        bc: 0x7ad4,
        de: 0xbf0a,
        hl: 0xce0b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xa9);
    poke(0xce0b, 0x39);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe400,
        bc: 0x7ad4,
        de: 0xbf0a,
        hl: 0xce0b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbaa | RES 5, D
  test(
      "OPCODE "
      "cbaa | RES 5, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcd00,
        bc: 0xd249,
        de: 0x4159,
        hl: 0xfed5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xaa);
    poke(0xfed5, 0xb0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcd00,
        bc: 0xd249,
        de: 0x4159,
        hl: 0xfed5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbab | RES 5, E
  test(
      "OPCODE "
      "cbab | RES 5, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xac00,
        bc: 0x939a,
        de: 0x5d9b,
        hl: 0x0812,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xab);
    poke(0x0812, 0xf2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xac00,
        bc: 0x939a,
        de: 0x5d9b,
        hl: 0x0812,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbac | RES 5, H
  test(
      "OPCODE "
      "cbac | RES 5, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2400,
        bc: 0x8a7d,
        de: 0x2cac,
        hl: 0xffaa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xac);
    poke(0xffaa, 0x09);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2400,
        bc: 0x8a7d,
        de: 0x2cac,
        hl: 0xdfaa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbad | RES 5, L
  test(
      "OPCODE "
      "cbad | RES 5, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6f00,
        bc: 0x5ffb,
        de: 0x2360,
        hl: 0xae15,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xad);
    poke(0xae15, 0x30);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6f00,
        bc: 0x5ffb,
        de: 0x2360,
        hl: 0xae15,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbae | RES 5, (HL)
  test(
      "OPCODE "
      "cbae | RES 5, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5a00,
        bc: 0xaa17,
        de: 0x12f3,
        hl: 0x190e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xae);
    poke(0x190e, 0x66);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5a00,
        bc: 0xaa17,
        de: 0x12f3,
        hl: 0x190e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(6414), equals(0x46));
  });

  // Test instruction cbaf | RES 5, A
  test(
      "OPCODE "
      "cbaf | RES 5, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfc00,
        bc: 0xbb3f,
        de: 0x8bb6,
        hl: 0x5877,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xaf);
    poke(0x5877, 0x62);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdc00,
        bc: 0xbb3f,
        de: 0x8bb6,
        hl: 0x5877,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb0 | RES 6, B
  test(
      "OPCODE "
      "cbb0 | RES 6, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb900,
        bc: 0x7a79,
        de: 0x1aaa,
        hl: 0xc3ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb0);
    poke(0xc3ba, 0x4c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb900,
        bc: 0x3a79,
        de: 0x1aaa,
        hl: 0xc3ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb1 | RES 6, C
  test(
      "OPCODE "
      "cbb1 | RES 6, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4900,
        bc: 0x63e4,
        de: 0xa544,
        hl: 0x1190,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb1);
    poke(0x1190, 0xe3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4900,
        bc: 0x63a4,
        de: 0xa544,
        hl: 0x1190,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb2 | RES 6, D
  test(
      "OPCODE "
      "cbb2 | RES 6, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4d00,
        bc: 0x2b03,
        de: 0x6b23,
        hl: 0x6ff5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb2);
    poke(0x6ff5, 0x04);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4d00,
        bc: 0x2b03,
        de: 0x2b23,
        hl: 0x6ff5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb3 | RES 6, E
  test(
      "OPCODE "
      "cbb3 | RES 6, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8700,
        bc: 0x857a,
        de: 0xe98b,
        hl: 0x5cb1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb3);
    poke(0x5cb1, 0x43);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8700,
        bc: 0x857a,
        de: 0xe98b,
        hl: 0x5cb1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb4 | RES 6, H
  test(
      "OPCODE "
      "cbb4 | RES 6, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2b00,
        bc: 0xb73e,
        de: 0x79c9,
        hl: 0xe1bb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb4);
    poke(0xe1bb, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2b00,
        bc: 0xb73e,
        de: 0x79c9,
        hl: 0xa1bb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb5 | RES 6, L
  test(
      "OPCODE "
      "cbb5 | RES 6, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9b00,
        bc: 0xd879,
        de: 0x2ec9,
        hl: 0x4bba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb5);
    poke(0x4bba, 0x70);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9b00,
        bc: 0xd879,
        de: 0x2ec9,
        hl: 0x4bba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb6 | RES 6, (HL)
  test(
      "OPCODE "
      "cbb6 | RES 6, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8600,
        bc: 0x89bf,
        de: 0xde4a,
        hl: 0x4fab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb6);
    poke(0x4fab, 0xa5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8600,
        bc: 0x89bf,
        de: 0xde4a,
        hl: 0x4fab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cbb7 | RES 6, A
  test(
      "OPCODE "
      "cbb7 | RES 6, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2200,
        bc: 0xfb8a,
        de: 0x3d6e,
        hl: 0xd4a2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb7);
    poke(0xd4a2, 0xf2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2200,
        bc: 0xfb8a,
        de: 0x3d6e,
        hl: 0xd4a2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb8 | RES 7, B
  test(
      "OPCODE "
      "cbb8 | RES 7, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd000,
        bc: 0x37c6,
        de: 0x225a,
        hl: 0xd249,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb8);
    poke(0xd249, 0xc4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd000,
        bc: 0x37c6,
        de: 0x225a,
        hl: 0xd249,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbb9 | RES 7, C
  test(
      "OPCODE "
      "cbb9 | RES 7, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa500,
        bc: 0x1b4a,
        de: 0xd584,
        hl: 0x5dee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xb9);
    poke(0x5dee, 0xcc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa500,
        bc: 0x1b4a,
        de: 0xd584,
        hl: 0x5dee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbba | RES 7, D
  test(
      "OPCODE "
      "cbba | RES 7, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6300,
        bc: 0xa5fe,
        de: 0xf42b,
        hl: 0x34c9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xba);
    poke(0x34c9, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6300,
        bc: 0xa5fe,
        de: 0x742b,
        hl: 0x34c9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbbb | RES 7, E
  test(
      "OPCODE "
      "cbbb | RES 7, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1200,
        bc: 0xf661,
        de: 0xaa4f,
        hl: 0xcb30,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xbb);
    poke(0xcb30, 0xf4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1200,
        bc: 0xf661,
        de: 0xaa4f,
        hl: 0xcb30,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbbc | RES 7, H
  test(
      "OPCODE "
      "cbbc | RES 7, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9800,
        bc: 0xadc3,
        de: 0x0b29,
        hl: 0x7b6e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xbc);
    poke(0x7b6e, 0x45);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9800,
        bc: 0xadc3,
        de: 0x0b29,
        hl: 0x7b6e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbbd | RES 7, L
  test(
      "OPCODE "
      "cbbd | RES 7, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd600,
        bc: 0xa6e1,
        de: 0x8813,
        hl: 0x10b8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xbd);
    poke(0x10b8, 0x35);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd600,
        bc: 0xa6e1,
        de: 0x8813,
        hl: 0x1038,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbbe | RES 7, (HL)
  test(
      "OPCODE "
      "cbbe | RES 7, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xca00,
        bc: 0xff64,
        de: 0x1218,
        hl: 0x77d5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xbe);
    poke(0x77d5, 0xea);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xca00,
        bc: 0xff64,
        de: 0x1218,
        hl: 0x77d5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(30677), equals(0x6a));
  });

  // Test instruction cbbf | RES 7, A
  test(
      "OPCODE "
      "cbbf | RES 7, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6800,
        bc: 0x4845,
        de: 0x690a,
        hl: 0x15de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xbf);
    poke(0x15de, 0x1d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6800,
        bc: 0x4845,
        de: 0x690a,
        hl: 0x15de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc0 | SET 0, B
  test(
      "OPCODE "
      "cbc0 | SET 0, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe300,
        bc: 0xef71,
        de: 0xbffb,
        hl: 0xb3a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc0);
    poke(0xb3a1, 0x5c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe300,
        bc: 0xef71,
        de: 0xbffb,
        hl: 0xb3a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc1 | SET 0, C
  test(
      "OPCODE "
      "cbc1 | SET 0, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3200,
        bc: 0x32a1,
        de: 0x59ab,
        hl: 0x3343,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc1);
    poke(0x3343, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3200,
        bc: 0x32a1,
        de: 0x59ab,
        hl: 0x3343,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc2 | SET 0, D
  test(
      "OPCODE "
      "cbc2 | SET 0, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc700,
        bc: 0xb159,
        de: 0xc023,
        hl: 0xe1f3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc2);
    poke(0xe1f3, 0x14);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc700,
        bc: 0xb159,
        de: 0xc123,
        hl: 0xe1f3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc3 | SET 0, E
  test(
      "OPCODE "
      "cbc3 | SET 0, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0400,
        bc: 0xb463,
        de: 0xc211,
        hl: 0x8f3a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc3);
    poke(0x8f3a, 0x81);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0400,
        bc: 0xb463,
        de: 0xc211,
        hl: 0x8f3a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc4 | SET 0, H
  test(
      "OPCODE "
      "cbc4 | SET 0, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7e00,
        bc: 0x545a,
        de: 0x6ecf,
        hl: 0x5876,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc4);
    poke(0x5876, 0x9d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7e00,
        bc: 0x545a,
        de: 0x6ecf,
        hl: 0x5976,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc5 | SET 0, L
  test(
      "OPCODE "
      "cbc5 | SET 0, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4000,
        bc: 0xc617,
        de: 0x079c,
        hl: 0x4107,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc5);
    poke(0x4107, 0xcc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4000,
        bc: 0xc617,
        de: 0x079c,
        hl: 0x4107,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc6 | SET 0, (HL)
  test(
      "OPCODE "
      "cbc6 | SET 0, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb800,
        bc: 0x0373,
        de: 0xb807,
        hl: 0xf0be,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc6);
    poke(0xf0be, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb800,
        bc: 0x0373,
        de: 0xb807,
        hl: 0xf0be,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(61630), equals(0x9d));
  });

  // Test instruction cbc7 | SET 0, A
  test(
      "OPCODE "
      "cbc7 | SET 0, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7700,
        bc: 0x3681,
        de: 0x9b55,
        hl: 0x583f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc7);
    poke(0x583f, 0x58);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7700,
        bc: 0x3681,
        de: 0x9b55,
        hl: 0x583f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc8 | SET 1, B
  test(
      "OPCODE "
      "cbc8 | SET 1, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7d00,
        bc: 0xa772,
        de: 0x8682,
        hl: 0x7cf3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc8);
    poke(0x7cf3, 0x75);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7d00,
        bc: 0xa772,
        de: 0x8682,
        hl: 0x7cf3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbc9 | SET 1, C
  test(
      "OPCODE "
      "cbc9 | SET 1, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0b00,
        bc: 0x67ee,
        de: 0x30e0,
        hl: 0x72db,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xc9);
    poke(0x72db, 0x87);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0b00,
        bc: 0x67ee,
        de: 0x30e0,
        hl: 0x72db,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbca | SET 1, D
  test(
      "OPCODE "
      "cbca | SET 1, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9c00,
        bc: 0x9517,
        de: 0xcfbb,
        hl: 0xfbc7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xca);
    poke(0xfbc7, 0x1a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9c00,
        bc: 0x9517,
        de: 0xcfbb,
        hl: 0xfbc7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbcb | SET 1, E
  test(
      "OPCODE "
      "cbcb | SET 1, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe800,
        bc: 0x0f3d,
        de: 0x336f,
        hl: 0xf70d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xcb);
    poke(0xf70d, 0xa1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe800,
        bc: 0x0f3d,
        de: 0x336f,
        hl: 0xf70d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbcc | SET 1, H
  test(
      "OPCODE "
      "cbcc | SET 1, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfb00,
        bc: 0x7981,
        de: 0x0bbb,
        hl: 0x18fd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xcc);
    poke(0x18fd, 0xfe);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfb00,
        bc: 0x7981,
        de: 0x0bbb,
        hl: 0x1afd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbcd | SET 1, L
  test(
      "OPCODE "
      "cbcd | SET 1, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5500,
        bc: 0x5e78,
        de: 0xbf34,
        hl: 0x2602,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xcd);
    poke(0x2602, 0x2d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5500,
        bc: 0x5e78,
        de: 0xbf34,
        hl: 0x2602,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbce | SET 1, (HL)
  test(
      "OPCODE "
      "cbce | SET 1, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd500,
        bc: 0xa111,
        de: 0xcb2a,
        hl: 0x8ec6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xce);
    poke(0x8ec6, 0xbf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd500,
        bc: 0xa111,
        de: 0xcb2a,
        hl: 0x8ec6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cbcf | SET 1, A
  test(
      "OPCODE "
      "cbcf | SET 1, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa200,
        bc: 0x6baf,
        de: 0x98b2,
        hl: 0x98a0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xcf);
    poke(0x98a0, 0xd4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa200,
        bc: 0x6baf,
        de: 0x98b2,
        hl: 0x98a0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd0 | SET 2, B
  test(
      "OPCODE "
      "cbd0 | SET 2, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2300,
        bc: 0x7bcb,
        de: 0x02e7,
        hl: 0x1724,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd0);
    poke(0x1724, 0x30);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2300,
        bc: 0x7fcb,
        de: 0x02e7,
        hl: 0x1724,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd1 | SET 2, C
  test(
      "OPCODE "
      "cbd1 | SET 2, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5300,
        bc: 0x581f,
        de: 0xb775,
        hl: 0x47f4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd1);
    poke(0x47f4, 0xc7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5300,
        bc: 0x581f,
        de: 0xb775,
        hl: 0x47f4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd2 | SET 2, D
  test(
      "OPCODE "
      "cbd2 | SET 2, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6900,
        bc: 0xc147,
        de: 0xb79c,
        hl: 0x7528,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd2);
    poke(0x7528, 0x4f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6900,
        bc: 0xc147,
        de: 0xb79c,
        hl: 0x7528,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd3 | SET 2, E
  test(
      "OPCODE "
      "cbd3 | SET 2, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xae00,
        bc: 0xbbc4,
        de: 0xce52,
        hl: 0x5fba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd3);
    poke(0x5fba, 0x3a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xae00,
        bc: 0xbbc4,
        de: 0xce56,
        hl: 0x5fba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd4 | SET 2, H
  test(
      "OPCODE "
      "cbd4 | SET 2, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd800,
        bc: 0x6e1e,
        de: 0xaf6f,
        hl: 0xbf2e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd4);
    poke(0xbf2e, 0x71);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd800,
        bc: 0x6e1e,
        de: 0xaf6f,
        hl: 0xbf2e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd5 | SET 2, L
  test(
      "OPCODE "
      "cbd5 | SET 2, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8400,
        bc: 0xa19a,
        de: 0xd2fd,
        hl: 0x8a77,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd5);
    poke(0x8a77, 0x52);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8400,
        bc: 0xa19a,
        de: 0xd2fd,
        hl: 0x8a77,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd6 | SET 2, (HL)
  test(
      "OPCODE "
      "cbd6 | SET 2, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa900,
        bc: 0xf5f3,
        de: 0x2180,
        hl: 0x6029,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd6);
    poke(0x6029, 0xb7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa900,
        bc: 0xf5f3,
        de: 0x2180,
        hl: 0x6029,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cbd7 | SET 2, A
  test(
      "OPCODE "
      "cbd7 | SET 2, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb100,
        bc: 0xc008,
        de: 0x8425,
        hl: 0x290a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd7);
    poke(0x290a, 0x42);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb500,
        bc: 0xc008,
        de: 0x8425,
        hl: 0x290a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd8 | SET 3, B
  test(
      "OPCODE "
      "cbd8 | SET 3, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8b00,
        bc: 0x09c4,
        de: 0xddf3,
        hl: 0x6d7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd8);
    poke(0x6d7e, 0x6e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8b00,
        bc: 0x09c4,
        de: 0xddf3,
        hl: 0x6d7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbd9 | SET 3, C
  test(
      "OPCODE "
      "cbd9 | SET 3, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3e00,
        bc: 0x3e36,
        de: 0x30ec,
        hl: 0xefc6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xd9);
    poke(0xefc6, 0x5b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3e00,
        bc: 0x3e3e,
        de: 0x30ec,
        hl: 0xefc6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbda | SET 3, D
  test(
      "OPCODE "
      "cbda | SET 3, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd000,
        bc: 0x3e8f,
        de: 0x28fe,
        hl: 0x1c87,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xda);
    poke(0x1c87, 0xb9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd000,
        bc: 0x3e8f,
        de: 0x28fe,
        hl: 0x1c87,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbdb | SET 3, E
  test(
      "OPCODE "
      "cbdb | SET 3, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1200,
        bc: 0x977a,
        de: 0x8c49,
        hl: 0xbc48,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xdb);
    poke(0xbc48, 0xef);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1200,
        bc: 0x977a,
        de: 0x8c49,
        hl: 0xbc48,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbdc | SET 3, H
  test(
      "OPCODE "
      "cbdc | SET 3, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8d00,
        bc: 0x05de,
        de: 0xf8d3,
        hl: 0xb125,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xdc);
    poke(0xb125, 0x0e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8d00,
        bc: 0x05de,
        de: 0xf8d3,
        hl: 0xb925,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbdd | SET 3, L
  test(
      "OPCODE "
      "cbdd | SET 3, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc300,
        bc: 0x08a9,
        de: 0x2bc8,
        hl: 0x5b9f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xdd);
    poke(0x5b9f, 0x94);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc300,
        bc: 0x08a9,
        de: 0x2bc8,
        hl: 0x5b9f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbde | SET 3, (HL)
  test(
      "OPCODE "
      "cbde | SET 3, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1900,
        bc: 0x900f,
        de: 0xd572,
        hl: 0xba03,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xde);
    poke(0xba03, 0x93);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1900,
        bc: 0x900f,
        de: 0xd572,
        hl: 0xba03,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(47619), equals(0x9b));
  });

  // Test instruction cbdf | SET 3, A
  test(
      "OPCODE "
      "cbdf | SET 3, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6700,
        bc: 0x2745,
        de: 0x7e3d,
        hl: 0x0fa1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xdf);
    poke(0x0fa1, 0xc5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6f00,
        bc: 0x2745,
        de: 0x7e3d,
        hl: 0x0fa1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe0 | SET 4, B
  test(
      "OPCODE "
      "cbe0 | SET 4, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3e00,
        bc: 0xd633,
        de: 0x9897,
        hl: 0x3744,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe0);
    poke(0x3744, 0x54);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3e00,
        bc: 0xd633,
        de: 0x9897,
        hl: 0x3744,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe1 | SET 4, C
  test(
      "OPCODE "
      "cbe1 | SET 4, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7d00,
        bc: 0x50a6,
        de: 0x0136,
        hl: 0x5334,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe1);
    poke(0x5334, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7d00,
        bc: 0x50b6,
        de: 0x0136,
        hl: 0x5334,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe2 | SET 4, D
  test(
      "OPCODE "
      "cbe2 | SET 4, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd400,
        bc: 0x6b45,
        de: 0xa192,
        hl: 0x3a4c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe2);
    poke(0x3a4c, 0x47);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd400,
        bc: 0x6b45,
        de: 0xb192,
        hl: 0x3a4c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe3 | SET 4, E
  test(
      "OPCODE "
      "cbe3 | SET 4, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3b00,
        bc: 0xd29c,
        de: 0x05e0,
        hl: 0x2e78,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe3);
    poke(0x2e78, 0x48);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3b00,
        bc: 0xd29c,
        de: 0x05f0,
        hl: 0x2e78,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe4 | SET 4, H
  test(
      "OPCODE "
      "cbe4 | SET 4, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1e00,
        bc: 0x7d5e,
        de: 0x846d,
        hl: 0x0978,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe4);
    poke(0x0978, 0x84);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1e00,
        bc: 0x7d5e,
        de: 0x846d,
        hl: 0x1978,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe5 | SET 4, L
  test(
      "OPCODE "
      "cbe5 | SET 4, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xca00,
        bc: 0xdf0d,
        de: 0xd588,
        hl: 0xb48f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe5);
    poke(0xb48f, 0xcf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xca00,
        bc: 0xdf0d,
        de: 0xd588,
        hl: 0xb49f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe6 | SET 4, (HL)
  test(
      "OPCODE "
      "cbe6 | SET 4, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb300,
        bc: 0x52c2,
        de: 0xdbfe,
        hl: 0x9f9b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe6);
    poke(0x9f9b, 0xf6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb300,
        bc: 0x52c2,
        de: 0xdbfe,
        hl: 0x9f9b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cbe7 | SET 4, A
  test(
      "OPCODE "
      "cbe7 | SET 4, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8e00,
        bc: 0xcf02,
        de: 0x67ef,
        hl: 0xf2e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe7);
    poke(0xf2e0, 0xcf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9e00,
        bc: 0xcf02,
        de: 0x67ef,
        hl: 0xf2e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe8 | SET 5, B
  test(
      "OPCODE "
      "cbe8 | SET 5, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7100,
        bc: 0xbb18,
        de: 0x66ec,
        hl: 0x4a05,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe8);
    poke(0x4a05, 0xe6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7100,
        bc: 0xbb18,
        de: 0x66ec,
        hl: 0x4a05,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbe9 | SET 5, C
  test(
      "OPCODE "
      "cbe9 | SET 5, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5700,
        bc: 0x2897,
        de: 0x8f2f,
        hl: 0xa4d0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xe9);
    poke(0xa4d0, 0xb2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5700,
        bc: 0x28b7,
        de: 0x8f2f,
        hl: 0xa4d0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbea | SET 5, D
  test(
      "OPCODE "
      "cbea | SET 5, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xec00,
        bc: 0x304a,
        de: 0x60a1,
        hl: 0xf32a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xea);
    poke(0xf32a, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xec00,
        bc: 0x304a,
        de: 0x60a1,
        hl: 0xf32a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbeb | SET 5, E
  test(
      "OPCODE "
      "cbeb | SET 5, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf000,
        bc: 0x532b,
        de: 0xa1be,
        hl: 0x1a1a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xeb);
    poke(0x1a1a, 0x21);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf000,
        bc: 0x532b,
        de: 0xa1be,
        hl: 0x1a1a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbec | SET 5, H
  test(
      "OPCODE "
      "cbec | SET 5, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf200,
        bc: 0xf0f3,
        de: 0xa816,
        hl: 0xba08,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xec);
    poke(0xba08, 0x82);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf200,
        bc: 0xf0f3,
        de: 0xa816,
        hl: 0xba08,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbed | SET 5, L
  test(
      "OPCODE "
      "cbed | SET 5, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1300,
        bc: 0x5127,
        de: 0xadab,
        hl: 0x2dec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xed);
    poke(0x2dec, 0xcb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1300,
        bc: 0x5127,
        de: 0xadab,
        hl: 0x2dec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbee | SET 5, (HL)
  test(
      "OPCODE "
      "cbee | SET 5, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9000,
        bc: 0xb273,
        de: 0x50ae,
        hl: 0xe90d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xee);
    poke(0xe90d, 0xf1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9000,
        bc: 0xb273,
        de: 0x50ae,
        hl: 0xe90d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cbef | SET 5, A
  test(
      "OPCODE "
      "cbef | SET 5, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2500,
        bc: 0x4281,
        de: 0xf0d4,
        hl: 0x2c39,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xef);
    poke(0x2c39, 0xc8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2500,
        bc: 0x4281,
        de: 0xf0d4,
        hl: 0x2c39,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf0 | SET 6, B
  test(
      "OPCODE "
      "cbf0 | SET 6, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfb00,
        bc: 0x5802,
        de: 0x0c27,
        hl: 0x6ff5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf0);
    poke(0x6ff5, 0xf6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfb00,
        bc: 0x5802,
        de: 0x0c27,
        hl: 0x6ff5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf1 | SET 6, C
  test(
      "OPCODE "
      "cbf1 | SET 6, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5500,
        bc: 0xa103,
        de: 0x3ff5,
        hl: 0x5e1c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf1);
    poke(0x5e1c, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5500,
        bc: 0xa143,
        de: 0x3ff5,
        hl: 0x5e1c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf2 | SET 6, D
  test(
      "OPCODE "
      "cbf2 | SET 6, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf000,
        bc: 0x625a,
        de: 0xaf82,
        hl: 0x9819,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf2);
    poke(0x9819, 0xe4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf000,
        bc: 0x625a,
        de: 0xef82,
        hl: 0x9819,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf3 | SET 6, E
  test(
      "OPCODE "
      "cbf3 | SET 6, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8600,
        bc: 0xd7bd,
        de: 0x5d86,
        hl: 0x263f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf3);
    poke(0x263f, 0xa1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8600,
        bc: 0xd7bd,
        de: 0x5dc6,
        hl: 0x263f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf4 | SET 6, H
  test(
      "OPCODE "
      "cbf4 | SET 6, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9400,
        bc: 0x0243,
        de: 0x9ec1,
        hl: 0x75d9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf4);
    poke(0x75d9, 0x3f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9400,
        bc: 0x0243,
        de: 0x9ec1,
        hl: 0x75d9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf5 | SET 6, L
  test(
      "OPCODE "
      "cbf5 | SET 6, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xce00,
        bc: 0x2d42,
        de: 0x5e6a,
        hl: 0x47e6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf5);
    poke(0x47e6, 0xce);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xce00,
        bc: 0x2d42,
        de: 0x5e6a,
        hl: 0x47e6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf6 | SET 6, (HL)
  test(
      "OPCODE "
      "cbf6 | SET 6, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7b00,
        bc: 0xc2d7,
        de: 0x4492,
        hl: 0xa9bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf6);
    poke(0xa9bc, 0xb1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7b00,
        bc: 0xc2d7,
        de: 0x4492,
        hl: 0xa9bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(43452), equals(0xf1));
  });

  // Test instruction cbf7 | SET 6, A
  test(
      "OPCODE "
      "cbf7 | SET 6, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6d00,
        bc: 0xabaf,
        de: 0x5b5d,
        hl: 0x188c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf7);
    poke(0x188c, 0x6c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6d00,
        bc: 0xabaf,
        de: 0x5b5d,
        hl: 0x188c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf8 | SET 7, B
  test(
      "OPCODE "
      "cbf8 | SET 7, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc600,
        bc: 0xb812,
        de: 0xa037,
        hl: 0xd2b0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf8);
    poke(0xd2b0, 0xcb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc600,
        bc: 0xb812,
        de: 0xa037,
        hl: 0xd2b0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbf9 | SET 7, C
  test(
      "OPCODE "
      "cbf9 | SET 7, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xef00,
        bc: 0xc5f2,
        de: 0x77a8,
        hl: 0x0730,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xf9);
    poke(0x0730, 0xae);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xef00,
        bc: 0xc5f2,
        de: 0x77a8,
        hl: 0x0730,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbfa | SET 7, D
  test(
      "OPCODE "
      "cbfa | SET 7, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8700,
        bc: 0x1581,
        de: 0x63e3,
        hl: 0xed03,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xfa);
    poke(0xed03, 0x27);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8700,
        bc: 0x1581,
        de: 0xe3e3,
        hl: 0xed03,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbfb | SET 7, E
  test(
      "OPCODE "
      "cbfb | SET 7, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa300,
        bc: 0x7d27,
        de: 0x97c3,
        hl: 0xd1ae,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xfb);
    poke(0xd1ae, 0xf2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa300,
        bc: 0x7d27,
        de: 0x97c3,
        hl: 0xd1ae,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbfc | SET 7, H
  test(
      "OPCODE "
      "cbfc | SET 7, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xec00,
        bc: 0x060a,
        de: 0x3ef6,
        hl: 0x500f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xfc);
    poke(0x500f, 0x94);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xec00,
        bc: 0x060a,
        de: 0x3ef6,
        hl: 0xd00f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbfd | SET 7, L
  test(
      "OPCODE "
      "cbfd | SET 7, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1100,
        bc: 0x231a,
        de: 0x8563,
        hl: 0x28c5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xfd);
    poke(0x28c5, 0xab);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1100,
        bc: 0x231a,
        de: 0x8563,
        hl: 0x28c5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cbfe | SET 7, (HL)
  test(
      "OPCODE "
      "cbfe | SET 7, (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5300,
        bc: 0x4948,
        de: 0x89dd,
        hl: 0x3a24,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xfe);
    poke(0x3a24, 0xc3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5300,
        bc: 0x4948,
        de: 0x89dd,
        hl: 0x3a24,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction cbff | SET 7, A
  test(
      "OPCODE "
      "cbff | SET 7, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7900,
        bc: 0x799b,
        de: 0x6cf7,
        hl: 0xe3f2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcb);
    poke(0x0001, 0xff);
    poke(0xe3f2, 0x25);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf900,
        bc: 0x799b,
        de: 0x6cf7,
        hl: 0xe3f2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction cc_1 | CALL Z, **
  test(
      "OPCODE "
      "cc_1 | CALL Z, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x004e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcc);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x004e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5696,
        pc: 0x9c61);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(22166), equals(0x03));
    expect(peek(22167), equals(0x00));
  });

  // Test instruction cc_2 | CALL Z, **
  test(
      "OPCODE "
      "cc_2 | CALL Z, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcc);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction cd | CALL **
  test(
      "OPCODE "
      "cd | CALL **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xb07d,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xcd);
    poke(0x0001, 0x5d);
    poke(0x0002, 0x3a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xb07b,
        pc: 0x3a5d);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(45179), equals(0x03));
    expect(peek(45180), equals(0x00));
  });

  // Test instruction ce | ADC A, *
  test(
      "OPCODE "
      "ce | ADC A, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x60f5,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xce);
    poke(0x0001, 0xb2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1301,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction cf | RST 8h
  test(
      "OPCODE "
      "cf | RST 8h", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5507,
        pc: 0x6d33);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x6d33, 0xcf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5505,
        pc: 0x0008);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(21765), equals(0x34));
    expect(peek(21766), equals(0x6d));
  });

  // Test instruction d0_1 | RET NC
  test(
      "OPCODE "
      "d0_1 | RET NC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd0);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f9,
        pc: 0xafe9);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction d0_2 | RET NC
  test(
      "OPCODE "
      "d0_2 | RET NC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0099,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd0);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0099,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 5);
  });

  // Test instruction d1 | POP DE
  test(
      "OPCODE "
      "d1 | POP DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4143,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd1);
    poke(0x4143, 0xce);
    poke(0x4144, 0xe8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xe8ce,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4145,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction d2_1 | JP NC, **
  test(
      "OPCODE "
      "d2_1 | JP NC, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0086,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd2);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0086,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xe11b);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction d2_2 | JP NC, **
  test(
      "OPCODE "
      "d2_2 | JP NC, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd2);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction d3_1 | OUT (*), A
  test(
      "OPCODE "
      "d3_1 | OUT (*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd3);
    poke(0x0001, 0xed);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction d3_2 | OUT (*), A
  test(
      "OPCODE "
      "d3_2 | OUT (*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd3);
    poke(0x0001, 0xec);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction d3_3 | OUT (*), A
  test(
      "OPCODE "
      "d3_3 | OUT (*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd3);
    poke(0x0001, 0xed);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction d3_4 | OUT (*), A
  test(
      "OPCODE "
      "d3_4 | OUT (*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd3);
    poke(0x0001, 0xff);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction d3 | OUT (*), A
  test(
      "OPCODE "
      "d3 | OUT (*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd3);
    poke(0x0001, 0xec);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa200,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction d4_1 | CALL NC, **
  test(
      "OPCODE "
      "d4_1 | CALL NC, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd4);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5696,
        pc: 0x9c61);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(22166), equals(0x03));
    expect(peek(22167), equals(0x00));
  });

  // Test instruction d4_2 | CALL NC, **
  test(
      "OPCODE "
      "d4_2 | CALL NC, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000f,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd4);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000f,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction d5 | PUSH DE
  test(
      "OPCODE "
      "d5 | PUSH DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x53e3,
        bc: 0x1459,
        de: 0x775f,
        hl: 0x1a2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xec12,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x53e3,
        bc: 0x1459,
        de: 0x775f,
        hl: 0x1a2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xec10,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(60432), equals(0x5f));
    expect(peek(60433), equals(0x77));
  });

  // Test instruction d6 | SUB *
  test(
      "OPCODE "
      "d6 | SUB *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3900,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd6);
    poke(0x0001, 0xdf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5a1b,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction d7 | RST 10h
  test(
      "OPCODE "
      "d7 | RST 10h", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5507,
        pc: 0x6d33);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x6d33, 0xd7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5505,
        pc: 0x0010);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(21765), equals(0x34));
    expect(peek(21766), equals(0x6d));
  });

  // Test instruction d8_1 | RET C
  test(
      "OPCODE "
      "d8_1 | RET C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd8);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 5);
  });

  // Test instruction d8_2 | RET C
  test(
      "OPCODE "
      "d8_2 | RET C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0099,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd8);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0099,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f9,
        pc: 0xafe9);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction d9 | EXX
  test(
      "OPCODE "
      "d9 | EXX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4d94,
        bc: 0xe07a,
        de: 0xe35b,
        hl: 0x9d64,
        af_: 0x1a64,
        bc_: 0xc930,
        de_: 0x3d01,
        hl_: 0x7d02,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xd9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4d94,
        bc: 0xc930,
        de: 0x3d01,
        hl: 0x7d02,
        af_: 0x1a64,
        bc_: 0xe07a,
        de_: 0xe35b,
        hl_: 0x9d64,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction da_1 | JP C, **
  test(
      "OPCODE "
      "da_1 | JP C, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xda);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xe11b);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction da_2 | JP C, **
  test(
      "OPCODE "
      "da_2 | JP C, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0086,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xda);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0086,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction db_1 | IN A, (*)
  test(
      "OPCODE "
      "db_1 | IN A, (*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdb);
    poke(0x0001, 0xe3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction db_2 | IN A, (*)
  test(
      "OPCODE "
      "db_2 | IN A, (*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdb);
    poke(0x0001, 0xe2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction db_3 | IN A, (*)
  test(
      "OPCODE "
      "db_3 | IN A, (*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdb);
    poke(0x0001, 0xe3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction db | IN A, (*)
  test(
      "OPCODE "
      "db | IN A, (*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdb);
    poke(0x0001, 0xe2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc100,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction dc_1 | CALL C, **
  test(
      "OPCODE "
      "dc_1 | CALL C, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000f,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdc);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000f,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5696,
        pc: 0x9c61);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(22166), equals(0x03));
    expect(peek(22167), equals(0x00));
  });

  // Test instruction dc_2 | CALL C, **
  test(
      "OPCODE "
      "dc_2 | CALL C, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdc);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction dd00 | <UNKNOWN>
  test(
      "OPCODE "
      "dd00", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x00);
    poke(0x0002, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 9) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x03, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction dd09 | ADD IX, BC
  test(
      "OPCODE "
      "dd09 | ADD IX, BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0d05,
        bc: 0x1426,
        de: 0x53ce,
        hl: 0x41e3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9ec0,
        iy: 0x5c89,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x09);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0d34,
        bc: 0x1426,
        de: 0x53ce,
        hl: 0x41e3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb2e6,
        iy: 0x5c89,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction dd19 | ADD IX, DE
  test(
      "OPCODE "
      "dd19 | ADD IX, DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1911,
        bc: 0x0e0b,
        de: 0x2724,
        hl: 0xbe62,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x824f,
        iy: 0x760b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x19);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1928,
        bc: 0x0e0b,
        de: 0x2724,
        hl: 0xbe62,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa973,
        iy: 0x760b,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction dd21 | LD IX, **
  test(
      "OPCODE "
      "dd21 | LD IX, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc935,
        bc: 0x4353,
        de: 0xbd22,
        hl: 0x94d5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdade,
        iy: 0xaad6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x21);
    poke(0x0002, 0xf2);
    poke(0x0003, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc935,
        bc: 0x4353,
        de: 0xbd22,
        hl: 0x94d5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7cf2,
        iy: 0xaad6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 14);
  });

  // Test instruction dd22 | LD (**), IX
  test(
      "OPCODE "
      "dd22 | LD (**), IX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5b1d,
        bc: 0x45a1,
        de: 0x6de8,
        hl: 0x39d3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xebe7,
        iy: 0x05b0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x22);
    poke(0x0002, 0x4f);
    poke(0x0003, 0xad);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5b1d,
        bc: 0x45a1,
        de: 0x6de8,
        hl: 0x39d3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xebe7,
        iy: 0x05b0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
    expect(peek(44367), equals(0xe7));
    expect(peek(44368), equals(0xeb));
  });

  // Test instruction dd23 | INC IX
  test(
      "OPCODE "
      "dd23 | INC IX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9095,
        bc: 0xac3c,
        de: 0x4d90,
        hl: 0x379b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd50b,
        iy: 0xa157,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x23);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9095,
        bc: 0xac3c,
        de: 0x4d90,
        hl: 0x379b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd50c,
        iy: 0xa157,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction dd24 | INC IXH
  test(
      "UNDOCUMENTED "
      "dd24 | INC IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0698,
        bc: 0xdcd0,
        de: 0xa31b,
        hl: 0xd527,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8cda,
        iy: 0xb096,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x24);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0688,
        bc: 0xdcd0,
        de: 0xa31b,
        hl: 0xd527,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8dda,
        iy: 0xb096,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd25 | DEC IXH
  test(
      "UNDOCUMENTED "
      "dd25 | DEC IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5acc,
        bc: 0x206b,
        de: 0xed10,
        hl: 0x6eab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbb3c,
        iy: 0x5ebd,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x25);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5aaa,
        bc: 0x206b,
        de: 0xed10,
        hl: 0x6eab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xba3c,
        iy: 0x5ebd,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd26 | LD IXH, *
  test(
      "UNDOCUMENTED "
      "dd26 | LD IXH, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9522,
        bc: 0xede0,
        de: 0xa352,
        hl: 0xadea,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5f40,
        iy: 0x82e1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x26);
    poke(0x0002, 0xad);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9522,
        bc: 0xede0,
        de: 0xa352,
        hl: 0xadea,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad40,
        iy: 0x82e1,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 11);
  }, tags: 'undocumented');

  // Test instruction dd29 | ADD IX, IX
  test(
      "OPCODE "
      "dd29 | ADD IX, IX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xac80,
        bc: 0x0f0e,
        de: 0x72c8,
        hl: 0x1f2a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5195,
        iy: 0x7d8a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x29);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaca0,
        bc: 0x0f0e,
        de: 0x72c8,
        hl: 0x1f2a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa32a,
        iy: 0x7d8a,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction dd2a | LD IX, (**)
  test(
      "OPCODE "
      "dd2a | LD IX, (**)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3d36,
        bc: 0xb24e,
        de: 0xbdbc,
        hl: 0xca4e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xba65,
        iy: 0xe7ce,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x2a);
    poke(0x0002, 0xbc);
    poke(0x0003, 0x40);
    poke(0x40bc, 0xb5);
    poke(0x40bd, 0x30);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3d36,
        bc: 0xb24e,
        de: 0xbdbc,
        hl: 0xca4e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x30b5,
        iy: 0xe7ce,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction dd2b | DEC IX
  test(
      "OPCODE "
      "dd2b | DEC IX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xad4b,
        bc: 0xd5e6,
        de: 0x9377,
        hl: 0xf132,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7a17,
        iy: 0x2188,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x2b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xad4b,
        bc: 0xd5e6,
        de: 0x9377,
        hl: 0xf132,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7a16,
        iy: 0x2188,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction dd2c | INC IXL
  test(
      "UNDOCUMENTED "
      "dd2c | INC IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8838,
        bc: 0xf2f3,
        de: 0xd277,
        hl: 0x9153,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc62f,
        iy: 0xb002,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x2c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8830,
        bc: 0xf2f3,
        de: 0xd277,
        hl: 0x9153,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc630,
        iy: 0xb002,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd2d | DEC IXL
  test(
      "UNDOCUMENTED "
      "dd2d | DEC IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x39bc,
        bc: 0xb23c,
        de: 0x6e11,
        hl: 0x5a49,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0267,
        iy: 0xab03,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x2d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3922,
        bc: 0xb23c,
        de: 0x6e11,
        hl: 0x5a49,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0266,
        iy: 0xab03,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd2e | LD IXL, *
  test(
      "UNDOCUMENTED "
      "dd2e | LD IXL, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9aca,
        bc: 0xa04a,
        de: 0xb49f,
        hl: 0xa4a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbd90,
        iy: 0x38a1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x2e);
    poke(0x0002, 0x1c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9aca,
        bc: 0xa04a,
        de: 0xb49f,
        hl: 0xa4a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbd1c,
        iy: 0x38a1,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 11);
  }, tags: 'undocumented');

  // Test instruction dd34 | INC (IX+*)
  test(
      "OPCODE "
      "dd34 | INC (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8304,
        bc: 0xd1fc,
        de: 0xb80b,
        hl: 0x8082,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdea9,
        iy: 0x6fd8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x34);
    poke(0x0002, 0xe6);
    poke(0xde8f, 0x57);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8308,
        bc: 0xd1fc,
        de: 0xb80b,
        hl: 0x8082,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdea9,
        iy: 0x6fd8,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(56975), equals(0x58));
  });

  // Test instruction dd35 | DEC (IX+*)
  test(
      "OPCODE "
      "dd35 | DEC (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8681,
        bc: 0x4641,
        de: 0x1ef6,
        hl: 0x10ab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc733,
        iy: 0x8ec4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x35);
    poke(0x0002, 0x60);
    poke(0xc793, 0xf7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x86a3,
        bc: 0x4641,
        de: 0x1ef6,
        hl: 0x10ab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc733,
        iy: 0x8ec4,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(51091), equals(0xf6));
  });

  // Test instruction dd36 | LD (IX+*), *
  test(
      "OPCODE "
      "dd36 | LD (IX+*), *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x76dc,
        bc: 0x2530,
        de: 0x5158,
        hl: 0x877d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb5c6,
        iy: 0x8d3c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x36);
    poke(0x0002, 0x35);
    poke(0x0003, 0xb5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x76dc,
        bc: 0x2530,
        de: 0x5158,
        hl: 0x877d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb5c6,
        iy: 0x8d3c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(46587), equals(0xb5));
  });

  // Test instruction dd39 | ADD IX, SP
  test(
      "OPCODE "
      "dd39 | ADD IX, SP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x875b,
        bc: 0xa334,
        de: 0xd79d,
        hl: 0x59e4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb11a,
        iy: 0x4c88,
        sp: 0xfa4a,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x39);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8769,
        bc: 0xa334,
        de: 0xd79d,
        hl: 0x59e4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xab64,
        iy: 0x4c88,
        sp: 0xfa4a,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction dd44 | LD B, IXH
  test(
      "UNDOCUMENTED "
      "dd44 | LD B, IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb37e,
        bc: 0xcbb0,
        de: 0x36e8,
        hl: 0x3f45,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2702,
        iy: 0xb3b9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb37e,
        bc: 0x27b0,
        de: 0x36e8,
        hl: 0x3f45,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2702,
        iy: 0xb3b9,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd45 | LD B, IXL
  test(
      "UNDOCUMENTED "
      "dd45 | LD B, IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4e10,
        bc: 0x5c6d,
        de: 0xd11d,
        hl: 0x1736,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7298,
        iy: 0x2d10,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x45);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4e10,
        bc: 0x986d,
        de: 0xd11d,
        hl: 0x1736,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7298,
        iy: 0x2d10,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd46 | LD B, (IX+*)
  test(
      "OPCODE "
      "dd46 | LD B, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc758,
        bc: 0xbf29,
        de: 0x66f2,
        hl: 0x29ef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5cc7,
        iy: 0x407d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x46);
    poke(0x0002, 0x68);
    poke(0x5d2f, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc758,
        bc: 0x8d29,
        de: 0x66f2,
        hl: 0x29ef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5cc7,
        iy: 0x407d,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd4c | LD C, IXH
  test(
      "UNDOCUMENTED "
      "dd4c | LD C, IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe15c,
        bc: 0x75ec,
        de: 0x7531,
        hl: 0xae9e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3ed8,
        iy: 0x03b7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x4c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe15c,
        bc: 0x753e,
        de: 0x7531,
        hl: 0xae9e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3ed8,
        iy: 0x03b7,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd4d | LD C, IXL
  test(
      "UNDOCUMENTED "
      "dd4d | LD C, IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x469e,
        bc: 0x7864,
        de: 0x6a5a,
        hl: 0x00e2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa1aa,
        iy: 0x0d6f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x4d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x469e,
        bc: 0x78aa,
        de: 0x6a5a,
        hl: 0x00e2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa1aa,
        iy: 0x0d6f,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd4e | LD C, (IX+*)
  test(
      "OPCODE "
      "dd4e | LD C, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7bf7,
        bc: 0x6605,
        de: 0x8d55,
        hl: 0xdef2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd94b,
        iy: 0x17fb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x4e);
    poke(0x0002, 0x2e);
    poke(0xd979, 0x76);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7bf7,
        bc: 0x6676,
        de: 0x8d55,
        hl: 0xdef2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd94b,
        iy: 0x17fb,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd54 | LD D, IXH
  test(
      "UNDOCUMENTED "
      "dd54 | LD D, IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8376,
        bc: 0x0d13,
        de: 0xc767,
        hl: 0x3119,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4b6d,
        iy: 0x030b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x54);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8376,
        bc: 0x0d13,
        de: 0x4b67,
        hl: 0x3119,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4b6d,
        iy: 0x030b,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd55 | LD D, IXL
  test(
      "UNDOCUMENTED "
      "dd55 | LD D, IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff78,
        bc: 0x85e3,
        de: 0x566b,
        hl: 0x8f3a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd7d7,
        iy: 0x4e0b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x55);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff78,
        bc: 0x85e3,
        de: 0xd76b,
        hl: 0x8f3a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd7d7,
        iy: 0x4e0b,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd56 | LD D, (IX+*)
  test(
      "OPCODE "
      "dd56 | LD D, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x97b3,
        bc: 0xb617,
        de: 0xbb50,
        hl: 0x81d1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa306,
        iy: 0x7a49,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x56);
    poke(0x0002, 0xf4);
    poke(0xa2fa, 0xde);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x97b3,
        bc: 0xb617,
        de: 0xde50,
        hl: 0x81d1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa306,
        iy: 0x7a49,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd5c | LD E, IXH
  test(
      "UNDOCUMENTED "
      "dd5c | LD E, IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaf82,
        bc: 0x24bf,
        de: 0x2793,
        hl: 0xf925,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf9a3,
        iy: 0x0b82,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x5c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaf82,
        bc: 0x24bf,
        de: 0x27f9,
        hl: 0xf925,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf9a3,
        iy: 0x0b82,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd5d | LD E, IXL
  test(
      "UNDOCUMENTED "
      "dd5d | LD E, IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x36cb,
        bc: 0x97a9,
        de: 0x400d,
        hl: 0x30fe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3340,
        iy: 0xb3ed,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x5d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x36cb,
        bc: 0x97a9,
        de: 0x4040,
        hl: 0x30fe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3340,
        iy: 0xb3ed,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd5e | LD E, (IX+*)
  test(
      "OPCODE "
      "dd5e | LD E, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa220,
        bc: 0x389d,
        de: 0x2ff8,
        hl: 0x368c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8d32,
        iy: 0x3512,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x5e);
    poke(0x0002, 0x8f);
    poke(0x8cc1, 0xce);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa220,
        bc: 0x389d,
        de: 0x2fce,
        hl: 0x368c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8d32,
        iy: 0x3512,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd60 | LD IXH, B
  test(
      "UNDOCUMENTED "
      "dd60 | LD IXH, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2392,
        bc: 0x7f6a,
        de: 0x3dc0,
        hl: 0xcefb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x44a0,
        iy: 0xc424,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x60);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2392,
        bc: 0x7f6a,
        de: 0x3dc0,
        hl: 0xcefb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7fa0,
        iy: 0xc424,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd61 | LD IXH, C
  test(
      "UNDOCUMENTED "
      "dd61 | LD IXH, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x76ed,
        bc: 0x268c,
        de: 0xd5c8,
        hl: 0xbab0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb650,
        iy: 0x0a93,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x76ed,
        bc: 0x268c,
        de: 0xd5c8,
        hl: 0xbab0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8c50,
        iy: 0x0a93,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd62 | LD IXH, D
  test(
      "UNDOCUMENTED "
      "dd62 | LD IXH, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4c6f,
        bc: 0xb482,
        de: 0xfef4,
        hl: 0x62e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6e25,
        iy: 0x9655,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x62);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4c6f,
        bc: 0xb482,
        de: 0xfef4,
        hl: 0x62e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe25,
        iy: 0x9655,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd63 | LD IXH, E
  test(
      "UNDOCUMENTED "
      "dd63 | LD IXH, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6e9a,
        bc: 0x5499,
        de: 0x3c8f,
        hl: 0x1f64,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbf35,
        iy: 0x0df7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x63);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6e9a,
        bc: 0x5499,
        de: 0x3c8f,
        hl: 0x1f64,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8f35,
        iy: 0x0df7,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd64 | LD IXH, H
  test(
      "UNDOCUMENTED "
      "dd64 | LD IXH, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x47f6,
        bc: 0x1b7a,
        de: 0xa55e,
        hl: 0x2fc2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xefc7,
        iy: 0xaca0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x64);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x47f6,
        bc: 0x1b7a,
        de: 0xa55e,
        hl: 0x2fc2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xefc7,
        iy: 0xaca0,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd65 | LD IXH, L
  test(
      "UNDOCUMENTED "
      "dd65 | LD IXH, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd786,
        bc: 0x7d1d,
        de: 0xb659,
        hl: 0x77e8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x58fa,
        iy: 0x006d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x65);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd786,
        bc: 0x7d1d,
        de: 0xb659,
        hl: 0x77e8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfafa,
        iy: 0x006d,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd66 | LD H, (IX+*)
  test(
      "OPCODE "
      "dd66 | LD H, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x84c2,
        bc: 0x79b1,
        de: 0xca4a,
        hl: 0xaaa0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xce5d,
        iy: 0xdd2d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x66);
    poke(0x0002, 0xb5);
    poke(0xce12, 0x03);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x84c2,
        bc: 0x79b1,
        de: 0xca4a,
        hl: 0x03a0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xce5d,
        iy: 0xdd2d,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd67 | LD IXH, A
  test(
      "UNDOCUMENTED "
      "dd67 | LD IXH, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x967c,
        bc: 0x511e,
        de: 0x336d,
        hl: 0x40f6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x66e7,
        iy: 0x5be2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x67);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x967c,
        bc: 0x511e,
        de: 0x336d,
        hl: 0x40f6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x96e7,
        iy: 0x5be2,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd68 | LD IXL, B
  test(
      "UNDOCUMENTED "
      "dd68 | LD IXL, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4a9d,
        bc: 0xefa8,
        de: 0xfebd,
        hl: 0x07e4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5fd8,
        iy: 0xb23f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x68);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4a9d,
        bc: 0xefa8,
        de: 0xfebd,
        hl: 0x07e4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5fef,
        iy: 0xb23f,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd69 | LD IXL, C
  test(
      "UNDOCUMENTED "
      "dd69 | LD IXL, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6466,
        bc: 0x2142,
        de: 0x2523,
        hl: 0x82b3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6479,
        iy: 0x04a7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x69);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6466,
        bc: 0x2142,
        de: 0x2523,
        hl: 0x82b3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6442,
        iy: 0x04a7,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd6a | LD IXL, D
  test(
      "UNDOCUMENTED "
      "dd6a | LD IXL, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x401f,
        bc: 0x61f1,
        de: 0x4b08,
        hl: 0xfa88,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc37f,
        iy: 0xd8f6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x6a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x401f,
        bc: 0x61f1,
        de: 0x4b08,
        hl: 0xfa88,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc34b,
        iy: 0xd8f6,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd6b | LD IXL, E
  test(
      "UNDOCUMENTED "
      "dd6b | LD IXL, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6dc7,
        bc: 0xe2ae,
        de: 0x40bd,
        hl: 0xf3c0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2290,
        iy: 0x2749,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x6b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6dc7,
        bc: 0xe2ae,
        de: 0x40bd,
        hl: 0xf3c0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x22bd,
        iy: 0x2749,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd6c | LD IXL, H
  test(
      "UNDOCUMENTED "
      "dd6c | LD IXL, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3939,
        bc: 0x90da,
        de: 0x62dc,
        hl: 0x7c31,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x412f,
        iy: 0x7211,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x6c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3939,
        bc: 0x90da,
        de: 0x62dc,
        hl: 0x7c31,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4141,
        iy: 0x7211,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd6d | LD IXL, L
  test(
      "UNDOCUMENTED "
      "dd6d | LD IXL, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3964,
        bc: 0xff3f,
        de: 0x23d4,
        hl: 0xc7c7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9b70,
        iy: 0x20c6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x6d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3964,
        bc: 0xff3f,
        de: 0x23d4,
        hl: 0xc7c7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9b70,
        iy: 0x20c6,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd6e | LD L, (IX+*)
  test(
      "OPCODE "
      "dd6e | LD L, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x223f,
        bc: 0xf661,
        de: 0xb61c,
        hl: 0x0f53,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc648,
        iy: 0xfae8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x6e);
    poke(0x0002, 0x2c);
    poke(0xc674, 0x6b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x223f,
        bc: 0xf661,
        de: 0xb61c,
        hl: 0x0f6b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc648,
        iy: 0xfae8,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd6f | LD IXL, A
  test(
      "UNDOCUMENTED "
      "dd6f | LD IXL, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6e84,
        bc: 0x9cd4,
        de: 0xa293,
        hl: 0x647d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0d0b,
        iy: 0x4a56,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x6f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6e84,
        bc: 0x9cd4,
        de: 0xa293,
        hl: 0x647d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0d6e,
        iy: 0x4a56,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd70 | LD (IX+*), B
  test(
      "OPCODE "
      "dd70 | LD (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd09f,
        bc: 0xfe00,
        de: 0x231e,
        hl: 0x31ec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x05fa,
        iy: 0xea92,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x70);
    poke(0x0002, 0xf6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd09f,
        bc: 0xfe00,
        de: 0x231e,
        hl: 0x31ec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x05fa,
        iy: 0xea92,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(1520), equals(0xfe));
  });

  // Test instruction dd71 | LD (IX+*), C
  test(
      "OPCODE "
      "dd71 | LD (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xebee,
        bc: 0x151c,
        de: 0x05c7,
        hl: 0xee08,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3722,
        iy: 0x2ec6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x71);
    poke(0x0002, 0x23);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xebee,
        bc: 0x151c,
        de: 0x05c7,
        hl: 0xee08,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3722,
        iy: 0x2ec6,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(14149), equals(0x1c));
  });

  // Test instruction dd72 | LD (IX+*), D
  test(
      "OPCODE "
      "dd72 | LD (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x80c9,
        bc: 0xac1e,
        de: 0x63bd,
        hl: 0x828b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8dff,
        iy: 0x94ef,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x72);
    poke(0x0002, 0x93);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x80c9,
        bc: 0xac1e,
        de: 0x63bd,
        hl: 0x828b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8dff,
        iy: 0x94ef,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(36242), equals(0x63));
  });

  // Test instruction dd73 | LD (IX+*), E
  test(
      "OPCODE "
      "dd73 | LD (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8f3e,
        bc: 0xb5a3,
        de: 0x07de,
        hl: 0x0b0c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x79c6,
        iy: 0xae79,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x73);
    poke(0x0002, 0x57);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8f3e,
        bc: 0xb5a3,
        de: 0x07de,
        hl: 0x0b0c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x79c6,
        iy: 0xae79,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(31261), equals(0xde));
  });

  // Test instruction dd74 | LD (IX+*), H
  test(
      "OPCODE "
      "dd74 | LD (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4ae0,
        bc: 0x49c5,
        de: 0x3deb,
        hl: 0x0125,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5910,
        iy: 0x429a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x74);
    poke(0x0002, 0xb9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4ae0,
        bc: 0x49c5,
        de: 0x3deb,
        hl: 0x0125,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5910,
        iy: 0x429a,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(22729), equals(0x01));
  });

  // Test instruction dd75 | LD (IX+*), L
  test(
      "OPCODE "
      "dd75 | LD (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5772,
        bc: 0xe833,
        de: 0xb63e,
        hl: 0x734f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae4c,
        iy: 0xe8c2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x75);
    poke(0x0002, 0x30);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5772,
        bc: 0xe833,
        de: 0xb63e,
        hl: 0x734f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae4c,
        iy: 0xe8c2,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(44668), equals(0x4f));
  });

  // Test instruction dd77 | LD (IX+*), A
  test(
      "OPCODE "
      "dd77 | LD (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdc56,
        bc: 0xd893,
        de: 0x4116,
        hl: 0xf2d2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa181,
        iy: 0x3157,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x77);
    poke(0x0002, 0x8c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdc56,
        bc: 0xd893,
        de: 0x4116,
        hl: 0xf2d2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa181,
        iy: 0x3157,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(41229), equals(0xdc));
  });

  // Test instruction dd7c | LD A, IXH
  test(
      "UNDOCUMENTED "
      "dd7c | LD A, IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7558,
        bc: 0x7705,
        de: 0xac92,
        hl: 0xa6a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8cde,
        iy: 0x7507,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8c58,
        bc: 0x7705,
        de: 0xac92,
        hl: 0xa6a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8cde,
        iy: 0x7507,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd7d | LD A, IXL
  test(
      "UNDOCUMENTED "
      "dd7d | LD A, IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6c18,
        bc: 0x93fb,
        de: 0x6bdd,
        hl: 0x3a10,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd7cb,
        iy: 0xc0f6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x7d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcb18,
        bc: 0x93fb,
        de: 0x6bdd,
        hl: 0x3a10,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd7cb,
        iy: 0xc0f6,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd7e | LD A, (IX+*)
  test(
      "OPCODE "
      "dd7e | LD A, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6a66,
        bc: 0x1f77,
        de: 0x6220,
        hl: 0x0c40,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1cf4,
        iy: 0x1a1f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x7e);
    poke(0x0002, 0xbc);
    poke(0x1cb0, 0x57);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5766,
        bc: 0x1f77,
        de: 0x6220,
        hl: 0x0c40,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1cf4,
        iy: 0x1a1f,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd84 | ADD A, IXH
  test(
      "UNDOCUMENTED "
      "dd84 | ADD A, IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2e47,
        bc: 0x1de8,
        de: 0xb8b9,
        hl: 0x78a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9f1d,
        iy: 0xb11f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x84);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcd98,
        bc: 0x1de8,
        de: 0xb8b9,
        hl: 0x78a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9f1d,
        iy: 0xb11f,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd85 | ADD A, IXL
  test(
      "UNDOCUMENTED "
      "dd85 | ADD A, IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb27a,
        bc: 0xb1ff,
        de: 0x8d7b,
        hl: 0x40c0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb513,
        iy: 0x0688,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc580,
        bc: 0xb1ff,
        de: 0x8d7b,
        hl: 0x40c0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb513,
        iy: 0x0688,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd86 | ADD A, (IX+*)
  test(
      "OPCODE "
      "dd86 | ADD A, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4efa,
        bc: 0xd085,
        de: 0x5bac,
        hl: 0xe364,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb5b5,
        iy: 0xfe3a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x86);
    poke(0x0002, 0xc1);
    poke(0xb576, 0x5b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa9bc,
        bc: 0xd085,
        de: 0x5bac,
        hl: 0xe364,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb5b5,
        iy: 0xfe3a,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd8c | ADC A, IXH
  test(
      "UNDOCUMENTED "
      "dd8c | ADC A, IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbc63,
        bc: 0x8fdc,
        de: 0xea8f,
        hl: 0x9734,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0eb3,
        iy: 0x1b54,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x8c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcb98,
        bc: 0x8fdc,
        de: 0xea8f,
        hl: 0x9734,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0eb3,
        iy: 0x1b54,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd8d | ADC A, IXL
  test(
      "UNDOCUMENTED "
      "dd8d | ADC A, IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb61f,
        bc: 0x1c81,
        de: 0xb6fb,
        hl: 0xd6e5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x09be,
        iy: 0xa736,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7535,
        bc: 0x1c81,
        de: 0xb6fb,
        hl: 0xd6e5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x09be,
        iy: 0xa736,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd8e | ADC A, (IX+*)
  test(
      "OPCODE "
      "dd8e | ADC A, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4ed4,
        bc: 0x182d,
        de: 0xab17,
        hl: 0x94ae,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbb97,
        iy: 0x87da,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x8e);
    poke(0x0002, 0x25);
    poke(0xbbbc, 0x32);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8094,
        bc: 0x182d,
        de: 0xab17,
        hl: 0x94ae,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbb97,
        iy: 0x87da,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd94 | SUB IXH
  test(
      "UNDOCUMENTED "
      "dd94 | SUB IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7ef1,
        bc: 0x9efe,
        de: 0x6ea1,
        hl: 0xfc55,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0a09,
        iy: 0x89c5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x94);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7422,
        bc: 0x9efe,
        de: 0x6ea1,
        hl: 0xfc55,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0a09,
        iy: 0x89c5,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd95 | SUB IXL
  test(
      "UNDOCUMENTED "
      "dd95 | SUB IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2920,
        bc: 0x59ab,
        de: 0x428c,
        hl: 0x3a94,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x44fd,
        iy: 0xf243,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x95);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2c3b,
        bc: 0x59ab,
        de: 0x428c,
        hl: 0x3a94,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x44fd,
        iy: 0xf243,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd96 | SUB (IX+*)
  test(
      "OPCODE "
      "dd96 | SUB (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9b76,
        bc: 0x461f,
        de: 0xced7,
        hl: 0xdb3f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2c66,
        iy: 0x9dbf,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x96);
    poke(0x0002, 0x5f);
    poke(0x2cc5, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5206,
        bc: 0x461f,
        de: 0xced7,
        hl: 0xdb3f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2c66,
        iy: 0x9dbf,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dd9c | SBC IXH
  test(
      "UNDOCUMENTED "
      "dd9c | SBC IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfaf4,
        bc: 0x670e,
        de: 0xafcc,
        hl: 0x8b34,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x285f,
        iy: 0x1caa,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd282,
        bc: 0x670e,
        de: 0xafcc,
        hl: 0x8b34,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x285f,
        iy: 0x1caa,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd9d | SBC IXL
  test(
      "UNDOCUMENTED "
      "dd9d | SBC IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf827,
        bc: 0x0cdb,
        de: 0xdf32,
        hl: 0xd0e4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9b12,
        iy: 0x7d07,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x9d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe5a2,
        bc: 0x0cdb,
        de: 0xdf32,
        hl: 0xd0e4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9b12,
        iy: 0x7d07,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dd9e | SBC A, (IX+*)
  test(
      "OPCODE "
      "dd9e | SBC A, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x938e,
        bc: 0xf9c5,
        de: 0xcbc4,
        hl: 0xca21,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb4cc,
        iy: 0x46fa,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0x9e);
    poke(0x0002, 0x14);
    poke(0xb4e0, 0xb5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xde9b,
        bc: 0xf9c5,
        de: 0xcbc4,
        hl: 0xca21,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb4cc,
        iy: 0x46fa,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction dda4 | AND IXH
  test(
      "UNDOCUMENTED "
      "dda4 | AND IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x52f5,
        bc: 0xba53,
        de: 0xacfc,
        hl: 0x9481,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2f8b,
        iy: 0xedf6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xa4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0210,
        bc: 0xba53,
        de: 0xacfc,
        hl: 0x9481,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2f8b,
        iy: 0xedf6,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dda5 | AND IXL
  test(
      "UNDOCUMENTED "
      "dda5 | AND IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbaaf,
        bc: 0xa675,
        de: 0xd757,
        hl: 0xf1db,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfdef,
        iy: 0xd8ce,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xa5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaabc,
        bc: 0xa675,
        de: 0xd757,
        hl: 0xf1db,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfdef,
        iy: 0xd8ce,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction dda6 | AND (IX+*)
  test(
      "OPCODE "
      "dda6 | AND (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1da4,
        bc: 0x20c4,
        de: 0xebc3,
        hl: 0xda8d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7e95,
        iy: 0x5e8a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xa6);
    poke(0x0002, 0x41);
    poke(0x7ed6, 0xc7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0514,
        bc: 0x20c4,
        de: 0xebc3,
        hl: 0xda8d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7e95,
        iy: 0x5e8a,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction ddac | XOR IXH
  test(
      "UNDOCUMENTED "
      "ddac | XOR IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xef15,
        bc: 0x2a7c,
        de: 0x17e5,
        hl: 0x3f6e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xaffa,
        iy: 0xa0b5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xac);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4000,
        bc: 0x2a7c,
        de: 0x17e5,
        hl: 0x3f6e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xaffa,
        iy: 0xa0b5,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction ddad | XOR IXL
  test(
      "UNDOCUMENTED "
      "ddad | XOR IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xba2e,
        bc: 0x6ba1,
        de: 0xef1b,
        hl: 0x5713,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xba38,
        iy: 0xa708,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xad);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8284,
        bc: 0x6ba1,
        de: 0xef1b,
        hl: 0x5713,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xba38,
        iy: 0xa708,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction ddae | XOR (IX+*)
  test(
      "OPCODE "
      "ddae | XOR (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8009,
        bc: 0x3ad6,
        de: 0xa721,
        hl: 0x2100,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe909,
        iy: 0x87b4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xae);
    poke(0x0002, 0x72);
    poke(0xe97b, 0xc3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4300,
        bc: 0x3ad6,
        de: 0xa721,
        hl: 0x2100,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe909,
        iy: 0x87b4,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction ddb4 | OR IXH
  test(
      "UNDOCUMENTED "
      "ddb4 | OR IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1ccd,
        bc: 0x29aa,
        de: 0x2e82,
        hl: 0x4dc8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9c04,
        iy: 0x8be3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xb4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9c8c,
        bc: 0x29aa,
        de: 0x2e82,
        hl: 0x4dc8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9c04,
        iy: 0x8be3,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction ddb5 | OR IXL
  test(
      "UNDOCUMENTED "
      "ddb5 | OR IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x46b4,
        bc: 0xfc93,
        de: 0x7a06,
        hl: 0x0518,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0ac5,
        iy: 0x4150,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xb5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc780,
        bc: 0xfc93,
        de: 0x7a06,
        hl: 0x0518,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0ac5,
        iy: 0x4150,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction ddb6 | OR (IX+*)
  test(
      "OPCODE "
      "ddb6 | OR (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5017,
        bc: 0xab81,
        de: 0x4287,
        hl: 0x5ee1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc66f,
        iy: 0xd6cc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xb6);
    poke(0x0002, 0x31);
    poke(0xc6a0, 0x1c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5c0c,
        bc: 0xab81,
        de: 0x4287,
        hl: 0x5ee1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc66f,
        iy: 0xd6cc,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction ddbc | CP IXH
  test(
      "UNDOCUMENTED "
      "ddbc | CP IXH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x53e0,
        bc: 0xaa98,
        de: 0xf7d7,
        hl: 0xfa0c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbe7a,
        iy: 0xa41f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x53bf,
        bc: 0xaa98,
        de: 0xf7d7,
        hl: 0xfa0c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbe7a,
        iy: 0xa41f,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction ddbd | CP IXL
  test(
      "UNDOCUMENTED "
      "ddbd | CP IXL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdc83,
        bc: 0x80ce,
        de: 0x5d2f,
        hl: 0xe999,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbb41,
        iy: 0xa24f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xbd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdc82,
        bc: 0x80ce,
        de: 0x5d2f,
        hl: 0xe999,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbb41,
        iy: 0xa24f,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction ddbe | CP (IX+*)
  test(
      "OPCODE "
      "ddbe | CP (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9838,
        bc: 0xbfd5,
        de: 0xa299,
        hl: 0xd34b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9332,
        iy: 0xb1d5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xbe);
    poke(0x0002, 0x48);
    poke(0x937a, 0x5b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x981e,
        bc: 0xbfd5,
        de: 0xa299,
        hl: 0xd34b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9332,
        iy: 0xb1d5,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction ddcb00 | RLC (IX+*), B
  test(
      "UNDOCUMENTED "
      "ddcb00 | RLC (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3c65,
        bc: 0xf0e4,
        de: 0x09d1,
        hl: 0x646b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1da1,
        iy: 0xf08f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0d);
    poke(0x0003, 0x00);
    poke(0x1dae, 0xa1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c01,
        bc: 0x43e4,
        de: 0x09d1,
        hl: 0x646b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1da1,
        iy: 0xf08f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(7598), equals(0x43));
  }, tags: 'undocumented');

  // Test instruction ddcb01 | RLC (IX+*), C
  test(
      "UNDOCUMENTED "
      "ddcb01 | RLC (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf68f,
        bc: 0xe33b,
        de: 0x2d4a,
        hl: 0x7725,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x28fd,
        iy: 0xf31b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb7);
    poke(0x0003, 0x01);
    poke(0x28b4, 0xe3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf681,
        bc: 0xe3c7,
        de: 0x2d4a,
        hl: 0x7725,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x28fd,
        iy: 0xf31b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(10420), equals(0xc7));
  }, tags: 'undocumented');

  // Test instruction ddcb02 | RLC (IX+*), D
  test(
      "UNDOCUMENTED "
      "ddcb02 | RLC (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe20c,
        bc: 0x836e,
        de: 0x513a,
        hl: 0xf840,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc796,
        iy: 0xae9b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x91);
    poke(0x0003, 0x02);
    poke(0xc727, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe20d,
        bc: 0x836e,
        de: 0x1b3a,
        hl: 0xf840,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc796,
        iy: 0xae9b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(50983), equals(0x1b));
  }, tags: 'undocumented');

  // Test instruction ddcb03 | RLC (IX+*), E
  test(
      "UNDOCUMENTED "
      "ddcb03 | RLC (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6224,
        bc: 0x3571,
        de: 0xc519,
        hl: 0x48dc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x041e,
        iy: 0xc07b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x48);
    poke(0x0003, 0x03);
    poke(0x0466, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x62a4,
        bc: 0x3571,
        de: 0xc5f0,
        hl: 0x48dc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x041e,
        iy: 0xc07b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(1126), equals(0xf0));
  }, tags: 'undocumented');

  // Test instruction ddcb04 | RLC (IX+*), H
  test(
      "UNDOCUMENTED "
      "ddcb04 | RLC (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb310,
        bc: 0xbfc4,
        de: 0x64af,
        hl: 0xd622,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5949,
        iy: 0xa989,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x48);
    poke(0x0003, 0x04);
    poke(0x5991, 0x68);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb380,
        bc: 0xbfc4,
        de: 0x64af,
        hl: 0xd022,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5949,
        iy: 0xa989,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22929), equals(0xd0));
  }, tags: 'undocumented');

  // Test instruction ddcb05 | RLC (IX+*), L
  test(
      "UNDOCUMENTED "
      "ddcb05 | RLC (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4954,
        bc: 0xbb04,
        de: 0x56ec,
        hl: 0x9d58,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0077,
        iy: 0x1349,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xff);
    poke(0x0003, 0x05);
    poke(0x0076, 0x95);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x492d,
        bc: 0xbb04,
        de: 0x56ec,
        hl: 0x9d2b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0077,
        iy: 0x1349,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(118), equals(0x2b));
  }, tags: 'undocumented');

  // Test instruction ddcb06 | RLC (IX+*)
  test(
      "OPCODE "
      "ddcb06 | RLC (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0cf4,
        bc: 0xf636,
        de: 0x90a6,
        hl: 0x6117,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5421,
        iy: 0x90ee,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x07);
    poke(0x0003, 0x06);
    poke(0x5428, 0x97);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0c29,
        bc: 0xf636,
        de: 0x90a6,
        hl: 0x6117,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5421,
        iy: 0x90ee,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(21544), equals(0x2f));
  });

  // Test instruction ddcb07 | RLC (IX+*), A
  test(
      "UNDOCUMENTED "
      "ddcb07 | RLC (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6f4d,
        bc: 0x9ca3,
        de: 0xbdf6,
        hl: 0xed50,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9803,
        iy: 0x55f9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x42);
    poke(0x0003, 0x07);
    poke(0x9845, 0xae);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5d09,
        bc: 0x9ca3,
        de: 0xbdf6,
        hl: 0xed50,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9803,
        iy: 0x55f9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(38981), equals(0x5d));
  }, tags: 'undocumented');

  // Test instruction ddcb08 | RRC (IX+*), B
  test(
      "UNDOCUMENTED "
      "ddcb08 | RRC (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x02f4,
        bc: 0x1c66,
        de: 0x6023,
        hl: 0xae06,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xef40,
        iy: 0xb006,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0a);
    poke(0x0003, 0x08);
    poke(0xef4a, 0xda);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0228,
        bc: 0x6d66,
        de: 0x6023,
        hl: 0xae06,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xef40,
        iy: 0xb006,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61258), equals(0x6d));
  }, tags: 'undocumented');

  // Test instruction ddcb09 | RRC (IX+*), C
  test(
      "UNDOCUMENTED "
      "ddcb09 | RRC (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9825,
        bc: 0x9258,
        de: 0x54d5,
        hl: 0x5e1e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9d0b,
        iy: 0x6e58,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3b);
    poke(0x0003, 0x09);
    poke(0x9d46, 0x6f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x98a5,
        bc: 0x92b7,
        de: 0x54d5,
        hl: 0x5e1e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9d0b,
        iy: 0x6e58,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(40262), equals(0xb7));
  }, tags: 'undocumented');

  // Test instruction ddcb0a | RRC (IX+*), D
  test(
      "UNDOCUMENTED "
      "ddcb0a | RRC (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd2dd,
        bc: 0x6aac,
        de: 0xe789,
        hl: 0x9293,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1fb4,
        iy: 0x2498,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x83);
    poke(0x0003, 0x0a);
    poke(0x1f37, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd22c,
        bc: 0x6aac,
        de: 0x3c89,
        hl: 0x9293,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1fb4,
        iy: 0x2498,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(7991), equals(0x3c));
  }, tags: 'undocumented');

  // Test instruction ddcb0b | RRC (IX+*), E
  test(
      "UNDOCUMENTED "
      "ddcb0b | RRC (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb82c,
        bc: 0xb284,
        de: 0x23f8,
        hl: 0x7e7d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcd09,
        iy: 0x6a03,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xfa);
    poke(0x0003, 0x0b);
    poke(0xcd03, 0x92);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb808,
        bc: 0xb284,
        de: 0x2349,
        hl: 0x7e7d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcd09,
        iy: 0x6a03,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(52483), equals(0x49));
  }, tags: 'undocumented');

  // Test instruction ddcb0c | RRC (IX+*), H
  test(
      "UNDOCUMENTED "
      "ddcb0c | RRC (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdf8b,
        bc: 0xb6cc,
        de: 0xee8d,
        hl: 0x855a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbf6b,
        iy: 0x9b7d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x79);
    poke(0x0003, 0x0c);
    poke(0xbfe4, 0x0d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdf81,
        bc: 0xb6cc,
        de: 0xee8d,
        hl: 0x865a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbf6b,
        iy: 0x9b7d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(49124), equals(0x86));
  }, tags: 'undocumented');

  // Test instruction ddcb0d | RRC (IX+*), L
  test(
      "UNDOCUMENTED "
      "ddcb0d | RRC (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbae3,
        bc: 0xceec,
        de: 0xbbaa,
        hl: 0xb65e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x88bd,
        iy: 0x503e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe4);
    poke(0x0003, 0x0d);
    poke(0x88a1, 0x1f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xba89,
        bc: 0xceec,
        de: 0xbbaa,
        hl: 0xb68f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x88bd,
        iy: 0x503e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(34977), equals(0x8f));
  }, tags: 'undocumented');

  // Test instruction ddcb0e | RRC (IX+*)
  test(
      "OPCODE "
      "ddcb0e | RRC (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1c36,
        bc: 0x890b,
        de: 0x7830,
        hl: 0x060c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfd49,
        iy: 0x5d07,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc6);
    poke(0x0003, 0x0e);
    poke(0xfd0f, 0xad);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1c81,
        bc: 0x890b,
        de: 0x7830,
        hl: 0x060c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfd49,
        iy: 0x5d07,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(64783), equals(0xd6));
  });

  // Test instruction ddcb0f | RRC (IX+*), A
  test(
      "UNDOCUMENTED "
      "ddcb0f | RRC (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf5a7,
        bc: 0xfad4,
        de: 0xfa4b,
        hl: 0x9c53,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7447,
        iy: 0x2267,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x57);
    poke(0x0003, 0x0f);
    poke(0x749e, 0xf8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7c28,
        bc: 0xfad4,
        de: 0xfa4b,
        hl: 0x9c53,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7447,
        iy: 0x2267,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(29854), equals(0x7c));
  }, tags: 'undocumented');

  // Test instruction ddcb10 | RL (IX+*), B
  test(
      "UNDOCUMENTED "
      "ddcb10 | RL (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf3af,
        bc: 0xba1f,
        de: 0x5387,
        hl: 0x926e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbba2,
        iy: 0xca47,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4f);
    poke(0x0003, 0x10);
    poke(0xbbf1, 0x45);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf38c,
        bc: 0x8b1f,
        de: 0x5387,
        hl: 0x926e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbba2,
        iy: 0xca47,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(48113), equals(0x8b));
  }, tags: 'undocumented');

  // Test instruction ddcb11 | RL (IX+*), C
  test(
      "UNDOCUMENTED "
      "ddcb11 | RL (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2a69,
        bc: 0xd604,
        de: 0xa9aa,
        hl: 0x5b52,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1809,
        iy: 0xd275,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xeb);
    poke(0x0003, 0x11);
    poke(0x17f4, 0xd9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2aa1,
        bc: 0xd6b3,
        de: 0xa9aa,
        hl: 0x5b52,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1809,
        iy: 0xd275,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(6132), equals(0xb3));
  }, tags: 'undocumented');

  // Test instruction ddcb12 | RL (IX+*), D
  test(
      "UNDOCUMENTED "
      "ddcb12 | RL (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9287,
        bc: 0xc479,
        de: 0x26d1,
        hl: 0x10ce,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc0fb,
        iy: 0x2777,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa6);
    poke(0x0003, 0x12);
    poke(0xc0a1, 0xe2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9285,
        bc: 0xc479,
        de: 0xc5d1,
        hl: 0x10ce,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc0fb,
        iy: 0x2777,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(49313), equals(0xc5));
  }, tags: 'undocumented');

  // Test instruction ddcb13 | RL (IX+*), E
  test(
      "UNDOCUMENTED "
      "ddcb13 | RL (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa507,
        bc: 0x580a,
        de: 0xa48f,
        hl: 0x11cd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5ac4,
        iy: 0xccc7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xff);
    poke(0x0003, 0x13);
    poke(0x5ac3, 0xa7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa509,
        bc: 0x580a,
        de: 0xa44f,
        hl: 0x11cd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5ac4,
        iy: 0xccc7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(23235), equals(0x4f));
  }, tags: 'undocumented');

  // Test instruction ddcb14 | RL (IX+*), H
  test(
      "UNDOCUMENTED "
      "ddcb14 | RL (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x294b,
        bc: 0x5b89,
        de: 0x8467,
        hl: 0x0430,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0977,
        iy: 0xc4e8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xdd);
    poke(0x0003, 0x14);
    poke(0x0954, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2909,
        bc: 0x5b89,
        de: 0x8467,
        hl: 0x0b30,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0977,
        iy: 0xc4e8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(2388), equals(0x0b));
  }, tags: 'undocumented');

  // Test instruction ddcb15 | RL (IX+*), L
  test(
      "UNDOCUMENTED "
      "ddcb15 | RL (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1fd1,
        bc: 0x6d53,
        de: 0x5b7c,
        hl: 0xa134,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xede9,
        iy: 0xa85c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x07);
    poke(0x0003, 0x15);
    poke(0xedf0, 0x0e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1f0c,
        bc: 0x6d53,
        de: 0x5b7c,
        hl: 0xa11d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xede9,
        iy: 0xa85c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(60912), equals(0x1d));
  }, tags: 'undocumented');

  // Test instruction ddcb16 | RL (IX+*)
  test(
      "OPCODE "
      "ddcb16 | RL (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xda70,
        bc: 0xa1e4,
        de: 0x00b0,
        hl: 0x92c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x16be,
        iy: 0x2c95,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x45);
    poke(0x0003, 0x16);
    poke(0x1703, 0x5b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdaa0,
        bc: 0xa1e4,
        de: 0x00b0,
        hl: 0x92c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x16be,
        iy: 0x2c95,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(5891), equals(0xb6));
  });

  // Test instruction ddcb17 | RL (IX+*), A
  test(
      "UNDOCUMENTED "
      "ddcb17 | RL (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3300,
        bc: 0xcbd1,
        de: 0x4e1a,
        hl: 0xcd27,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb8c9,
        iy: 0xe6d4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x1c);
    poke(0x0003, 0x17);
    poke(0xb8e5, 0x7e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfcac,
        bc: 0xcbd1,
        de: 0x4e1a,
        hl: 0xcd27,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb8c9,
        iy: 0xe6d4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(47333), equals(0xfc));
  }, tags: 'undocumented');

  // Test instruction ddcb18 | RR (IX+*), B
  test(
      "UNDOCUMENTED "
      "ddcb18 | RR (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd980,
        bc: 0x4eb5,
        de: 0x9cf9,
        hl: 0xb9f1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa189,
        iy: 0xbd7c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0e);
    poke(0x0003, 0x18);
    poke(0xa197, 0x90);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd90c,
        bc: 0x48b5,
        de: 0x9cf9,
        hl: 0xb9f1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa189,
        iy: 0xbd7c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(41367), equals(0x48));
  }, tags: 'undocumented');

  // Test instruction ddcb19 | RR (IX+*), C
  test(
      "UNDOCUMENTED "
      "ddcb19 | RR (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x23b7,
        bc: 0x595a,
        de: 0xa756,
        hl: 0xcf2e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf0e7,
        iy: 0x26e4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa3);
    poke(0x0003, 0x19);
    poke(0xf08a, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2389,
        bc: 0x599b,
        de: 0xa756,
        hl: 0xcf2e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf0e7,
        iy: 0x26e4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61578), equals(0x9b));
  }, tags: 'undocumented');

  // Test instruction ddcb1a | RR (IX+*), D
  test(
      "UNDOCUMENTED "
      "ddcb1a | RR (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8b52,
        bc: 0x7e45,
        de: 0xbd0f,
        hl: 0x37a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xde61,
        iy: 0x9cd9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xac);
    poke(0x0003, 0x1a);
    poke(0xde0d, 0xcc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8b24,
        bc: 0x7e45,
        de: 0x660f,
        hl: 0x37a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xde61,
        iy: 0x9cd9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(56845), equals(0x66));
  }, tags: 'undocumented');

  // Test instruction ddcb1b | RR (IX+*), E
  test(
      "UNDOCUMENTED "
      "ddcb1b | RR (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5c79,
        bc: 0x1414,
        de: 0x811c,
        hl: 0x5881,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb7c3,
        iy: 0xd14f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x05);
    poke(0x0003, 0x1b);
    poke(0xb7c8, 0x91);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5c89,
        bc: 0x1414,
        de: 0x81c8,
        hl: 0x5881,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb7c3,
        iy: 0xd14f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(47048), equals(0xc8));
  }, tags: 'undocumented');

  // Test instruction ddcb1c | RR (IX+*), H
  test(
      "UNDOCUMENTED "
      "ddcb1c | RR (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfafc,
        bc: 0x6277,
        de: 0x8b67,
        hl: 0xd423,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfef9,
        iy: 0x4a66,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xff);
    poke(0x0003, 0x1c);
    poke(0xfef8, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfa25,
        bc: 0x6277,
        de: 0x8b67,
        hl: 0x3023,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfef9,
        iy: 0x4a66,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(65272), equals(0x30));
  }, tags: 'undocumented');

  // Test instruction ddcb1d | RR (IX+*), L
  test(
      "UNDOCUMENTED "
      "ddcb1d | RR (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x76a5,
        bc: 0x324e,
        de: 0xe641,
        hl: 0x58f9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5b63,
        iy: 0xe18b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3a);
    poke(0x0003, 0x1d);
    poke(0x5b9d, 0xf3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x76ad,
        bc: 0x324e,
        de: 0xe641,
        hl: 0x58f9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5b63,
        iy: 0xe18b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(23453), equals(0xf9));
  }, tags: 'undocumented');

  // Test instruction ddcb1e | RR (IX+*)
  test(
      "OPCODE "
      "ddcb1e | RR (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc5d9,
        bc: 0xcd58,
        de: 0x8967,
        hl: 0xf074,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x75b4,
        iy: 0x693a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xce);
    poke(0x0003, 0x1e);
    poke(0x7582, 0x91);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc589,
        bc: 0xcd58,
        de: 0x8967,
        hl: 0xf074,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x75b4,
        iy: 0x693a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(30082), equals(0xc8));
  });

  // Test instruction ddcb1f | RR (IX+*), A
  test(
      "UNDOCUMENTED "
      "ddcb1f | RR (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd28f,
        bc: 0x7f6d,
        de: 0x2058,
        hl: 0x63e3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1d9b,
        iy: 0xbaba,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa8);
    poke(0x0003, 0x1f);
    poke(0x1d43, 0xb4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xda88,
        bc: 0x7f6d,
        de: 0x2058,
        hl: 0x63e3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1d9b,
        iy: 0xbaba,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(7491), equals(0xda));
  }, tags: 'undocumented');

  // Test instruction ddcb20 | SLA (IX+*), B
  test(
      "UNDOCUMENTED "
      "ddcb20 | SLA (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4ce5,
        bc: 0x739e,
        de: 0xdc6c,
        hl: 0x18f4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdc39,
        iy: 0x8b0c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe8);
    poke(0x0003, 0x20);
    poke(0xdc21, 0x0e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4c08,
        bc: 0x1c9e,
        de: 0xdc6c,
        hl: 0x18f4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdc39,
        iy: 0x8b0c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(56353), equals(0x1c));
  }, tags: 'undocumented');

  // Test instruction ddcb21 | SLA (IX+*), C
  test(
      "UNDOCUMENTED "
      "ddcb21 | SLA (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd29d,
        bc: 0x66dd,
        de: 0x23ef,
        hl: 0x9096,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3494,
        iy: 0xb6c3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9e);
    poke(0x0003, 0x21);
    poke(0x3432, 0xf7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd2ad,
        bc: 0x66ee,
        de: 0x23ef,
        hl: 0x9096,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3494,
        iy: 0xb6c3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(13362), equals(0xee));
  }, tags: 'undocumented');

  // Test instruction ddcb22 | SLA (IX+*), D
  test(
      "UNDOCUMENTED "
      "ddcb22 | SLA (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfb5d,
        bc: 0xe0d0,
        de: 0x7c02,
        hl: 0xb4b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbd3f,
        iy: 0x385b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x43);
    poke(0x0003, 0x22);
    poke(0xbd82, 0x9f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfb29,
        bc: 0xe0d0,
        de: 0x3e02,
        hl: 0xb4b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbd3f,
        iy: 0x385b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(48514), equals(0x3e));
  }, tags: 'undocumented');

  // Test instruction ddcb23 | SLA (IX+*), E
  test(
      "UNDOCUMENTED "
      "ddcb23 | SLA (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc359,
        bc: 0x68b6,
        de: 0xda84,
        hl: 0xb990,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x22dd,
        iy: 0xbd27,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc1);
    poke(0x0003, 0x23);
    poke(0x229e, 0xe0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc385,
        bc: 0x68b6,
        de: 0xdac0,
        hl: 0xb990,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x22dd,
        iy: 0xbd27,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(8862), equals(0xc0));
  }, tags: 'undocumented');

  // Test instruction ddcb24 | SLA (IX+*), H
  test(
      "UNDOCUMENTED "
      "ddcb24 | SLA (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbaf5,
        bc: 0x7b0b,
        de: 0x560b,
        hl: 0x7c33,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x31f1,
        iy: 0xddbd,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe8);
    poke(0x0003, 0x24);
    poke(0x31d9, 0xc3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xba81,
        bc: 0x7b0b,
        de: 0x560b,
        hl: 0x8633,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x31f1,
        iy: 0xddbd,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(12761), equals(0x86));
  }, tags: 'undocumented');

  // Test instruction ddcb25 | SLA (IX+*), L
  test(
      "UNDOCUMENTED "
      "ddcb25 | SLA (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x43bb,
        bc: 0xa21b,
        de: 0x2347,
        hl: 0xae4a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcc63,
        iy: 0xfc94,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc1);
    poke(0x0003, 0x25);
    poke(0xcc24, 0xeb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4381,
        bc: 0xa21b,
        de: 0x2347,
        hl: 0xaed6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcc63,
        iy: 0xfc94,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(52260), equals(0xd6));
  }, tags: 'undocumented');

  // Test instruction ddcb26 | SLA (IX+*)
  test(
      "OPCODE "
      "ddcb26 | SLA (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2065,
        bc: 0xff37,
        de: 0xe41f,
        hl: 0x70e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6528,
        iy: 0xa0d5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf7);
    poke(0x0003, 0x26);
    poke(0x651f, 0x89);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2005,
        bc: 0xff37,
        de: 0xe41f,
        hl: 0x70e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6528,
        iy: 0xa0d5,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(25887), equals(0x12));
  });

  // Test instruction ddcb27 | SLA (IX+*), A
  test(
      "UNDOCUMENTED "
      "ddcb27 | SLA (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa806,
        bc: 0x5669,
        de: 0x1bee,
        hl: 0xf62c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1f69,
        iy: 0x3418,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc3);
    poke(0x0003, 0x27);
    poke(0x1f2c, 0xac);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5809,
        bc: 0x5669,
        de: 0x1bee,
        hl: 0xf62c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1f69,
        iy: 0x3418,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(7980), equals(0x58));
  }, tags: 'undocumented');

  // Test instruction ddcb28 | SRA (IX+*), B
  test(
      "UNDOCUMENTED "
      "ddcb28 | SRA (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7afd,
        bc: 0x64b8,
        de: 0x51f7,
        hl: 0x7164,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x999b,
        iy: 0x8857,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb6);
    poke(0x0003, 0x28);
    poke(0x9951, 0x24);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7a04,
        bc: 0x12b8,
        de: 0x51f7,
        hl: 0x7164,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x999b,
        iy: 0x8857,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(39249), equals(0x12));
  }, tags: 'undocumented');

  // Test instruction ddcb29 | SRA (IX+*), C
  test(
      "UNDOCUMENTED "
      "ddcb29 | SRA (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0404,
        bc: 0xb794,
        de: 0x323f,
        hl: 0xfd34,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x20e7,
        iy: 0xc753,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9c);
    poke(0x0003, 0x29);
    poke(0x2083, 0x82);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0480,
        bc: 0xb7c1,
        de: 0x323f,
        hl: 0xfd34,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x20e7,
        iy: 0xc753,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(8323), equals(0xc1));
  }, tags: 'undocumented');

  // Test instruction ddcb2a | SRA (IX+*), D
  test(
      "UNDOCUMENTED "
      "ddcb2a | SRA (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4524,
        bc: 0xafde,
        de: 0x0c08,
        hl: 0x75d7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9505,
        iy: 0xb624,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd8);
    poke(0x0003, 0x2a);
    poke(0x94dd, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4528,
        bc: 0xafde,
        de: 0x3e08,
        hl: 0x75d7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9505,
        iy: 0xb624,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(38109), equals(0x3e));
  }, tags: 'undocumented');

  // Test instruction ddcb2b | SRA (IX+*), E
  test(
      "UNDOCUMENTED "
      "ddcb2b | SRA (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8324,
        bc: 0xe290,
        de: 0x26be,
        hl: 0x7ddd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb484,
        iy: 0x571c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbd);
    poke(0x0003, 0x2b);
    poke(0xb441, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8324,
        bc: 0xe290,
        de: 0x2622,
        hl: 0x7ddd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb484,
        iy: 0x571c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(46145), equals(0x22));
  }, tags: 'undocumented');

  // Test instruction ddcb2c | SRA (IX+*), H
  test(
      "UNDOCUMENTED "
      "ddcb2c | SRA (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc688,
        bc: 0x0c94,
        de: 0x6e4b,
        hl: 0x7dc7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe28,
        iy: 0xdc80,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2c);
    poke(0x0003, 0x2c);
    poke(0xfe54, 0x81);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc685,
        bc: 0x0c94,
        de: 0x6e4b,
        hl: 0xc0c7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe28,
        iy: 0xdc80,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(65108), equals(0xc0));
  }, tags: 'undocumented');

  // Test instruction ddcb2d | SRA (IX+*), L
  test(
      "UNDOCUMENTED "
      "ddcb2d | SRA (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xce28,
        bc: 0xd2ae,
        de: 0xc9be,
        hl: 0x4236,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb4ed,
        iy: 0x6de3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9b);
    poke(0x0003, 0x2d);
    poke(0xb488, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xce24,
        bc: 0xd2ae,
        de: 0xc9be,
        hl: 0x4222,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb4ed,
        iy: 0x6de3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(46216), equals(0x22));
  }, tags: 'undocumented');

  // Test instruction ddcb2e | SRA (IX+*)
  test(
      "OPCODE "
      "ddcb2e | SRA (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x50b0,
        bc: 0xde74,
        de: 0xeca8,
        hl: 0x83ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x69d8,
        iy: 0x75c7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3d);
    poke(0x0003, 0x2e);
    poke(0x6a15, 0x05);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5001,
        bc: 0xde74,
        de: 0xeca8,
        hl: 0x83ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x69d8,
        iy: 0x75c7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(27157), equals(0x02));
  });

  // Test instruction ddcb2f | SRA (IX+*), A
  test(
      "UNDOCUMENTED "
      "ddcb2f | SRA (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaec6,
        bc: 0x759b,
        de: 0x3059,
        hl: 0x01b9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7a30,
        iy: 0xdd56,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd3);
    poke(0x0003, 0x2f);
    poke(0x7a03, 0xf2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf9ac,
        bc: 0x759b,
        de: 0x3059,
        hl: 0x01b9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7a30,
        iy: 0xdd56,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(31235), equals(0xf9));
  }, tags: 'undocumented');

  // Test instruction ddcb30 | SLL (IX+*), B
  test(
      "UNDOCUMENTED "
      "ddcb30 | SLL (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3c89,
        bc: 0x96ad,
        de: 0x9cc7,
        hl: 0xa68c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeee8,
        iy: 0x5a80,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xdf);
    poke(0x0003, 0x30);
    poke(0xeec7, 0x32);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c24,
        bc: 0x65ad,
        de: 0x9cc7,
        hl: 0xa68c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeee8,
        iy: 0x5a80,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61127), equals(0x65));
  }, tags: 'undocumented');

  // Test instruction ddcb31 | SLL (IX+*), C
  test(
      "UNDOCUMENTED "
      "ddcb31 | SLL (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xebf5,
        bc: 0x41e9,
        de: 0x929b,
        hl: 0x7d47,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf22d,
        iy: 0x8943,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x49);
    poke(0x0003, 0x31);
    poke(0xf276, 0xcd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xeb89,
        bc: 0x419b,
        de: 0x929b,
        hl: 0x7d47,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf22d,
        iy: 0x8943,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(62070), equals(0x9b));
  }, tags: 'undocumented');

  // Test instruction ddcb32 | SLL (IX+*), D
  test(
      "UNDOCUMENTED "
      "ddcb32 | SLL (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9a1b,
        bc: 0xaa64,
        de: 0x4209,
        hl: 0x01ad,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x579f,
        iy: 0xec4c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe0);
    poke(0x0003, 0x32);
    poke(0x577f, 0xe2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9a85,
        bc: 0xaa64,
        de: 0xc509,
        hl: 0x01ad,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x579f,
        iy: 0xec4c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22399), equals(0xc5));
  }, tags: 'undocumented');

  // Test instruction ddcb33 | SLL (IX+*), E
  test(
      "UNDOCUMENTED "
      "ddcb33 | SLL (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb8b1,
        bc: 0xb854,
        de: 0x524f,
        hl: 0x9599,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xefac,
        iy: 0xd9ec,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc9);
    poke(0x0003, 0x33);
    poke(0xef75, 0x0b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb804,
        bc: 0xb854,
        de: 0x5217,
        hl: 0x9599,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xefac,
        iy: 0xd9ec,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61301), equals(0x17));
  }, tags: 'undocumented');

  // Test instruction ddcb34 | SLL (IX+*), H
  test(
      "UNDOCUMENTED "
      "ddcb34 | SLL (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcd3c,
        bc: 0x4432,
        de: 0x20d4,
        hl: 0x0b3e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xab48,
        iy: 0xc95f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x49);
    poke(0x0003, 0x34);
    poke(0xab91, 0xef);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcd89,
        bc: 0x4432,
        de: 0x20d4,
        hl: 0xdf3e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xab48,
        iy: 0xc95f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(43921), equals(0xdf));
  }, tags: 'undocumented');

  // Test instruction ddcb35 | SLL (IX+*), L
  test(
      "UNDOCUMENTED "
      "ddcb35 | SLL (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdeb1,
        bc: 0xc6fc,
        de: 0x696d,
        hl: 0x150d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeb1a,
        iy: 0x4a12,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb9);
    poke(0x0003, 0x35);
    poke(0xead3, 0x8f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xde09,
        bc: 0xc6fc,
        de: 0x696d,
        hl: 0x151f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeb1a,
        iy: 0x4a12,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(60115), equals(0x1f));
  }, tags: 'undocumented');

  // Test instruction ddcb36 | SLL (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb36 | SLL (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3d81,
        bc: 0x443b,
        de: 0xff21,
        hl: 0x63e3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x132e,
        iy: 0xfb39,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb4);
    poke(0x0003, 0x36);
    poke(0x12e2, 0x02);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3d04,
        bc: 0x443b,
        de: 0xff21,
        hl: 0x63e3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x132e,
        iy: 0xfb39,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(4834), equals(0x05));
  }, tags: 'undocumented');

  // Test instruction ddcb37 | SLL (IX+*), A
  test(
      "UNDOCUMENTED "
      "ddcb37 | SLL (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x72d9,
        bc: 0xbfc9,
        de: 0xa69a,
        hl: 0xec0b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5077,
        iy: 0x4e3e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc6);
    poke(0x0003, 0x37);
    poke(0x503d, 0x3d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7b2c,
        bc: 0xbfc9,
        de: 0xa69a,
        hl: 0xec0b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5077,
        iy: 0x4e3e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(20541), equals(0x7b));
  }, tags: 'undocumented');

  // Test instruction ddcb38 | SRL (IX+*), B
  test(
      "UNDOCUMENTED "
      "ddcb38 | SRL (IX+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3c64,
        bc: 0xb1ee,
        de: 0x38e1,
        hl: 0xae9f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf695,
        iy: 0x44b3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8e);
    poke(0x0003, 0x38);
    poke(0xf623, 0x5e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c28,
        bc: 0x2fee,
        de: 0x38e1,
        hl: 0xae9f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf695,
        iy: 0x44b3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(63011), equals(0x2f));
  }, tags: 'undocumented');

  // Test instruction ddcb39 | SRL (IX+*), C
  test(
      "UNDOCUMENTED "
      "ddcb39 | SRL (IX+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x05d6,
        bc: 0x9aad,
        de: 0xa2db,
        hl: 0xdf75,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa895,
        iy: 0xe243,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xdc);
    poke(0x0003, 0x39);
    poke(0xa871, 0x83);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0505,
        bc: 0x9a41,
        de: 0xa2db,
        hl: 0xdf75,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa895,
        iy: 0xe243,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(43121), equals(0x41));
  }, tags: 'undocumented');

  // Test instruction ddcb3a | SRL (IX+*), D
  test(
      "UNDOCUMENTED "
      "ddcb3a | SRL (IX+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0e22,
        bc: 0x0b9f,
        de: 0x873b,
        hl: 0xc01d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2591,
        iy: 0x49c3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0d);
    poke(0x0003, 0x3a);
    poke(0x259e, 0x89);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0e05,
        bc: 0x0b9f,
        de: 0x443b,
        hl: 0xc01d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2591,
        iy: 0x49c3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(9630), equals(0x44));
  }, tags: 'undocumented');

  // Test instruction ddcb3b | SRL (IX+*), E
  test(
      "UNDOCUMENTED "
      "ddcb3b | SRL (IX+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1bd9,
        bc: 0xc795,
        de: 0xd8ae,
        hl: 0x7ccf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6fed,
        iy: 0x09dc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x20);
    poke(0x0003, 0x3b);
    poke(0x700d, 0xa9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1b01,
        bc: 0xc795,
        de: 0xd854,
        hl: 0x7ccf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6fed,
        iy: 0x09dc,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(28685), equals(0x54));
  }, tags: 'undocumented');

  // Test instruction ddcb3c | SRL (IX+*), H
  test(
      "UNDOCUMENTED "
      "ddcb3c | SRL (IX+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb651,
        bc: 0xbdf7,
        de: 0xfca3,
        hl: 0x7529,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf53b,
        iy: 0x018b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe1);
    poke(0x0003, 0x3c);
    poke(0xf51c, 0xd0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb628,
        bc: 0xbdf7,
        de: 0xfca3,
        hl: 0x6829,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf53b,
        iy: 0x018b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(62748), equals(0x68));
  }, tags: 'undocumented');

  // Test instruction ddcb3d | SRL (IX+*), L
  test(
      "UNDOCUMENTED "
      "ddcb3d | SRL (IX+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2a2d,
        bc: 0x6e6e,
        de: 0xcfbd,
        hl: 0x1db5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0320,
        iy: 0x6ab0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbe);
    poke(0x0003, 0x3d);
    poke(0x02de, 0x58);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2a28,
        bc: 0x6e6e,
        de: 0xcfbd,
        hl: 0x1d2c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0320,
        iy: 0x6ab0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(734), equals(0x2c));
  }, tags: 'undocumented');

  // Test instruction ddcb3e | SRL (IX+*)
  test(
      "OPCODE "
      "ddcb3e | SRL (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x39b8,
        bc: 0xb26e,
        de: 0xb670,
        hl: 0xb8a2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x784a,
        iy: 0x7840,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0a);
    poke(0x0003, 0x3e);
    poke(0x7854, 0x5d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x392d,
        bc: 0xb26e,
        de: 0xb670,
        hl: 0xb8a2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x784a,
        iy: 0x7840,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(30804), equals(0x2e));
  });

  // Test instruction ddcb3f | SRL (IX+*), A
  test(
      "UNDOCUMENTED "
      "ddcb3f | SRL (IX+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2a17,
        bc: 0x429d,
        de: 0xd8c0,
        hl: 0xe069,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3488,
        iy: 0x7150,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x31);
    poke(0x0003, 0x3f);
    poke(0x34b9, 0x04);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0200,
        bc: 0x429d,
        de: 0xd8c0,
        hl: 0xe069,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3488,
        iy: 0x7150,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(13497), equals(0x02));
  }, tags: 'undocumented');

  // Test instruction ddcb40 | BIT 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb40 | BIT 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x119b,
        bc: 0xf6ba,
        de: 0x079e,
        hl: 0x0e41,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8c01,
        iy: 0xcd21,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbd);
    poke(0x0003, 0x40);
    poke(0x8bbe, 0xe7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1119,
        bc: 0xf6ba,
        de: 0x079e,
        hl: 0x0e41,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8c01,
        iy: 0xcd21,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb41 | BIT 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb41 | BIT 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x22b3,
        bc: 0xc4b0,
        de: 0x575b,
        hl: 0x66b4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcdcf,
        iy: 0xa25c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x52);
    poke(0x0003, 0x41);
    poke(0xce21, 0x75);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2219,
        bc: 0xc4b0,
        de: 0x575b,
        hl: 0x66b4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcdcf,
        iy: 0xa25c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb42 | BIT 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb42 | BIT 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaf5e,
        bc: 0x7720,
        de: 0xaa95,
        hl: 0x3b0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf03a,
        iy: 0x856a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x1e);
    poke(0x0003, 0x42);
    poke(0xf058, 0x90);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaf74,
        bc: 0x7720,
        de: 0xaa95,
        hl: 0x3b0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf03a,
        iy: 0x856a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb43 | BIT 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb43 | BIT 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7fa6,
        bc: 0xb699,
        de: 0x5e71,
        hl: 0x1827,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe8b6,
        iy: 0x96a8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbc);
    poke(0x0003, 0x43);
    poke(0xe872, 0x6b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7f38,
        bc: 0xb699,
        de: 0x5e71,
        hl: 0x1827,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe8b6,
        iy: 0x96a8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb44 | BIT 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb44 | BIT 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5faa,
        bc: 0xde05,
        de: 0x12fd,
        hl: 0xf73b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xee0a,
        iy: 0x6634,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe8);
    poke(0x0003, 0x44);
    poke(0xedf2, 0x62);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5f7c,
        bc: 0xde05,
        de: 0x12fd,
        hl: 0xf73b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xee0a,
        iy: 0x6634,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb45 | BIT 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb45 | BIT 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xeac7,
        bc: 0x699c,
        de: 0x47d3,
        hl: 0x89c3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa2be,
        iy: 0xd81e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x02);
    poke(0x0003, 0x45);
    poke(0xa2c0, 0x55);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xea31,
        bc: 0x699c,
        de: 0x47d3,
        hl: 0x89c3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa2be,
        iy: 0xd81e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb46 | BIT 0, (IX+*)
  test(
      "OPCODE "
      "ddcb46 | BIT 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x60de,
        bc: 0xac1d,
        de: 0x4173,
        hl: 0xf92a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa39f,
        iy: 0x12e5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe2);
    poke(0x0003, 0x46);
    poke(0xa381, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6030,
        bc: 0xac1d,
        de: 0x4173,
        hl: 0xf92a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa39f,
        iy: 0x12e5,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ddcb47 | BIT 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb47 | BIT 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1b1a,
        bc: 0xf7c0,
        de: 0x22f6,
        hl: 0x5253,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5227,
        iy: 0x919d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7a);
    poke(0x0003, 0x47);
    poke(0x52a1, 0x6a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1b54,
        bc: 0xf7c0,
        de: 0x22f6,
        hl: 0x5253,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5227,
        iy: 0x919d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb48 | BIT 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb48 | BIT 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x721a,
        bc: 0x4509,
        de: 0xd68f,
        hl: 0x3b3d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2746,
        iy: 0x7f97,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x13);
    poke(0x0003, 0x48);
    poke(0x2759, 0xa8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7274,
        bc: 0x4509,
        de: 0xd68f,
        hl: 0x3b3d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2746,
        iy: 0x7f97,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb49 | BIT 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb49 | BIT 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7fe9,
        bc: 0xda22,
        de: 0xea9c,
        hl: 0xf480,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x41c6,
        iy: 0x75a9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x94);
    poke(0x0003, 0x49);
    poke(0x415a, 0x26);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7f11,
        bc: 0xda22,
        de: 0xea9c,
        hl: 0xf480,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x41c6,
        iy: 0x75a9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb4a | BIT 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb4a | BIT 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf16d,
        bc: 0xe6c3,
        de: 0x5a42,
        hl: 0x8b21,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbfeb,
        iy: 0xe383,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3b);
    poke(0x0003, 0x4a);
    poke(0xc026, 0xb5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf155,
        bc: 0xe6c3,
        de: 0x5a42,
        hl: 0x8b21,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbfeb,
        iy: 0xe383,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb4b | BIT 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb4b | BIT 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1050,
        bc: 0x880a,
        de: 0x52b2,
        hl: 0xfb1b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc239,
        iy: 0x6b40,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb0);
    poke(0x0003, 0x4b);
    poke(0xc1e9, 0x18);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1054,
        bc: 0x880a,
        de: 0x52b2,
        hl: 0xfb1b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc239,
        iy: 0x6b40,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb4c | BIT 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb4c | BIT 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0538,
        bc: 0xbc63,
        de: 0xf081,
        hl: 0x0a55,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x874c,
        iy: 0x80a3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x97);
    poke(0x0003, 0x4c);
    poke(0x86e3, 0x63);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0510,
        bc: 0xbc63,
        de: 0xf081,
        hl: 0x0a55,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x874c,
        iy: 0x80a3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb4d | BIT 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb4d | BIT 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7f8c,
        bc: 0x32b4,
        de: 0x03d5,
        hl: 0xef66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7d2a,
        iy: 0x03bc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x15);
    poke(0x0003, 0x4d);
    poke(0x7d3f, 0x60);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7f7c,
        bc: 0x32b4,
        de: 0x03d5,
        hl: 0xef66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7d2a,
        iy: 0x03bc,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb4e | BIT 1, (IX+*)
  test(
      "OPCODE "
      "ddcb4e | BIT 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7c67,
        bc: 0xfa92,
        de: 0xb4d0,
        hl: 0x9f23,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeade,
        iy: 0x1785,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb0);
    poke(0x0003, 0x4e);
    poke(0xea8e, 0x3b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7c39,
        bc: 0xfa92,
        de: 0xb4d0,
        hl: 0x9f23,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeade,
        iy: 0x1785,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ddcb4f | BIT 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb4f | BIT 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x725c,
        bc: 0x257b,
        de: 0xdb73,
        hl: 0x2478,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x88c0,
        iy: 0xf151,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8b);
    poke(0x0003, 0x4f);
    poke(0x884b, 0x4c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x725c,
        bc: 0x257b,
        de: 0xdb73,
        hl: 0x2478,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x88c0,
        iy: 0xf151,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb50 | BIT 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb50 | BIT 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x35f4,
        bc: 0x8e51,
        de: 0x406c,
        hl: 0x2e3c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdaf2,
        iy: 0x413c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x12);
    poke(0x0003, 0x50);
    poke(0xdb04, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x355c,
        bc: 0x8e51,
        de: 0x406c,
        hl: 0x2e3c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdaf2,
        iy: 0x413c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb51 | BIT 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb51 | BIT 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa630,
        bc: 0xba85,
        de: 0xc88c,
        hl: 0xe86c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x84b2,
        iy: 0xcd8e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x18);
    poke(0x0003, 0x51);
    poke(0x84ca, 0x1c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa610,
        bc: 0xba85,
        de: 0xc88c,
        hl: 0xe86c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x84b2,
        iy: 0xcd8e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb52 | BIT 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb52 | BIT 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcb88,
        bc: 0x1220,
        de: 0x1103,
        hl: 0xa868,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6156,
        iy: 0xcfac,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x42);
    poke(0x0003, 0x52);
    poke(0x6198, 0x53);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcb74,
        bc: 0x1220,
        de: 0x1103,
        hl: 0xa868,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6156,
        iy: 0xcfac,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb53 | BIT 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb53 | BIT 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5eb3,
        bc: 0x569e,
        de: 0xf76d,
        hl: 0x88c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae45,
        iy: 0x623e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe3);
    poke(0x0003, 0x53);
    poke(0xae28, 0xd6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5e39,
        bc: 0x569e,
        de: 0xf76d,
        hl: 0x88c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae45,
        iy: 0x623e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb54 | BIT 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb54 | BIT 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc3c9,
        bc: 0x76fe,
        de: 0xf1ff,
        hl: 0x416e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xefd5,
        iy: 0x7576,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7d);
    poke(0x0003, 0x54);
    poke(0xf052, 0x5d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc331,
        bc: 0x76fe,
        de: 0xf1ff,
        hl: 0x416e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xefd5,
        iy: 0x7576,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb55 | BIT 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb55 | BIT 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7068,
        bc: 0xdcd0,
        de: 0x8345,
        hl: 0xd498,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf352,
        iy: 0xa88b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x88);
    poke(0x0003, 0x55);
    poke(0xf2da, 0x03);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7074,
        bc: 0xdcd0,
        de: 0x8345,
        hl: 0xd498,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf352,
        iy: 0xa88b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb56 | BIT 2, (IX+*)
  test(
      "OPCODE "
      "ddcb56 | BIT 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9128,
        bc: 0x2cb8,
        de: 0x571c,
        hl: 0xf4fd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6d30,
        iy: 0xaec2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x57);
    poke(0x0003, 0x56);
    poke(0x6d87, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x917c,
        bc: 0x2cb8,
        de: 0x571c,
        hl: 0xf4fd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6d30,
        iy: 0xaec2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ddcb57 | BIT 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb57 | BIT 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3ca7,
        bc: 0x541a,
        de: 0x027c,
        hl: 0xc0b4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5833,
        iy: 0x160a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x06);
    poke(0x0003, 0x57);
    poke(0x5839, 0x1d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c19,
        bc: 0x541a,
        de: 0x027c,
        hl: 0xc0b4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5833,
        iy: 0x160a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb58 | BIT 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb58 | BIT 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc650,
        bc: 0xe1a8,
        de: 0x9d6c,
        hl: 0xbec3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6a46,
        iy: 0xb66c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x83);
    poke(0x0003, 0x58);
    poke(0x69c9, 0x0f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc638,
        bc: 0xe1a8,
        de: 0x9d6c,
        hl: 0xbec3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6a46,
        iy: 0xb66c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb59 | BIT 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb59 | BIT 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xad07,
        bc: 0x9bda,
        de: 0xb7ee,
        hl: 0x63c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9195,
        iy: 0x9703,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xdb);
    poke(0x0003, 0x59);
    poke(0x9170, 0x10);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xad55,
        bc: 0x9bda,
        de: 0xb7ee,
        hl: 0x63c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9195,
        iy: 0x9703,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb5a | BIT 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb5a | BIT 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x80c0,
        bc: 0x5105,
        de: 0x36b0,
        hl: 0xa37c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0de0,
        iy: 0xce7f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd1);
    poke(0x0003, 0x5a);
    poke(0x0db1, 0xbe);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8018,
        bc: 0x5105,
        de: 0x36b0,
        hl: 0xa37c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0de0,
        iy: 0xce7f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb5b | BIT 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb5b | BIT 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2a8d,
        bc: 0x083d,
        de: 0x1409,
        hl: 0x06ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x62ad,
        iy: 0xbaff,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd5);
    poke(0x0003, 0x5b);
    poke(0x6282, 0x67);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2a75,
        bc: 0x083d,
        de: 0x1409,
        hl: 0x06ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x62ad,
        iy: 0xbaff,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb5c | BIT 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb5c | BIT 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4ca4,
        bc: 0xe502,
        de: 0xd23c,
        hl: 0x6da8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9dc6,
        iy: 0x6f04,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x5c);
    poke(0x0003, 0x5c);
    poke(0x9e22, 0xc9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4c18,
        bc: 0xe502,
        de: 0xd23c,
        hl: 0x6da8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9dc6,
        iy: 0x6f04,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb5d | BIT 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb5d | BIT 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7e39,
        bc: 0x511b,
        de: 0x3cfa,
        hl: 0x60d3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd193,
        iy: 0x3fe9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xff);
    poke(0x0003, 0x5d);
    poke(0xd192, 0x0d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7e11,
        bc: 0x511b,
        de: 0x3cfa,
        hl: 0x60d3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd193,
        iy: 0x3fe9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb5e | BIT 3, (IX+*)
  test(
      "OPCODE "
      "ddcb5e | BIT 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcef1,
        bc: 0x0235,
        de: 0xe2b1,
        hl: 0x7a4c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xed14,
        iy: 0xd0d6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x62);
    poke(0x0003, 0x5e);
    poke(0xed76, 0xa7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xce7d,
        bc: 0x0235,
        de: 0xe2b1,
        hl: 0x7a4c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xed14,
        iy: 0xd0d6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ddcb5f | BIT 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb5f | BIT 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x094f,
        bc: 0x20a8,
        de: 0x52e1,
        hl: 0xd783,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdf46,
        iy: 0xda41,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3f);
    poke(0x0003, 0x5f);
    poke(0xdf85, 0x9e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0919,
        bc: 0x20a8,
        de: 0x52e1,
        hl: 0xd783,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdf46,
        iy: 0xda41,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb60 | BIT 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb60 | BIT 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x42ce,
        bc: 0x0713,
        de: 0xdc90,
        hl: 0x2c89,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x32a2,
        iy: 0xc4d4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x65);
    poke(0x0003, 0x60);
    poke(0x3307, 0x2e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4274,
        bc: 0x0713,
        de: 0xdc90,
        hl: 0x2c89,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x32a2,
        iy: 0xc4d4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb61 | BIT 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb61 | BIT 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1b36,
        bc: 0x1403,
        de: 0x8b9b,
        hl: 0xc221,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x36cb,
        iy: 0x93d4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa8);
    poke(0x0003, 0x61);
    poke(0x3673, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1b30,
        bc: 0x1403,
        de: 0x8b9b,
        hl: 0xc221,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x36cb,
        iy: 0x93d4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb62 | BIT 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb62 | BIT 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x361b,
        bc: 0x4055,
        de: 0x650a,
        hl: 0x3f98,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0acc,
        iy: 0xa102,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd9);
    poke(0x0003, 0x62);
    poke(0x0aa5, 0xea);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x365d,
        bc: 0x4055,
        de: 0x650a,
        hl: 0x3f98,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0acc,
        iy: 0xa102,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb63 | BIT 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb63 | BIT 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6548,
        bc: 0x08df,
        de: 0x3ceb,
        hl: 0x6d24,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe679,
        iy: 0xf98e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x79);
    poke(0x0003, 0x63);
    poke(0xe6f2, 0x83);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6574,
        bc: 0x08df,
        de: 0x3ceb,
        hl: 0x6d24,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe679,
        iy: 0xf98e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb64 | BIT 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb64 | BIT 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3c22,
        bc: 0xe2a7,
        de: 0x6da9,
        hl: 0xc346,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xecfb,
        iy: 0x85b6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x71);
    poke(0x0003, 0x64);
    poke(0xed6c, 0x52);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c38,
        bc: 0xe2a7,
        de: 0x6da9,
        hl: 0xc346,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xecfb,
        iy: 0x85b6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb65 | BIT 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb65 | BIT 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x09bd,
        bc: 0x0abb,
        de: 0x3afa,
        hl: 0x91f5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7779,
        iy: 0xaef5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x67);
    poke(0x0003, 0x65);
    poke(0x77e0, 0xf5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0931,
        bc: 0x0abb,
        de: 0x3afa,
        hl: 0x91f5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7779,
        iy: 0xaef5,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb66 | BIT 4, (IX+*)
  test(
      "OPCODE "
      "ddcb66 | BIT 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xccbc,
        bc: 0xd301,
        de: 0x9b66,
        hl: 0x40fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xee15,
        iy: 0x0d23,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x63);
    poke(0x0003, 0x66);
    poke(0xee78, 0x70);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcc38,
        bc: 0xd301,
        de: 0x9b66,
        hl: 0x40fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xee15,
        iy: 0x0d23,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ddcb67 | BIT 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb67 | BIT 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xeccb,
        bc: 0x342f,
        de: 0xbe3e,
        hl: 0xa79b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeea1,
        iy: 0xdfae,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd7);
    poke(0x0003, 0x67);
    poke(0xee78, 0x06);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xec7d,
        bc: 0x342f,
        de: 0xbe3e,
        hl: 0xa79b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeea1,
        iy: 0xdfae,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb68 | BIT 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb68 | BIT 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8e51,
        bc: 0x0063,
        de: 0x49ad,
        hl: 0xb7d4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe968,
        iy: 0x864e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb1);
    poke(0x0003, 0x68);
    poke(0xe919, 0x20);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8e39,
        bc: 0x0063,
        de: 0x49ad,
        hl: 0xb7d4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe968,
        iy: 0x864e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb69 | BIT 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb69 | BIT 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9f11,
        bc: 0x42b5,
        de: 0x74fe,
        hl: 0x1116,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x33f4,
        iy: 0x46c2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe8);
    poke(0x0003, 0x69);
    poke(0x33dc, 0x4f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9f75,
        bc: 0x42b5,
        de: 0x74fe,
        hl: 0x1116,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x33f4,
        iy: 0x46c2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb6a | BIT 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb6a | BIT 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4632,
        bc: 0x0bd8,
        de: 0x0018,
        hl: 0x1ac3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x86b6,
        iy: 0x1dd2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x33);
    poke(0x0003, 0x6a);
    poke(0x86e9, 0x1c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4654,
        bc: 0x0bd8,
        de: 0x0018,
        hl: 0x1ac3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x86b6,
        iy: 0x1dd2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb6b | BIT 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb6b | BIT 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7a76,
        bc: 0xf79f,
        de: 0xa78e,
        hl: 0xf867,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x187b,
        iy: 0x0023,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x11);
    poke(0x0003, 0x6b);
    poke(0x188c, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7a18,
        bc: 0xf79f,
        de: 0xa78e,
        hl: 0xf867,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x187b,
        iy: 0x0023,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb6c | BIT 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb6c | BIT 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdd91,
        bc: 0x1f1e,
        de: 0xc1e1,
        hl: 0x0ea7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3e21,
        iy: 0xf544,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x5e);
    poke(0x0003, 0x6c);
    poke(0x3e7f, 0x2a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdd39,
        bc: 0x1f1e,
        de: 0xc1e1,
        hl: 0x0ea7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3e21,
        iy: 0xf544,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb6d | BIT 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb6d | BIT 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdebf,
        bc: 0x9ae4,
        de: 0xfd24,
        hl: 0xb3c2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe314,
        iy: 0xad84,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xdd);
    poke(0x0003, 0x6d);
    poke(0xe2f1, 0x41);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xde75,
        bc: 0x9ae4,
        de: 0xfd24,
        hl: 0xb3c2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe314,
        iy: 0xad84,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb6e | BIT 5, (IX+*)
  test(
      "OPCODE "
      "ddcb6e | BIT 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xca75,
        bc: 0x9f16,
        de: 0xc700,
        hl: 0x1dce,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3086,
        iy: 0xd68e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb2);
    poke(0x0003, 0x6e);
    poke(0x3038, 0x3f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xca31,
        bc: 0x9f16,
        de: 0xc700,
        hl: 0x1dce,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3086,
        iy: 0xd68e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ddcb6f | BIT 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb6f | BIT 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd4cd,
        bc: 0x0b39,
        de: 0x3e2e,
        hl: 0xc06e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfc1b,
        iy: 0xd592,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbe);
    poke(0x0003, 0x6f);
    poke(0xfbd9, 0x56);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd47d,
        bc: 0x0b39,
        de: 0x3e2e,
        hl: 0xc06e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfc1b,
        iy: 0xd592,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb70 | BIT 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb70 | BIT 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf901,
        bc: 0x09b8,
        de: 0x43f8,
        hl: 0x2a76,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x042c,
        iy: 0x7f2d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb5);
    poke(0x0003, 0x70);
    poke(0x03e1, 0x74);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf911,
        bc: 0x09b8,
        de: 0x43f8,
        hl: 0x2a76,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x042c,
        iy: 0x7f2d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb71 | BIT 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb71 | BIT 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xac78,
        bc: 0x36ad,
        de: 0x34cb,
        hl: 0xf950,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1b33,
        iy: 0xaa23,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf7);
    poke(0x0003, 0x71);
    poke(0x1b2a, 0x08);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xac5c,
        bc: 0x36ad,
        de: 0x34cb,
        hl: 0xf950,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1b33,
        iy: 0xaa23,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb72 | BIT 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb72 | BIT 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb1b3,
        bc: 0xf1e4,
        de: 0x9984,
        hl: 0xc7fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xce25,
        iy: 0xc5b6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x22);
    poke(0x0003, 0x72);
    poke(0xce47, 0x08);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb15d,
        bc: 0xf1e4,
        de: 0x9984,
        hl: 0xc7fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xce25,
        iy: 0xc5b6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb73 | BIT 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb73 | BIT 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x21ba,
        bc: 0x592d,
        de: 0xf406,
        hl: 0xe21f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6442,
        iy: 0xcf58,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x12);
    poke(0x0003, 0x73);
    poke(0x6454, 0x3c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2174,
        bc: 0x592d,
        de: 0xf406,
        hl: 0xe21f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6442,
        iy: 0xcf58,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb74 | BIT 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb74 | BIT 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6642,
        bc: 0x64c1,
        de: 0xdbe5,
        hl: 0xeb48,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7dc1,
        iy: 0xc1fb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x08);
    poke(0x0003, 0x74);
    poke(0x7dc9, 0xbe);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x667c,
        bc: 0x64c1,
        de: 0xdbe5,
        hl: 0xeb48,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7dc1,
        iy: 0xc1fb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb75 | BIT 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb75 | BIT 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8778,
        bc: 0x580e,
        de: 0x00dd,
        hl: 0xf4c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x60ad,
        iy: 0x9b60,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x5b);
    poke(0x0003, 0x75);
    poke(0x6108, 0xcf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8730,
        bc: 0x580e,
        de: 0x00dd,
        hl: 0xf4c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x60ad,
        iy: 0x9b60,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb76 | BIT 6, (IX+*)
  test(
      "OPCODE "
      "ddcb76 | BIT 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x65b8,
        bc: 0x5cc2,
        de: 0x3058,
        hl: 0xe258,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7e8a,
        iy: 0xb296,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x73);
    poke(0x0003, 0x76);
    poke(0x7efd, 0x1e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x657c,
        bc: 0x5cc2,
        de: 0x3058,
        hl: 0xe258,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7e8a,
        iy: 0xb296,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ddcb77 | BIT 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb77 | BIT 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe3a8,
        bc: 0x47a0,
        de: 0xc510,
        hl: 0xcf0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0537,
        iy: 0xb242,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7f);
    poke(0x0003, 0x77);
    poke(0x05b6, 0x97);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe354,
        bc: 0x47a0,
        de: 0xc510,
        hl: 0xcf0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0537,
        iy: 0xb242,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb78 | BIT 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb78 | BIT 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x424f,
        bc: 0x24f6,
        de: 0x1632,
        hl: 0x8a4f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9397,
        iy: 0x846c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x70);
    poke(0x0003, 0x78);
    poke(0x9407, 0x76);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4255,
        bc: 0x24f6,
        de: 0x1632,
        hl: 0x8a4f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9397,
        iy: 0x846c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb79 | BIT 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb79 | BIT 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe6a0,
        bc: 0xeeaa,
        de: 0x41f7,
        hl: 0x5da2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x41de,
        iy: 0x4189,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc3);
    poke(0x0003, 0x79);
    poke(0x41a1, 0xb8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe690,
        bc: 0xeeaa,
        de: 0x41f7,
        hl: 0x5da2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x41de,
        iy: 0x4189,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb7a | BIT 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb7a | BIT 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcabf,
        bc: 0x56aa,
        de: 0x6a06,
        hl: 0x6cd7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0aa9,
        iy: 0x9812,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3f);
    poke(0x0003, 0x7a);
    poke(0x0ae8, 0xeb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xca99,
        bc: 0x56aa,
        de: 0x6a06,
        hl: 0x6cd7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0aa9,
        iy: 0x9812,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb7b | BIT 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb7b | BIT 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xae3f,
        bc: 0x0227,
        de: 0x721f,
        hl: 0x52a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5040,
        iy: 0xb98a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x88);
    poke(0x0003, 0x7b);
    poke(0x4fc8, 0x22);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xae5d,
        bc: 0x0227,
        de: 0x721f,
        hl: 0x52a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5040,
        iy: 0xb98a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb7c | BIT 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb7c | BIT 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8a80,
        bc: 0xa2f1,
        de: 0x239a,
        hl: 0xd5cc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6883,
        iy: 0xb050,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9e);
    poke(0x0003, 0x7c);
    poke(0x6821, 0x3a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8a7c,
        bc: 0xa2f1,
        de: 0x239a,
        hl: 0xd5cc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6883,
        iy: 0xb050,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb7d | BIT 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb7d | BIT 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc37f,
        bc: 0xcf33,
        de: 0x1010,
        hl: 0x98e6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb021,
        iy: 0x0356,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x29);
    poke(0x0003, 0x7d);
    poke(0xb04a, 0x2c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc375,
        bc: 0xcf33,
        de: 0x1010,
        hl: 0x98e6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb021,
        iy: 0x0356,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb7e | BIT 7, (IX+*)
  test(
      "OPCODE "
      "ddcb7e | BIT 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9a25,
        bc: 0x2f6e,
        de: 0x0d0d,
        hl: 0xa83f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcef0,
        iy: 0x8c15,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4f);
    poke(0x0003, 0x7e);
    poke(0xcf3f, 0xf2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9a99,
        bc: 0x2f6e,
        de: 0x0d0d,
        hl: 0xa83f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcef0,
        iy: 0x8c15,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ddcb7f | BIT 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb7f | BIT 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x53b9,
        bc: 0x1f4e,
        de: 0x4837,
        hl: 0x21b6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5ec2,
        iy: 0x80c3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x75);
    poke(0x0003, 0x7f);
    poke(0x5f37, 0xa2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5399,
        bc: 0x1f4e,
        de: 0x4837,
        hl: 0x21b6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5ec2,
        iy: 0x80c3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction ddcb80 | RES 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb80 | RES 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6319,
        bc: 0xbaf9,
        de: 0xc84b,
        hl: 0xbcf2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xacc5,
        iy: 0xa4ed,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x70);
    poke(0x0003, 0x80);
    poke(0xad35, 0x30);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6319,
        bc: 0x30f9,
        de: 0xc84b,
        hl: 0xbcf2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xacc5,
        iy: 0xa4ed,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb81 | RES 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb81 | RES 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfae1,
        bc: 0x5ae5,
        de: 0x9502,
        hl: 0xdc9b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbdd3,
        iy: 0x1a52,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2a);
    poke(0x0003, 0x81);
    poke(0xbdfd, 0x24);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfae1,
        bc: 0x5a24,
        de: 0x9502,
        hl: 0xdc9b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbdd3,
        iy: 0x1a52,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb82 | RES 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb82 | RES 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdaf6,
        bc: 0x3260,
        de: 0xf1ac,
        hl: 0x1d47,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5e74,
        iy: 0x35e2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9a);
    poke(0x0003, 0x82);
    poke(0x5e0e, 0x51);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdaf6,
        bc: 0x3260,
        de: 0x50ac,
        hl: 0x1d47,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5e74,
        iy: 0x35e2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(24078), equals(0x50));
  }, tags: 'undocumented');

  // Test instruction ddcb83 | RES 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb83 | RES 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8e7c,
        bc: 0x5586,
        de: 0x8c92,
        hl: 0xfb00,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3441,
        iy: 0xd365,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0e);
    poke(0x0003, 0x83);
    poke(0x344f, 0x01);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8e7c,
        bc: 0x5586,
        de: 0x8c00,
        hl: 0xfb00,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3441,
        iy: 0xd365,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(13391), equals(0x00));
  }, tags: 'undocumented');

  // Test instruction ddcb84 | RES 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb84 | RES 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc1b3,
        bc: 0x4874,
        de: 0xc535,
        hl: 0x0e1c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0123,
        iy: 0xdd28,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x47);
    poke(0x0003, 0x84);
    poke(0x016a, 0xb0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc1b3,
        bc: 0x4874,
        de: 0xc535,
        hl: 0xb01c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0123,
        iy: 0xdd28,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb85 | RES 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb85 | RES 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0928,
        bc: 0xb0db,
        de: 0x4e07,
        hl: 0xa7b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0ba3,
        iy: 0xc61c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6c);
    poke(0x0003, 0x85);
    poke(0x0c0f, 0xde);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0928,
        bc: 0xb0db,
        de: 0x4e07,
        hl: 0xa7de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0ba3,
        iy: 0xc61c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb86 | RES 0, (IX+*)
  test(
      "OPCODE "
      "ddcb86 | RES 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4515,
        bc: 0xde09,
        de: 0x3ce7,
        hl: 0x1fde,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x10c5,
        iy: 0x33ed,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x5c);
    poke(0x0003, 0x86);
    poke(0x1121, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4515,
        bc: 0xde09,
        de: 0x3ce7,
        hl: 0x1fde,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x10c5,
        iy: 0x33ed,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction ddcb87 | RES 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb87 | RES 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd05e,
        bc: 0xa733,
        de: 0xd1dd,
        hl: 0x1603,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xede6,
        iy: 0xe5fb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x02);
    poke(0x0003, 0x87);
    poke(0xede8, 0xc4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc45e,
        bc: 0xa733,
        de: 0xd1dd,
        hl: 0x1603,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xede6,
        iy: 0xe5fb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb88 | RES 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb88 | RES 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe4fa,
        bc: 0x3325,
        de: 0xc266,
        hl: 0x1b13,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x878e,
        iy: 0xe695,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9b);
    poke(0x0003, 0x88);
    poke(0x8729, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe4fa,
        bc: 0x7c25,
        de: 0xc266,
        hl: 0x1b13,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x878e,
        iy: 0xe695,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb89 | RES 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb89 | RES 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x933b,
        bc: 0x6fdd,
        de: 0xa3a8,
        hl: 0x2634,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8f3e,
        iy: 0x7727,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2b);
    poke(0x0003, 0x89);
    poke(0x8f69, 0xcf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x933b,
        bc: 0x6fcd,
        de: 0xa3a8,
        hl: 0x2634,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8f3e,
        iy: 0x7727,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(36713), equals(0xcd));
  }, tags: 'undocumented');

  // Test instruction ddcb8a | RES 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb8a | RES 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6759,
        bc: 0xad1e,
        de: 0x5d71,
        hl: 0xce52,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x39a9,
        iy: 0x38a0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0a);
    poke(0x0003, 0x8a);
    poke(0x39b3, 0xea);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6759,
        bc: 0xad1e,
        de: 0xe871,
        hl: 0xce52,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x39a9,
        iy: 0x38a0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(14771), equals(0xe8));
  }, tags: 'undocumented');

  // Test instruction ddcb8b | RES 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb8b | RES 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3da2,
        bc: 0x1833,
        de: 0x03c1,
        hl: 0x07e9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1685,
        iy: 0xd790,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x62);
    poke(0x0003, 0x8b);
    poke(0x16e7, 0x8a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3da2,
        bc: 0x1833,
        de: 0x0388,
        hl: 0x07e9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1685,
        iy: 0xd790,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(5863), equals(0x88));
  }, tags: 'undocumented');

  // Test instruction ddcb8c | RES 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb8c | RES 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa625,
        bc: 0xed31,
        de: 0x3946,
        hl: 0x32dc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc6a2,
        iy: 0x7ad6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe8);
    poke(0x0003, 0x8c);
    poke(0xc68a, 0x3e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa625,
        bc: 0xed31,
        de: 0x3946,
        hl: 0x3cdc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc6a2,
        iy: 0x7ad6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(50826), equals(0x3c));
  }, tags: 'undocumented');

  // Test instruction ddcb8d | RES 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb8d | RES 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x016b,
        bc: 0x5802,
        de: 0xa683,
        hl: 0x2549,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x22e6,
        iy: 0x33bb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xcc);
    poke(0x0003, 0x8d);
    poke(0x22b2, 0x9e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x016b,
        bc: 0x5802,
        de: 0xa683,
        hl: 0x259c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x22e6,
        iy: 0x33bb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(8882), equals(0x9c));
  }, tags: 'undocumented');

  // Test instruction ddcb8e | RES 1, (IX+*)
  test(
      "OPCODE "
      "ddcb8e | RES 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf4f4,
        bc: 0xf3a8,
        de: 0x2843,
        hl: 0x82cb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd2e8,
        iy: 0xd367,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0a);
    poke(0x0003, 0x8e);
    poke(0xd2f2, 0x03);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf4f4,
        bc: 0xf3a8,
        de: 0x2843,
        hl: 0x82cb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd2e8,
        iy: 0xd367,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(54002), equals(0x01));
  });

  // Test instruction ddcb8f | RES 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb8f | RES 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6b1a,
        bc: 0x8ae2,
        de: 0x269b,
        hl: 0xcb2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3ffe,
        iy: 0x75dd,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7b);
    poke(0x0003, 0x8f);
    poke(0x4079, 0x96);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x941a,
        bc: 0x8ae2,
        de: 0x269b,
        hl: 0xcb2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3ffe,
        iy: 0x75dd,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(16505), equals(0x94));
  }, tags: 'undocumented');

  // Test instruction ddcb90 | RES 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb90 | RES 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc167,
        bc: 0x3dfc,
        de: 0x42e7,
        hl: 0x9e14,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb501,
        iy: 0x84fe,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x04);
    poke(0x0003, 0x90);
    poke(0xb505, 0x46);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc167,
        bc: 0x42fc,
        de: 0x42e7,
        hl: 0x9e14,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb501,
        iy: 0x84fe,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(46341), equals(0x42));
  }, tags: 'undocumented');

  // Test instruction ddcb91 | RES 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb91 | RES 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe85e,
        bc: 0xcc89,
        de: 0xd249,
        hl: 0xea3b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc987,
        iy: 0xc4d1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x11);
    poke(0x0003, 0x91);
    poke(0xc998, 0x83);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe85e,
        bc: 0xcc83,
        de: 0xd249,
        hl: 0xea3b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc987,
        iy: 0xc4d1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb92 | RES 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb92 | RES 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x28a3,
        bc: 0x85ff,
        de: 0xab28,
        hl: 0x47a5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9166,
        iy: 0xe755,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4b);
    poke(0x0003, 0x92);
    poke(0x91b1, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x28a3,
        bc: 0x85ff,
        de: 0xaa28,
        hl: 0x47a5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9166,
        iy: 0xe755,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb93 | RES 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb93 | RES 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x58ac,
        bc: 0xc88b,
        de: 0x6d24,
        hl: 0xdbdd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xac2e,
        iy: 0x5199,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x03);
    poke(0x0003, 0x93);
    poke(0xac31, 0x93);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x58ac,
        bc: 0xc88b,
        de: 0x6d93,
        hl: 0xdbdd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xac2e,
        iy: 0x5199,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb94 | RES 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb94 | RES 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe38d,
        bc: 0x35a5,
        de: 0x8d07,
        hl: 0xbfb8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5e84,
        iy: 0x5f24,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x11);
    poke(0x0003, 0x94);
    poke(0x5e95, 0xb7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe38d,
        bc: 0x35a5,
        de: 0x8d07,
        hl: 0xb3b8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5e84,
        iy: 0x5f24,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(24213), equals(0xb3));
  }, tags: 'undocumented');

  // Test instruction ddcb95 | RES 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb95 | RES 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x41f4,
        bc: 0x9536,
        de: 0xdd7d,
        hl: 0x4948,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfb74,
        iy: 0xf17d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe6);
    poke(0x0003, 0x95);
    poke(0xfb5a, 0xc6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x41f4,
        bc: 0x9536,
        de: 0xdd7d,
        hl: 0x49c2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfb74,
        iy: 0xf17d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(64346), equals(0xc2));
  }, tags: 'undocumented');

  // Test instruction ddcb96 | RES 2, (IX+*)
  test(
      "OPCODE "
      "ddcb96 | RES 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4a9e,
        bc: 0x42ef,
        de: 0x32d7,
        hl: 0x18cf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7a81,
        iy: 0xbb1d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd5);
    poke(0x0003, 0x96);
    poke(0x7a56, 0xae);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4a9e,
        bc: 0x42ef,
        de: 0x32d7,
        hl: 0x18cf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7a81,
        iy: 0xbb1d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(31318), equals(0xaa));
  });

  // Test instruction ddcb97 | RES 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb97 | RES 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9ad3,
        bc: 0x89f0,
        de: 0x73c7,
        hl: 0x0b1a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x847c,
        iy: 0x4b86,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x92);
    poke(0x0003, 0x97);
    poke(0x840e, 0x23);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x23d3,
        bc: 0x89f0,
        de: 0x73c7,
        hl: 0x0b1a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x847c,
        iy: 0x4b86,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb98 | RES 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb98 | RES 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6e22,
        bc: 0xb9fd,
        de: 0x9fdc,
        hl: 0x3aed,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x041e,
        iy: 0xfd79,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xdc);
    poke(0x0003, 0x98);
    poke(0x03fa, 0x58);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6e22,
        bc: 0x50fd,
        de: 0x9fdc,
        hl: 0x3aed,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x041e,
        iy: 0xfd79,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(1018), equals(0x50));
  }, tags: 'undocumented');

  // Test instruction ddcb99 | RES 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb99 | RES 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa132,
        bc: 0x3891,
        de: 0x1515,
        hl: 0x2830,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x09fd,
        iy: 0x0473,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6d);
    poke(0x0003, 0x99);
    poke(0x0a6a, 0xce);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa132,
        bc: 0x38c6,
        de: 0x1515,
        hl: 0x2830,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x09fd,
        iy: 0x0473,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(2666), equals(0xc6));
  }, tags: 'undocumented');

  // Test instruction ddcb9a | RES 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb9a | RES 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x783d,
        bc: 0x8f69,
        de: 0x91c4,
        hl: 0xe38f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x68a8,
        iy: 0x391d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8a);
    poke(0x0003, 0x9a);
    poke(0x6832, 0xa8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x783d,
        bc: 0x8f69,
        de: 0xa0c4,
        hl: 0xe38f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x68a8,
        iy: 0x391d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(26674), equals(0xa0));
  }, tags: 'undocumented');

  // Test instruction ddcb9b | RES 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb9b | RES 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x955a,
        bc: 0xc7b0,
        de: 0x53b3,
        hl: 0xaec6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x06ef,
        iy: 0xe991,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x97);
    poke(0x0003, 0x9b);
    poke(0x0686, 0x62);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x955a,
        bc: 0xc7b0,
        de: 0x5362,
        hl: 0xaec6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x06ef,
        iy: 0xe991,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcb9c | RES 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb9c | RES 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaf69,
        bc: 0xf896,
        de: 0xe791,
        hl: 0xa2ee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x847b,
        iy: 0x59ed,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x54);
    poke(0x0003, 0x9c);
    poke(0x84cf, 0x1b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaf69,
        bc: 0xf896,
        de: 0xe791,
        hl: 0x13ee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x847b,
        iy: 0x59ed,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(33999), equals(0x13));
  }, tags: 'undocumented');

  // Test instruction ddcb9d | RES 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb9d | RES 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7d1e,
        bc: 0x5009,
        de: 0x1248,
        hl: 0x380c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe920,
        iy: 0x4fe6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0f);
    poke(0x0003, 0x9d);
    poke(0xe92f, 0xe8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7d1e,
        bc: 0x5009,
        de: 0x1248,
        hl: 0x38e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe920,
        iy: 0x4fe6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(59695), equals(0xe0));
  }, tags: 'undocumented');

  // Test instruction ddcb9e | RES 3, (IX+*)
  test(
      "OPCODE "
      "ddcb9e | RES 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc207,
        bc: 0xb47c,
        de: 0x0e16,
        hl: 0xe17f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd8bb,
        iy: 0xbb99,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb5);
    poke(0x0003, 0x9e);
    poke(0xd870, 0xee);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc207,
        bc: 0xb47c,
        de: 0x0e16,
        hl: 0xe17f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd8bb,
        iy: 0xbb99,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(55408), equals(0xe6));
  });

  // Test instruction ddcb9f | RES 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcb9f | RES 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc26b,
        bc: 0x7537,
        de: 0x46bb,
        hl: 0x13c0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe63c,
        iy: 0x1d98,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb8);
    poke(0x0003, 0x9f);
    poke(0xe5f4, 0xa6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa66b,
        bc: 0x7537,
        de: 0x46bb,
        hl: 0x13c0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe63c,
        iy: 0x1d98,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcba0 | RES 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba0 | RES 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0bbe,
        bc: 0x8500,
        de: 0x8609,
        hl: 0x5352,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa2f0,
        iy: 0xda02,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x02);
    poke(0x0003, 0xa0);
    poke(0xa2f2, 0x39);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0bbe,
        bc: 0x2900,
        de: 0x8609,
        hl: 0x5352,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa2f0,
        iy: 0xda02,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(41714), equals(0x29));
  }, tags: 'undocumented');

  // Test instruction ddcba1 | RES 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba1 | RES 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xad0a,
        bc: 0xaa76,
        de: 0x0f2d,
        hl: 0x832c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x45bb,
        iy: 0xa22d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf5);
    poke(0x0003, 0xa1);
    poke(0x45b0, 0xd2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xad0a,
        bc: 0xaac2,
        de: 0x0f2d,
        hl: 0x832c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x45bb,
        iy: 0xa22d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(17840), equals(0xc2));
  }, tags: 'undocumented');

  // Test instruction ddcba2 | RES 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba2 | RES 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf586,
        bc: 0x4a7d,
        de: 0xa5ab,
        hl: 0x26fc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x628b,
        iy: 0x6c4d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0e);
    poke(0x0003, 0xa2);
    poke(0x6299, 0xa1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf586,
        bc: 0x4a7d,
        de: 0xa1ab,
        hl: 0x26fc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x628b,
        iy: 0x6c4d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcba3 | RES 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba3 | RES 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xde5b,
        bc: 0xa284,
        de: 0xd40e,
        hl: 0xc92d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x040d,
        iy: 0x12c0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2e);
    poke(0x0003, 0xa3);
    poke(0x043b, 0x04);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xde5b,
        bc: 0xa284,
        de: 0xd404,
        hl: 0xc92d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x040d,
        iy: 0x12c0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcba4 | RES 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba4 | RES 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdfaa,
        bc: 0xae40,
        de: 0x02c3,
        hl: 0xe0b5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe4d,
        iy: 0xfaa3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x03);
    poke(0x0003, 0xa4);
    poke(0xfe50, 0x27);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdfaa,
        bc: 0xae40,
        de: 0x02c3,
        hl: 0x27b5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe4d,
        iy: 0xfaa3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcba5 | RES 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba5 | RES 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1a15,
        bc: 0x04cb,
        de: 0x4352,
        hl: 0xee39,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7b27,
        iy: 0x38a0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf6);
    poke(0x0003, 0xa5);
    poke(0x7b1d, 0x6b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1a15,
        bc: 0x04cb,
        de: 0x4352,
        hl: 0xee6b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7b27,
        iy: 0x38a0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcba6 | RES 4, (IX+*)
  test(
      "OPCODE "
      "ddcba6 | RES 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5e46,
        bc: 0xb98a,
        de: 0xb822,
        hl: 0x04ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae1b,
        iy: 0x8730,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x27);
    poke(0x0003, 0xa6);
    poke(0xae42, 0x8f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5e46,
        bc: 0xb98a,
        de: 0xb822,
        hl: 0x04ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae1b,
        iy: 0x8730,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction ddcba7 | RES 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba7 | RES 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0eed,
        bc: 0x7b11,
        de: 0x8cb0,
        hl: 0xeb3d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5ec8,
        iy: 0x97cf,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf2);
    poke(0x0003, 0xa7);
    poke(0x5eba, 0x87);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x87ed,
        bc: 0x7b11,
        de: 0x8cb0,
        hl: 0xeb3d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5ec8,
        iy: 0x97cf,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcba8 | RES 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba8 | RES 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5173,
        bc: 0x3089,
        de: 0x070d,
        hl: 0xe8f9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe84f,
        iy: 0x55f0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd0);
    poke(0x0003, 0xa8);
    poke(0xe81f, 0x7e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5173,
        bc: 0x5e89,
        de: 0x070d,
        hl: 0xe8f9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe84f,
        iy: 0x55f0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(59423), equals(0x5e));
  }, tags: 'undocumented');

  // Test instruction ddcba9 | RES 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcba9 | RES 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4fb8,
        bc: 0xccb5,
        de: 0x3e9a,
        hl: 0x2673,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0fdd,
        iy: 0xaef2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9d);
    poke(0x0003, 0xa9);
    poke(0x0f7a, 0x1f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4fb8,
        bc: 0xcc1f,
        de: 0x3e9a,
        hl: 0x2673,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0fdd,
        iy: 0xaef2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbaa | RES 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbaa | RES 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfe76,
        bc: 0x6f96,
        de: 0x3feb,
        hl: 0x0b21,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6747,
        iy: 0x07ba,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9f);
    poke(0x0003, 0xaa);
    poke(0x66e6, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfe76,
        bc: 0x6f96,
        de: 0x50eb,
        hl: 0x0b21,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6747,
        iy: 0x07ba,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbab | RES 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbab | RES 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2eb4,
        bc: 0x36f1,
        de: 0x8f44,
        hl: 0x36af,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6682,
        iy: 0x9d60,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x16);
    poke(0x0003, 0xab);
    poke(0x6698, 0xeb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2eb4,
        bc: 0x36f1,
        de: 0x8fcb,
        hl: 0x36af,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6682,
        iy: 0x9d60,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(26264), equals(0xcb));
  }, tags: 'undocumented');

  // Test instruction ddcbac | RES 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbac | RES 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaf32,
        bc: 0x8ca8,
        de: 0x6558,
        hl: 0x06d9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa4dd,
        iy: 0xcd1f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc4);
    poke(0x0003, 0xac);
    poke(0xa4a1, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaf32,
        bc: 0x8ca8,
        de: 0x6558,
        hl: 0x44d9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa4dd,
        iy: 0xcd1f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbad | RES 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbad | RES 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfcc9,
        bc: 0x69a7,
        de: 0x0eed,
        hl: 0xeab5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeef5,
        iy: 0x3ed2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x49);
    poke(0x0003, 0xad);
    poke(0xef3e, 0x76);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfcc9,
        bc: 0x69a7,
        de: 0x0eed,
        hl: 0xea56,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeef5,
        iy: 0x3ed2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61246), equals(0x56));
  }, tags: 'undocumented');

  // Test instruction ddcbae | RES 5, (IX+*)
  test(
      "OPCODE "
      "ddcbae | RES 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5f7a,
        bc: 0x9c20,
        de: 0xf013,
        hl: 0xc4b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb306,
        iy: 0x15dd,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6e);
    poke(0x0003, 0xae);
    poke(0xb374, 0x5a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5f7a,
        bc: 0x9c20,
        de: 0xf013,
        hl: 0xc4b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb306,
        iy: 0x15dd,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction ddcbaf | RES 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbaf | RES 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb11e,
        bc: 0x2583,
        de: 0x51fa,
        hl: 0xd427,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3619,
        iy: 0x9cef,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc2);
    poke(0x0003, 0xaf);
    poke(0x35db, 0x15);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x151e,
        bc: 0x2583,
        de: 0x51fa,
        hl: 0xd427,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3619,
        iy: 0x9cef,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbb0 | RES 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb0 | RES 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf43e,
        bc: 0xce57,
        de: 0x3bf3,
        hl: 0x0933,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x58d7,
        iy: 0xd89f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x47);
    poke(0x0003, 0xb0);
    poke(0x591e, 0x1e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf43e,
        bc: 0x1e57,
        de: 0x3bf3,
        hl: 0x0933,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x58d7,
        iy: 0xd89f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbb1 | RES 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb1 | RES 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x35ef,
        bc: 0xbbbc,
        de: 0xdb46,
        hl: 0x046c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xadd2,
        iy: 0x2b6e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x86);
    poke(0x0003, 0xb1);
    poke(0xad58, 0x46);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x35ef,
        bc: 0xbb06,
        de: 0xdb46,
        hl: 0x046c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xadd2,
        iy: 0x2b6e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(44376), equals(0x06));
  }, tags: 'undocumented');

  // Test instruction ddcbb2 | RES 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb2 | RES 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc26c,
        bc: 0xfd32,
        de: 0x9b7f,
        hl: 0xab6c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe7d0,
        iy: 0x501f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x70);
    poke(0x0003, 0xb2);
    poke(0xe840, 0x48);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc26c,
        bc: 0xfd32,
        de: 0x087f,
        hl: 0xab6c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe7d0,
        iy: 0x501f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(59456), equals(0x08));
  }, tags: 'undocumented');

  // Test instruction ddcbb3 | RES 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb3 | RES 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x36ca,
        bc: 0xb434,
        de: 0xe212,
        hl: 0xf805,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x53fb,
        iy: 0xb191,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xde);
    poke(0x0003, 0xb3);
    poke(0x53d9, 0x06);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x36ca,
        bc: 0xb434,
        de: 0xe206,
        hl: 0xf805,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x53fb,
        iy: 0xb191,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbb4 | RES 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb4 | RES 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0a1c,
        bc: 0xab67,
        de: 0x9ca1,
        hl: 0x2f98,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5066,
        iy: 0x320c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6b);
    poke(0x0003, 0xb4);
    poke(0x50d1, 0xdd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0a1c,
        bc: 0xab67,
        de: 0x9ca1,
        hl: 0x9d98,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5066,
        iy: 0x320c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(20689), equals(0x9d));
  }, tags: 'undocumented');

  // Test instruction ddcbb5 | RES 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb5 | RES 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfd6d,
        bc: 0x51c9,
        de: 0x16d6,
        hl: 0x1373,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x146e,
        iy: 0x2148,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xec);
    poke(0x0003, 0xb5);
    poke(0x145a, 0xd6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfd6d,
        bc: 0x51c9,
        de: 0x16d6,
        hl: 0x1396,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x146e,
        iy: 0x2148,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(5210), equals(0x96));
  }, tags: 'undocumented');

  // Test instruction ddcbb6 | RES 6, (IX+*)
  test(
      "OPCODE "
      "ddcbb6 | RES 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1d0b,
        bc: 0x04e8,
        de: 0x109e,
        hl: 0x1dde,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8772,
        iy: 0x8661,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x15);
    poke(0x0003, 0xb6);
    poke(0x8787, 0x8c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1d0b,
        bc: 0x04e8,
        de: 0x109e,
        hl: 0x1dde,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8772,
        iy: 0x8661,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction ddcbb7 | RES 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb7 | RES 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf012,
        bc: 0xb87e,
        de: 0x65ba,
        hl: 0xa5c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6120,
        iy: 0x789d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd3);
    poke(0x0003, 0xb7);
    poke(0x60f3, 0x54);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1412,
        bc: 0xb87e,
        de: 0x65ba,
        hl: 0xa5c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6120,
        iy: 0x789d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(24819), equals(0x14));
  }, tags: 'undocumented');

  // Test instruction ddcbb8 | RES 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb8 | RES 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8eae,
        bc: 0x4a53,
        de: 0xbfa1,
        hl: 0x5e7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0bf6,
        iy: 0x1e35,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x13);
    poke(0x0003, 0xb8);
    poke(0x0c09, 0x87);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8eae,
        bc: 0x0753,
        de: 0xbfa1,
        hl: 0x5e7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0bf6,
        iy: 0x1e35,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(3081), equals(0x07));
  }, tags: 'undocumented');

  // Test instruction ddcbb9 | RES 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbb9 | RES 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5fb7,
        bc: 0xa81e,
        de: 0xe2d2,
        hl: 0x4117,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0564,
        iy: 0x48a1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x56);
    poke(0x0003, 0xb9);
    poke(0x05ba, 0xc8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5fb7,
        bc: 0xa848,
        de: 0xe2d2,
        hl: 0x4117,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0564,
        iy: 0x48a1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(1466), equals(0x48));
  }, tags: 'undocumented');

  // Test instruction ddcbba | RES 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbba | RES 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7f6a,
        bc: 0x47fe,
        de: 0xce45,
        hl: 0x75de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf5e0,
        iy: 0x032c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x86);
    poke(0x0003, 0xba);
    poke(0xf566, 0x30);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7f6a,
        bc: 0x47fe,
        de: 0x3045,
        hl: 0x75de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf5e0,
        iy: 0x032c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbbb | RES 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbbb | RES 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc7e3,
        bc: 0xe49e,
        de: 0x9ec5,
        hl: 0x07e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbd31,
        iy: 0x9d5f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xef);
    poke(0x0003, 0xbb);
    poke(0xbd20, 0xc9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc7e3,
        bc: 0xe49e,
        de: 0x9e49,
        hl: 0x07e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbd31,
        iy: 0x9d5f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(48416), equals(0x49));
  }, tags: 'undocumented');

  // Test instruction ddcbbc | RES 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbbc | RES 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb430,
        bc: 0x7ac7,
        de: 0xb45f,
        hl: 0xfbf7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x638e,
        iy: 0x3173,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc0);
    poke(0x0003, 0xbc);
    poke(0x634e, 0x28);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb430,
        bc: 0x7ac7,
        de: 0xb45f,
        hl: 0x28f7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x638e,
        iy: 0x3173,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbbd | RES 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbbd | RES 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4e71,
        bc: 0x6ffa,
        de: 0xa3f9,
        hl: 0xa2e5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe3c4,
        iy: 0x02d4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb9);
    poke(0x0003, 0xbd);
    poke(0xe37d, 0xdd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4e71,
        bc: 0x6ffa,
        de: 0xa3f9,
        hl: 0xa25d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe3c4,
        iy: 0x02d4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(58237), equals(0x5d));
  }, tags: 'undocumented');

  // Test instruction ddcbbe | RES 7, (IX+*)
  test(
      "OPCODE "
      "ddcbbe | RES 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4af8,
        bc: 0x99a5,
        de: 0xd6fd,
        hl: 0x7a16,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x58d3,
        iy: 0xce54,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4d);
    poke(0x0003, 0xbe);
    poke(0x5920, 0xe8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4af8,
        bc: 0x99a5,
        de: 0xd6fd,
        hl: 0x7a16,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x58d3,
        iy: 0xce54,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22816), equals(0x68));
  });

  // Test instruction ddcbbf | RES 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbbf | RES 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6e31,
        bc: 0x0320,
        de: 0x134b,
        hl: 0x77c3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1734,
        iy: 0xbc2d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x26);
    poke(0x0003, 0xbf);
    poke(0x175a, 0xe2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6231,
        bc: 0x0320,
        de: 0x134b,
        hl: 0x77c3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1734,
        iy: 0xbc2d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(5978), equals(0x62));
  }, tags: 'undocumented');

  // Test instruction ddcbc0 | SET 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc0 | SET 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x75be,
        bc: 0x2b93,
        de: 0x093d,
        hl: 0x1128,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x792e,
        iy: 0x31f7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x00);
    poke(0x0003, 0xc0);
    poke(0x792e, 0x92);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x75be,
        bc: 0x9393,
        de: 0x093d,
        hl: 0x1128,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x792e,
        iy: 0x31f7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(31022), equals(0x93));
  }, tags: 'undocumented');

  // Test instruction ddcbc1 | SET 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc1 | SET 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x313f,
        bc: 0x8223,
        de: 0x5fcc,
        hl: 0x42c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdccc,
        iy: 0xd87b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf7);
    poke(0x0003, 0xc1);
    poke(0xdcc3, 0x1c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x313f,
        bc: 0x821d,
        de: 0x5fcc,
        hl: 0x42c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdccc,
        iy: 0xd87b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(56515), equals(0x1d));
  }, tags: 'undocumented');

  // Test instruction ddcbc2 | SET 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc2 | SET 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa7e3,
        bc: 0xbf55,
        de: 0xd27b,
        hl: 0x0a9d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0cfa,
        iy: 0xea4e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x85);
    poke(0x0003, 0xc2);
    poke(0x0c7f, 0x30);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa7e3,
        bc: 0xbf55,
        de: 0x317b,
        hl: 0x0a9d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0cfa,
        iy: 0xea4e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(3199), equals(0x31));
  }, tags: 'undocumented');

  // Test instruction ddcbc3 | SET 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc3 | SET 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe076,
        bc: 0x2760,
        de: 0x1eec,
        hl: 0x9968,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5426,
        iy: 0xa1a0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x32);
    poke(0x0003, 0xc3);
    poke(0x5458, 0xdd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe076,
        bc: 0x2760,
        de: 0x1edd,
        hl: 0x9968,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5426,
        iy: 0xa1a0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbc4 | SET 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc4 | SET 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa679,
        bc: 0xcc05,
        de: 0x3f4d,
        hl: 0xc899,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7acd,
        iy: 0x48d7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xae);
    poke(0x0003, 0xc4);
    poke(0x7a7b, 0x27);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa679,
        bc: 0xcc05,
        de: 0x3f4d,
        hl: 0x2799,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7acd,
        iy: 0x48d7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbc5 | SET 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc5 | SET 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xddfd,
        bc: 0x64d4,
        de: 0x2671,
        hl: 0x35e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xba99,
        iy: 0xbd98,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9c);
    poke(0x0003, 0xc5);
    poke(0xba35, 0x20);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xddfd,
        bc: 0x64d4,
        de: 0x2671,
        hl: 0x3521,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xba99,
        iy: 0xbd98,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(47669), equals(0x21));
  }, tags: 'undocumented');

  // Test instruction ddcbc6 | SET 0, (IX+*)
  test(
      "OPCODE "
      "ddcbc6 | SET 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb324,
        bc: 0xdc0c,
        de: 0x1e35,
        hl: 0x8cd5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xab2c,
        iy: 0xb6f3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc4);
    poke(0x0003, 0xc6);
    poke(0xaaf0, 0xb8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb324,
        bc: 0xdc0c,
        de: 0x1e35,
        hl: 0x8cd5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xab2c,
        iy: 0xb6f3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(43760), equals(0xb9));
  });

  // Test instruction ddcbc7 | SET 0, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc7 | SET 0, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa254,
        bc: 0x9e56,
        de: 0x6828,
        hl: 0x3189,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x64cb,
        iy: 0xdfad,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf8);
    poke(0x0003, 0xc7);
    poke(0x64c3, 0x94);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9554,
        bc: 0x9e56,
        de: 0x6828,
        hl: 0x3189,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x64cb,
        iy: 0xdfad,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(25795), equals(0x95));
  }, tags: 'undocumented');

  // Test instruction ddcbc8 | SET 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc8 | SET 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8aca,
        bc: 0x139e,
        de: 0xe652,
        hl: 0x248b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6e7a,
        iy: 0x189a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x65);
    poke(0x0003, 0xc8);
    poke(0x6edf, 0x8f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8aca,
        bc: 0x8f9e,
        de: 0xe652,
        hl: 0x248b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6e7a,
        iy: 0x189a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbc9 | SET 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbc9 | SET 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf15f,
        bc: 0x856e,
        de: 0xa21f,
        hl: 0x8a59,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb670,
        iy: 0x4f79,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xfb);
    poke(0x0003, 0xc9);
    poke(0xb66b, 0xb9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf15f,
        bc: 0x85bb,
        de: 0xa21f,
        hl: 0x8a59,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb670,
        iy: 0x4f79,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(46699), equals(0xbb));
  }, tags: 'undocumented');

  // Test instruction ddcbca | SET 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbca | SET 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdfab,
        bc: 0xa031,
        de: 0x1d78,
        hl: 0xad3a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa887,
        iy: 0x7334,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8a);
    poke(0x0003, 0xca);
    poke(0xa811, 0x7e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdfab,
        bc: 0xa031,
        de: 0x7e78,
        hl: 0xad3a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa887,
        iy: 0x7334,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbcb | SET 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbcb | SET 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xebd6,
        bc: 0x376e,
        de: 0xc346,
        hl: 0xb10c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa447,
        iy: 0x31d6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa4);
    poke(0x0003, 0xcb);
    poke(0xa3eb, 0x73);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xebd6,
        bc: 0x376e,
        de: 0xc373,
        hl: 0xb10c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa447,
        iy: 0x31d6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbcc | SET 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbcc | SET 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0212,
        bc: 0xdc46,
        de: 0x8f41,
        hl: 0x854e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1f5a,
        iy: 0x07ca,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x65);
    poke(0x0003, 0xcc);
    poke(0x1fbf, 0x72);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0212,
        bc: 0xdc46,
        de: 0x8f41,
        hl: 0x724e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1f5a,
        iy: 0x07ca,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbcd | SET 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbcd | SET 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3344,
        bc: 0xd73c,
        de: 0xd6b8,
        hl: 0x929d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5376,
        iy: 0x6d3a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe9);
    poke(0x0003, 0xcd);
    poke(0x535f, 0x1c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3344,
        bc: 0xd73c,
        de: 0xd6b8,
        hl: 0x921e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5376,
        iy: 0x6d3a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(21343), equals(0x1e));
  }, tags: 'undocumented');

  // Test instruction ddcbce | SET 1, (IX+*)
  test(
      "OPCODE "
      "ddcbce | SET 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9e47,
        bc: 0xfc93,
        de: 0x9ffc,
        hl: 0xaace,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0313,
        iy: 0x7f66,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x85);
    poke(0x0003, 0xce);
    poke(0x0298, 0x10);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9e47,
        bc: 0xfc93,
        de: 0x9ffc,
        hl: 0xaace,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0313,
        iy: 0x7f66,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(664), equals(0x12));
  });

  // Test instruction ddcbcf | SET 1, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbcf | SET 1, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x53e8,
        bc: 0xd379,
        de: 0x87d5,
        hl: 0x10b0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc5d0,
        iy: 0x4f7f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe2);
    poke(0x0003, 0xcf);
    poke(0xc5b2, 0xb5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb7e8,
        bc: 0xd379,
        de: 0x87d5,
        hl: 0x10b0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc5d0,
        iy: 0x4f7f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(50610), equals(0xb7));
  }, tags: 'undocumented');

  // Test instruction ddcbd0 | SET 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd0 | SET 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3278,
        bc: 0x6114,
        de: 0xd25d,
        hl: 0x1cf8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad43,
        iy: 0x99fc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7f);
    poke(0x0003, 0xd0);
    poke(0xadc2, 0x51);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3278,
        bc: 0x5514,
        de: 0xd25d,
        hl: 0x1cf8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad43,
        iy: 0x99fc,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(44482), equals(0x55));
  }, tags: 'undocumented');

  // Test instruction ddcbd1 | SET 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd1 | SET 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc0b8,
        bc: 0x371a,
        de: 0x6472,
        hl: 0xd92d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x10b2,
        iy: 0x3074,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa6);
    poke(0x0003, 0xd1);
    poke(0x1058, 0x2c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc0b8,
        bc: 0x372c,
        de: 0x6472,
        hl: 0xd92d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x10b2,
        iy: 0x3074,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbd2 | SET 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd2 | SET 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5bb6,
        bc: 0xcaa8,
        de: 0xe0db,
        hl: 0xaf84,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb9a1,
        iy: 0x7b5f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9c);
    poke(0x0003, 0xd2);
    poke(0xb93d, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5bb6,
        bc: 0xcaa8,
        de: 0x9cdb,
        hl: 0xaf84,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb9a1,
        iy: 0x7b5f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbd3 | SET 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd3 | SET 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdb6a,
        bc: 0x4fe2,
        de: 0x9e52,
        hl: 0xa034,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xda36,
        iy: 0x88a0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbd);
    poke(0x0003, 0xd3);
    poke(0xd9f3, 0x60);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdb6a,
        bc: 0x4fe2,
        de: 0x9e64,
        hl: 0xa034,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xda36,
        iy: 0x88a0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(55795), equals(0x64));
  }, tags: 'undocumented');

  // Test instruction ddcbd4 | SET 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd4 | SET 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcc1c,
        bc: 0xb884,
        de: 0x6ad2,
        hl: 0x1621,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xef26,
        iy: 0x41de,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x58);
    poke(0x0003, 0xd4);
    poke(0xef7e, 0x5e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcc1c,
        bc: 0xb884,
        de: 0x6ad2,
        hl: 0x5e21,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xef26,
        iy: 0x41de,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbd5 | SET 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd5 | SET 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc41d,
        bc: 0xc8b0,
        de: 0xcacb,
        hl: 0x7687,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8dbc,
        iy: 0xcc25,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x41);
    poke(0x0003, 0xd5);
    poke(0x8dfd, 0x71);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc41d,
        bc: 0xc8b0,
        de: 0xcacb,
        hl: 0x7675,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8dbc,
        iy: 0xcc25,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(36349), equals(0x75));
  }, tags: 'undocumented');

  // Test instruction ddcbd6 | SET 2, (IX+*)
  test(
      "OPCODE "
      "ddcbd6 | SET 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x09eb,
        bc: 0x769d,
        de: 0x7e07,
        hl: 0x51f9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5f03,
        iy: 0x6280,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xea);
    poke(0x0003, 0xd6);
    poke(0x5eed, 0x73);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x09eb,
        bc: 0x769d,
        de: 0x7e07,
        hl: 0x51f9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5f03,
        iy: 0x6280,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(24301), equals(0x77));
  });

  // Test instruction ddcbd7 | SET 2, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd7 | SET 2, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x241b,
        bc: 0xee10,
        de: 0xc152,
        hl: 0x2f6d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe725,
        iy: 0xc0d7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x80);
    poke(0x0003, 0xd7);
    poke(0xe6a5, 0x60);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x641b,
        bc: 0xee10,
        de: 0xc152,
        hl: 0x2f6d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe725,
        iy: 0xc0d7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(59045), equals(0x64));
  }, tags: 'undocumented');

  // Test instruction ddcbd8 | SET 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd8 | SET 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe3dc,
        bc: 0x1981,
        de: 0xc97b,
        hl: 0xcb42,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb30f,
        iy: 0xb32a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4c);
    poke(0x0003, 0xd8);
    poke(0xb35b, 0x96);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe3dc,
        bc: 0x9e81,
        de: 0xc97b,
        hl: 0xcb42,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb30f,
        iy: 0xb32a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(45915), equals(0x9e));
  }, tags: 'undocumented');

  // Test instruction ddcbd9 | SET 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbd9 | SET 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe9a0,
        bc: 0xa7c7,
        de: 0xa476,
        hl: 0x6057,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2642,
        iy: 0x58a0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x52);
    poke(0x0003, 0xd9);
    poke(0x2694, 0xef);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe9a0,
        bc: 0xa7ef,
        de: 0xa476,
        hl: 0x6057,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2642,
        iy: 0x58a0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbda | SET 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbda | SET 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6787,
        bc: 0x26a7,
        de: 0xa194,
        hl: 0x11d3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2d76,
        iy: 0x7f80,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xea);
    poke(0x0003, 0xda);
    poke(0x2d60, 0x82);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6787,
        bc: 0x26a7,
        de: 0x8a94,
        hl: 0x11d3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2d76,
        iy: 0x7f80,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(11616), equals(0x8a));
  }, tags: 'undocumented');

  // Test instruction ddcbdb | SET 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbdb | SET 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf986,
        bc: 0x6a4b,
        de: 0x6588,
        hl: 0xd2c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2b7d,
        iy: 0x5847,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4d);
    poke(0x0003, 0xdb);
    poke(0x2bca, 0x10);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf986,
        bc: 0x6a4b,
        de: 0x6518,
        hl: 0xd2c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2b7d,
        iy: 0x5847,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(11210), equals(0x18));
  }, tags: 'undocumented');

  // Test instruction ddcbdc | SET 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbdc | SET 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4c9e,
        bc: 0xd94d,
        de: 0x9760,
        hl: 0xb707,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7ed4,
        iy: 0x5cc5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd3);
    poke(0x0003, 0xdc);
    poke(0x7ea7, 0x45);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4c9e,
        bc: 0xd94d,
        de: 0x9760,
        hl: 0x4d07,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7ed4,
        iy: 0x5cc5,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(32423), equals(0x4d));
  }, tags: 'undocumented');

  // Test instruction ddcbdd | SET 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbdd | SET 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4b3b,
        bc: 0xd351,
        de: 0x9be9,
        hl: 0x2310,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x58c1,
        iy: 0xe430,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6f);
    poke(0x0003, 0xdd);
    poke(0x5930, 0x20);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4b3b,
        bc: 0xd351,
        de: 0x9be9,
        hl: 0x2328,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x58c1,
        iy: 0xe430,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22832), equals(0x28));
  }, tags: 'undocumented');

  // Test instruction ddcbde | SET 3, (IX+*)
  test(
      "OPCODE "
      "ddcbde | SET 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3b62,
        bc: 0xca1e,
        de: 0xa41a,
        hl: 0x227a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x89d2,
        iy: 0x7011,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x14);
    poke(0x0003, 0xde);
    poke(0x89e6, 0x5e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3b62,
        bc: 0xca1e,
        de: 0xa41a,
        hl: 0x227a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x89d2,
        iy: 0x7011,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction ddcbdf | SET 3, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbdf | SET 3, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4c8a,
        bc: 0x5b42,
        de: 0x50dd,
        hl: 0x4be0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd227,
        iy: 0x4913,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xef);
    poke(0x0003, 0xdf);
    poke(0xd216, 0x72);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7a8a,
        bc: 0x5b42,
        de: 0x50dd,
        hl: 0x4be0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd227,
        iy: 0x4913,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(53782), equals(0x7a));
  }, tags: 'undocumented');

  // Test instruction ddcbe0 | SET 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe0 | SET 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x440a,
        bc: 0x713d,
        de: 0xacfc,
        hl: 0xf762,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1c4b,
        iy: 0xb6ba,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x62);
    poke(0x0003, 0xe0);
    poke(0x1cad, 0x46);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x440a,
        bc: 0x563d,
        de: 0xacfc,
        hl: 0xf762,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1c4b,
        iy: 0xb6ba,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(7341), equals(0x56));
  }, tags: 'undocumented');

  // Test instruction ddcbe1 | SET 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe1 | SET 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc219,
        bc: 0xaa6b,
        de: 0xdfbf,
        hl: 0x6f10,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb931,
        iy: 0xd3d6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2e);
    poke(0x0003, 0xe1);
    poke(0xb95f, 0x75);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc219,
        bc: 0xaa75,
        de: 0xdfbf,
        hl: 0x6f10,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb931,
        iy: 0xd3d6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbe2 | SET 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe2 | SET 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x66d7,
        bc: 0xabd0,
        de: 0xcb48,
        hl: 0x8054,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xef50,
        iy: 0x9997,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x85);
    poke(0x0003, 0xe2);
    poke(0xeed5, 0x72);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x66d7,
        bc: 0xabd0,
        de: 0x7248,
        hl: 0x8054,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xef50,
        iy: 0x9997,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbe3 | SET 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe3 | SET 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7013,
        bc: 0xe7ed,
        de: 0x7e1c,
        hl: 0x57fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7ec6,
        iy: 0x75eb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf4);
    poke(0x0003, 0xe3);
    poke(0x7eba, 0x34);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7013,
        bc: 0xe7ed,
        de: 0x7e34,
        hl: 0x57fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7ec6,
        iy: 0x75eb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbe4 | SET 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe4 | SET 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1108,
        bc: 0x6e70,
        de: 0xf0af,
        hl: 0x2f0c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x95c7,
        iy: 0x6501,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbf);
    poke(0x0003, 0xe4);
    poke(0x9586, 0x34);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1108,
        bc: 0x6e70,
        de: 0xf0af,
        hl: 0x340c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x95c7,
        iy: 0x6501,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbe5 | SET 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe5 | SET 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x57cc,
        bc: 0x5511,
        de: 0x2696,
        hl: 0xb83d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6ab0,
        iy: 0x0e90,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf2);
    poke(0x0003, 0xe5);
    poke(0x6aa2, 0x2e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x57cc,
        bc: 0x5511,
        de: 0x2696,
        hl: 0xb83e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6ab0,
        iy: 0x0e90,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(27298), equals(0x3e));
  }, tags: 'undocumented');

  // Test instruction ddcbe6 | SET 4, (IX+*)
  test(
      "OPCODE "
      "ddcbe6 | SET 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x207a,
        bc: 0xa441,
        de: 0x1e03,
        hl: 0xac60,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd866,
        iy: 0x5fdc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x25);
    poke(0x0003, 0xe6);
    poke(0xd88b, 0x4c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x207a,
        bc: 0xa441,
        de: 0x1e03,
        hl: 0xac60,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd866,
        iy: 0x5fdc,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(55435), equals(0x5c));
  });

  // Test instruction ddcbe7 | SET 4, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe7 | SET 4, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc3c5,
        bc: 0x7fa9,
        de: 0x4e07,
        hl: 0xe02d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2a1b,
        iy: 0x55b7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf3);
    poke(0x0003, 0xe7);
    poke(0x2a0e, 0xeb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfbc5,
        bc: 0x7fa9,
        de: 0x4e07,
        hl: 0xe02d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2a1b,
        iy: 0x55b7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(10766), equals(0xfb));
  }, tags: 'undocumented');

  // Test instruction ddcbe8 | SET 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe8 | SET 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6d1c,
        bc: 0xa0c4,
        de: 0x93f0,
        hl: 0xa0b4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4bda,
        iy: 0x7761,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf2);
    poke(0x0003, 0xe8);
    poke(0x4bcc, 0xba);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6d1c,
        bc: 0xbac4,
        de: 0x93f0,
        hl: 0xa0b4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4bda,
        iy: 0x7761,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbe9 | SET 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbe9 | SET 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xebe5,
        bc: 0x0c2c,
        de: 0x1a2a,
        hl: 0x2720,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x72dd,
        iy: 0xa354,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8a);
    poke(0x0003, 0xe9);
    poke(0x7267, 0x0a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xebe5,
        bc: 0x0c2a,
        de: 0x1a2a,
        hl: 0x2720,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x72dd,
        iy: 0xa354,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(29287), equals(0x2a));
  }, tags: 'undocumented');

  // Test instruction ddcbea | SET 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbea | SET 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x42d2,
        bc: 0xda7a,
        de: 0x757f,
        hl: 0x6da6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa7e9,
        iy: 0xb933,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x04);
    poke(0x0003, 0xea);
    poke(0xa7ed, 0x5f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x42d2,
        bc: 0xda7a,
        de: 0x7f7f,
        hl: 0x6da6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa7e9,
        iy: 0xb933,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(42989), equals(0x7f));
  }, tags: 'undocumented');

  // Test instruction ddcbeb | SET 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbeb | SET 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe945,
        bc: 0x10aa,
        de: 0xf5f8,
        hl: 0x7647,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x16df,
        iy: 0x93fb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x24);
    poke(0x0003, 0xeb);
    poke(0x1703, 0xf3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe945,
        bc: 0x10aa,
        de: 0xf5f3,
        hl: 0x7647,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x16df,
        iy: 0x93fb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbec | SET 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbec | SET 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7180,
        bc: 0xbc85,
        de: 0x7dd3,
        hl: 0xf467,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdd88,
        iy: 0x6a41,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x60);
    poke(0x0003, 0xec);
    poke(0xdde8, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7180,
        bc: 0xbc85,
        de: 0x7dd3,
        hl: 0x2067,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdd88,
        iy: 0x6a41,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(56808), equals(0x20));
  }, tags: 'undocumented');

  // Test instruction ddcbed | SET 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbed | SET 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6b2f,
        bc: 0x9762,
        de: 0x1f0a,
        hl: 0xdb61,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf772,
        iy: 0x33e3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbe);
    poke(0x0003, 0xed);
    poke(0xf730, 0x6b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6b2f,
        bc: 0x9762,
        de: 0x1f0a,
        hl: 0xdb6b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf772,
        iy: 0x33e3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbee | SET 5, (IX+*)
  test(
      "OPCODE "
      "ddcbee | SET 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x79ea,
        bc: 0xdc8a,
        de: 0x7887,
        hl: 0x3baa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6c28,
        iy: 0xabbc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xde);
    poke(0x0003, 0xee);
    poke(0x6c06, 0xbd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x79ea,
        bc: 0xdc8a,
        de: 0x7887,
        hl: 0x3baa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6c28,
        iy: 0xabbc,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction ddcbef | SET 5, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbef | SET 5, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x46c3,
        bc: 0x2fc2,
        de: 0x8690,
        hl: 0xa836,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcc68,
        iy: 0xa8ce,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x30);
    poke(0x0003, 0xef);
    poke(0xcc98, 0x11);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x31c3,
        bc: 0x2fc2,
        de: 0x8690,
        hl: 0xa836,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcc68,
        iy: 0xa8ce,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(52376), equals(0x31));
  }, tags: 'undocumented');

  // Test instruction ddcbf0 | SET 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf0 | SET 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb330,
        bc: 0x4469,
        de: 0x362b,
        hl: 0xb515,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x13c0,
        iy: 0x6479,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2f);
    poke(0x0003, 0xf0);
    poke(0x13ef, 0xad);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb330,
        bc: 0xed69,
        de: 0x362b,
        hl: 0xb515,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x13c0,
        iy: 0x6479,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(5103), equals(0xed));
  }, tags: 'undocumented');

  // Test instruction ddcbf1 | SET 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf1 | SET 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x94c0,
        bc: 0x9ab0,
        de: 0xa0fd,
        hl: 0x7c1d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x47ba,
        iy: 0x8c81,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x40);
    poke(0x0003, 0xf1);
    poke(0x47fa, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x94c0,
        bc: 0x9a78,
        de: 0xa0fd,
        hl: 0x7c1d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x47ba,
        iy: 0x8c81,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbf2 | SET 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf2 | SET 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5302,
        bc: 0x9204,
        de: 0x20ec,
        hl: 0xd640,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc947,
        iy: 0x4ef1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0f);
    poke(0x0003, 0xf2);
    poke(0xc956, 0x21);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5302,
        bc: 0x9204,
        de: 0x61ec,
        hl: 0xd640,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc947,
        iy: 0x4ef1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(51542), equals(0x61));
  }, tags: 'undocumented');

  // Test instruction ddcbf3 | SET 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf3 | SET 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9950,
        bc: 0xa3d2,
        de: 0x5058,
        hl: 0x5ccc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1d96,
        iy: 0x7c75,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x06);
    poke(0x0003, 0xf3);
    poke(0x1d9c, 0xe4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9950,
        bc: 0xa3d2,
        de: 0x50e4,
        hl: 0x5ccc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1d96,
        iy: 0x7c75,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbf4 | SET 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf4 | SET 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3712,
        bc: 0x1f99,
        de: 0x4863,
        hl: 0x47de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1702,
        iy: 0xc042,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3b);
    poke(0x0003, 0xf4);
    poke(0x173d, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3712,
        bc: 0x1f99,
        de: 0x4863,
        hl: 0xe1de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1702,
        iy: 0xc042,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbf5 | SET 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf5 | SET 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd83f,
        bc: 0x1ec9,
        de: 0xd0da,
        hl: 0x4173,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeb3f,
        iy: 0x1ead,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x64);
    poke(0x0003, 0xf5);
    poke(0xeba3, 0xc5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd83f,
        bc: 0x1ec9,
        de: 0xd0da,
        hl: 0x41c5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeb3f,
        iy: 0x1ead,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbf6 | SET 6, (IX+*)
  test(
      "OPCODE "
      "ddcbf6 | SET 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4d6c,
        bc: 0x93ac,
        de: 0x810d,
        hl: 0xcfe1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdc5a,
        iy: 0xc33c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7b);
    poke(0x0003, 0xf6);
    poke(0xdcd5, 0xa2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4d6c,
        bc: 0x93ac,
        de: 0x810d,
        hl: 0xcfe1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdc5a,
        iy: 0xc33c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(56533), equals(0xe2));
  });

  // Test instruction ddcbf7 | SET 6, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf7 | SET 6, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfe40,
        bc: 0x7887,
        de: 0xb9de,
        hl: 0xc013,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x301e,
        iy: 0x9710,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc3);
    poke(0x0003, 0xf7);
    poke(0x2fe1, 0xa9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe940,
        bc: 0x7887,
        de: 0xb9de,
        hl: 0xc013,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x301e,
        iy: 0x9710,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(12257), equals(0xe9));
  }, tags: 'undocumented');

  // Test instruction ddcbf8 | SET 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf8 | SET 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8278,
        bc: 0x21a4,
        de: 0x1e5c,
        hl: 0x4952,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x427f,
        iy: 0x41e1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x59);
    poke(0x0003, 0xf8);
    poke(0x42d8, 0x28);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8278,
        bc: 0xa8a4,
        de: 0x1e5c,
        hl: 0x4952,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x427f,
        iy: 0x41e1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(17112), equals(0xa8));
  }, tags: 'undocumented');

  // Test instruction ddcbf9 | SET 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbf9 | SET 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb2df,
        bc: 0xe9b8,
        de: 0x56c3,
        hl: 0x16ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd88f,
        iy: 0x0bab,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x55);
    poke(0x0003, 0xf9);
    poke(0xd8e4, 0x14);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb2df,
        bc: 0xe994,
        de: 0x56c3,
        hl: 0x16ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd88f,
        iy: 0x0bab,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(55524), equals(0x94));
  }, tags: 'undocumented');

  // Test instruction ddcbfa | SET 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbfa | SET 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x01f1,
        bc: 0xbc0d,
        de: 0xd476,
        hl: 0x1510,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9420,
        iy: 0x93a3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x74);
    poke(0x0003, 0xfa);
    poke(0x9494, 0xfe);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x01f1,
        bc: 0xbc0d,
        de: 0xfe76,
        hl: 0x1510,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9420,
        iy: 0x93a3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbfb | SET 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbfb | SET 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x709b,
        bc: 0x14eb,
        de: 0xec1c,
        hl: 0xb844,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3453,
        iy: 0xf2b0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xaf);
    poke(0x0003, 0xfb);
    poke(0x3402, 0x02);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x709b,
        bc: 0x14eb,
        de: 0xec82,
        hl: 0xb844,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3453,
        iy: 0xf2b0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(13314), equals(0x82));
  }, tags: 'undocumented');

  // Test instruction ddcbfc | SET 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbfc | SET 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6c89,
        bc: 0xa96e,
        de: 0xd27b,
        hl: 0xd6a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6139,
        iy: 0xb4c1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa1);
    poke(0x0003, 0xfc);
    poke(0x60da, 0x10);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6c89,
        bc: 0xa96e,
        de: 0xd27b,
        hl: 0x90a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6139,
        iy: 0xb4c1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(24794), equals(0x90));
  }, tags: 'undocumented');

  // Test instruction ddcbfd | SET 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbfd | SET 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfb3f,
        bc: 0x83f6,
        de: 0x2094,
        hl: 0x3349,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3ed0,
        iy: 0x6f0e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x28);
    poke(0x0003, 0xfd);
    poke(0x3ef8, 0xc2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfb3f,
        bc: 0x83f6,
        de: 0x2094,
        hl: 0x33c2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3ed0,
        iy: 0x6f0e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction ddcbfe | SET 7, (IX+*)
  test(
      "OPCODE "
      "ddcbfe | SET 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfc42,
        bc: 0x50b7,
        de: 0xe98d,
        hl: 0x3e45,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x41b5,
        iy: 0x3410,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xec);
    poke(0x0003, 0xfe);
    poke(0x41a1, 0xa1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfc42,
        bc: 0x50b7,
        de: 0xe98d,
        hl: 0x3e45,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x41b5,
        iy: 0x3410,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction ddcbff | SET 7, (IX+*)
  test(
      "UNDOCUMENTED "
      "ddcbff | SET 7, (IX+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe666,
        bc: 0x94d2,
        de: 0xac90,
        hl: 0x8f45,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0655,
        iy: 0xba29,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd3);
    poke(0x0003, 0xff);
    poke(0x0628, 0x2b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xab66,
        bc: 0x94d2,
        de: 0xac90,
        hl: 0x8f45,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0655,
        iy: 0xba29,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(1576), equals(0xab));
  }, tags: 'undocumented');

  // Test instruction dde1 | POP IX
  test(
      "OPCODE "
      "dde1 | POP IX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8a15,
        bc: 0x6bf0,
        de: 0x0106,
        hl: 0x3dd0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5da4,
        iy: 0x8716,
        sp: 0x595f,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xe1);
    poke(0x595f, 0x9a);
    poke(0x5960, 0x09);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8a15,
        bc: 0x6bf0,
        de: 0x0106,
        hl: 0x3dd0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x099a,
        iy: 0x8716,
        sp: 0x5961,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 14);
  });

  // Test instruction dde3 | EX (SP), IX
  test(
      "OPCODE "
      "dde3 | EX (SP), IX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x068e,
        bc: 0x58e6,
        de: 0x2713,
        hl: 0x500f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbe05,
        iy: 0x4308,
        sp: 0x57bd,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xe3);
    poke(0x57bd, 0x15);
    poke(0x57be, 0x3f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x068e,
        bc: 0x58e6,
        de: 0x2713,
        hl: 0x500f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3f15,
        iy: 0x4308,
        sp: 0x57bd,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22461), equals(0x05));
    expect(peek(22462), equals(0xbe));
  });

  // Test instruction dde5 | PUSH IX
  test(
      "OPCODE "
      "dde5 | PUSH IX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7462,
        bc: 0x9b6c,
        de: 0xbfe5,
        hl: 0x0330,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb282,
        iy: 0xe272,
        sp: 0x0761,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xe5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7462,
        bc: 0x9b6c,
        de: 0xbfe5,
        hl: 0x0330,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb282,
        iy: 0xe272,
        sp: 0x075f,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(1887), equals(0x82));
    expect(peek(1888), equals(0xb2));
  });

  // Test instruction dde9 | JP (IX)
  test(
      "OPCODE "
      "dde9 | JP (IX)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x75a7,
        bc: 0x139b,
        de: 0xf9a3,
        hl: 0x94bb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x64f0,
        iy: 0x3433,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xe9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x75a7,
        bc: 0x139b,
        de: 0xf9a3,
        hl: 0x94bb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x64f0,
        iy: 0x3433,
        sp: 0x0000,
        pc: 0x64f0);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ddf9 | LD SP, IX
  test(
      "OPCODE "
      "ddf9 | LD SP, IX", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8709,
        bc: 0x15dd,
        de: 0x7fa6,
        hl: 0x3c5c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd3a7,
        iy: 0x1d7b,
        sp: 0xf67c,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xf9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8709,
        bc: 0x15dd,
        de: 0x7fa6,
        hl: 0x3c5c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd3a7,
        iy: 0x1d7b,
        sp: 0xd3a7,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction ddfd00 | <UNKNOWN>
  test(
      "UNDOCUMENTED "
      "ddfd00", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xdd);
    poke(0x0001, 0xfd);
    poke(0x0002, 0x00);
    poke(0x0003, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 13) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x04, iff1: false, iff2: false, tStates: 16);
  }, tags: 'undocumented');

  // Test instruction de | SBC A, *
  test(
      "OPCODE "
      "de | SBC A, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe78d,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xde);
    poke(0x0001, 0xa1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4502,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction df | RST 18h
  test(
      "OPCODE "
      "df | RST 18h", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5507,
        pc: 0x6d33);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x6d33, 0xdf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5505,
        pc: 0x0018);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(21765), equals(0x34));
    expect(peek(21766), equals(0x6d));
  });

  // Test instruction e0_1 | RET PO
  test(
      "OPCODE "
      "e0_1 | RET PO", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe0);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f9,
        pc: 0xafe9);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction e0_2 | RET PO
  test(
      "OPCODE "
      "e0_2 | RET PO", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x009c,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe0);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x009c,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 5);
  });

  // Test instruction e1 | POP HL
  test(
      "OPCODE "
      "e1 | POP HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4143,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe1);
    poke(0x4143, 0xce);
    poke(0x4144, 0xe8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xe8ce,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4145,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction e2_1 | JP PO, **
  test(
      "OPCODE "
      "e2_1 | JP PO, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0083,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe2);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0083,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xe11b);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction e2_2 | JP PO, **
  test(
      "OPCODE "
      "e2_2 | JP PO, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe2);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction e3 | EX (SP), HL
  test(
      "OPCODE "
      "e3 | EX (SP), HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x4d22,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0373,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe3);
    poke(0x0373, 0x8e);
    poke(0x0374, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xe18e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0373,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 19);
    expect(peek(883), equals(0x22));
    expect(peek(884), equals(0x4d));
  });

  // Test instruction e4_1 | CALL PO, **
  test(
      "OPCODE "
      "e4_1 | CALL PO, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000a,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe4);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000a,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5696,
        pc: 0x9c61);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(22166), equals(0x03));
    expect(peek(22167), equals(0x00));
  });

  // Test instruction e4_2 | CALL PO, **
  test(
      "OPCODE "
      "e4_2 | CALL PO, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe4);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction e5 | PUSH HL
  test(
      "OPCODE "
      "e5 | PUSH HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x53e3,
        bc: 0x1459,
        de: 0x775f,
        hl: 0x1a2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xec12,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x53e3,
        bc: 0x1459,
        de: 0x775f,
        hl: 0x1a2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xec10,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(60432), equals(0x2f));
    expect(peek(60433), equals(0x1a));
  });

  // Test instruction e6 | AND *
  test(
      "OPCODE "
      "e6 | AND *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7500,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe6);
    poke(0x0001, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4114,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction e7 | RST 20h
  test(
      "OPCODE "
      "e7 | RST 20h", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5507,
        pc: 0x6d33);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x6d33, 0xe7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5505,
        pc: 0x0020);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(21765), equals(0x34));
    expect(peek(21766), equals(0x6d));
  });

  // Test instruction e8_1 | RET PE
  test(
      "OPCODE "
      "e8_1 | RET PE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe8);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 5);
  });

  // Test instruction e8_2 | RET PE
  test(
      "OPCODE "
      "e8_2 | RET PE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x009c,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe8);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x009c,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f9,
        pc: 0xafe9);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction e9 | JP (HL)
  test(
      "OPCODE "
      "e9 | JP (HL)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xcaba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xe9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xcaba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xcaba);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction ea_1 | JP PE, **
  test(
      "OPCODE "
      "ea_1 | JP PE, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xea);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xe11b);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction ea_2 | JP PE, **
  test(
      "OPCODE "
      "ea_2 | JP PE, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0083,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xea);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0083,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction eb | EX DE, HL
  test(
      "OPCODE "
      "eb | EX DE, HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xb879,
        hl: 0x942e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xeb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x942e,
        hl: 0xb879,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction ec_1 | CALL PE, **
  test(
      "OPCODE "
      "ec_1 | CALL PE, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xec);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5696,
        pc: 0x9c61);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(22166), equals(0x03));
    expect(peek(22167), equals(0x00));
  });

  // Test instruction ec_2 | CALL PE, **
  test(
      "OPCODE "
      "ec_2 | CALL PE, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000a,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xec);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000a,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction ed40 | IN B, (C)
  test(
      "OPCODE "
      "ed40 | IN B, (C)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x83f9,
        bc: 0x296b,
        de: 0x7034,
        hl: 0x1f2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x40);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8329,
        bc: 0x296b,
        de: 0x7034,
        hl: 0x1f2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed41 | OUT (C), B
  test(
      "OPCODE "
      "ed41 | OUT (C), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x29a2,
        bc: 0x0881,
        de: 0xd7dd,
        hl: 0xff4e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x41);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x29a2,
        bc: 0x0881,
        de: 0xd7dd,
        hl: 0xff4e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed42 | SBC HL, BC
  test(
      "OPCODE "
      "ed42 | SBC HL, BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcbd3,
        bc: 0x1c8f,
        de: 0xd456,
        hl: 0x315e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x42);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcb12,
        bc: 0x1c8f,
        de: 0xd456,
        hl: 0x14ce,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction ed43 | LD (**), BC
  test(
      "OPCODE "
      "ed43 | LD (**), BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xda36,
        bc: 0x2732,
        de: 0x91cc,
        hl: 0x9798,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5f73,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x43);
    poke(0x0002, 0xc6);
    poke(0x0003, 0x54);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xda36,
        bc: 0x2732,
        de: 0x91cc,
        hl: 0x9798,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5f73,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
    expect(peek(21702), equals(0x32));
    expect(peek(21703), equals(0x27));
  });

  // Test instruction ed44 | NEG
  test(
      "OPCODE "
      "ed44 | NEG", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfe2b,
        bc: 0x040f,
        de: 0xdeb6,
        hl: 0xafc3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5ca8,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0213,
        bc: 0x040f,
        de: 0xdeb6,
        hl: 0xafc3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5ca8,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed45 | RETN
  test(
      "OPCODE "
      "ed45 | RETN", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x001d,
        bc: 0x5b63,
        de: 0xa586,
        hl: 0x1451,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x3100,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = true;
    poke(0x0000, 0xed);
    poke(0x0001, 0x45);
    poke(0x3100, 0x1f);
    poke(0x3101, 0x22);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x001d,
        bc: 0x5b63,
        de: 0xa586,
        hl: 0x1451,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x3102,
        pc: 0x221f);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: true, iff2: true, tStates: 14);
  });

  // Test instruction ed46 | IM 0
  test(
      "OPCODE "
      "ed46 | IM 0", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb6ec,
        bc: 0x8afb,
        de: 0xce09,
        hl: 0x70a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x8dea,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x46);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb6ec,
        bc: 0x8afb,
        de: 0xce09,
        hl: 0x70a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x8dea,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed47 | LD I, A
  test(
      "OPCODE "
      "ed47 | LD I, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9a99,
        bc: 0x9e5a,
        de: 0x9913,
        hl: 0xcacc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x47);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9a99,
        bc: 0x9e5a,
        de: 0x9913,
        hl: 0xcacc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x9a, r: 0x02, iff1: false, iff2: false, tStates: 9);
  });

  // Test instruction ed48 | IN C, (C)
  test(
      "OPCODE "
      "ed48 | IN C, (C)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdbdd,
        bc: 0x7d1b,
        de: 0x141d,
        hl: 0x5fb4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x48);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdb2d,
        bc: 0x7d7d,
        de: 0x141d,
        hl: 0x5fb4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed49 | OUT (C), C
  test(
      "OPCODE "
      "ed49 | OUT (C), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x07a5,
        bc: 0x59ec,
        de: 0xf459,
        hl: 0x4316,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x07a5,
        bc: 0x59ec,
        de: 0xf459,
        hl: 0x4316,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed4a | ADC HL, BC
  test(
      "OPCODE "
      "ed4a | ADC HL, BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5741,
        bc: 0x24b5,
        de: 0x83d2,
        hl: 0x9ac8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x4a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x57a8,
        bc: 0x24b5,
        de: 0x83d2,
        hl: 0xbf7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction ed4b | LD BC, (**)
  test(
      "OPCODE "
      "ed4b | LD BC, (**)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x650c,
        bc: 0xd74d,
        de: 0x0448,
        hl: 0xa3b9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xb554,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x4b);
    poke(0x0002, 0x1a);
    poke(0x0003, 0xa4);
    poke(0xa41a, 0xf3);
    poke(0xa41b, 0xd4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x650c,
        bc: 0xd4f3,
        de: 0x0448,
        hl: 0xa3b9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xb554,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ed4c | <UNKNOWN>
  test(
      "OPCODE "
      "ed4c", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5682,
        bc: 0x7dde,
        de: 0xb049,
        hl: 0x939d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xc7bb,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x4c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaabb,
        bc: 0x7dde,
        de: 0xb049,
        hl: 0x939d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xc7bb,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed4d | RETI
  test(
      "OPCODE "
      "ed4d | RETI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1bed,
        bc: 0xc358,
        de: 0x5fd5,
        hl: 0x6093,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x680e,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x4d);
    poke(0x680e, 0x03);
    poke(0x680f, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1bed,
        bc: 0xc358,
        de: 0x5fd5,
        hl: 0x6093,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x6810,
        pc: 0x7c03);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 14);
  });

  // Test instruction ed4e | <UNKNOWN>
  test(
      "OPCODE "
      "ed4e", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8e01,
        bc: 0xe7c6,
        de: 0x880f,
        hl: 0xd2a2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x85da,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x4e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8e01,
        bc: 0xe7c6,
        de: 0x880f,
        hl: 0xd2a2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x85da,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed4f | LD R, A
  test(
      "OPCODE "
      "ed4f | LD R, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2ae3,
        bc: 0xc115,
        de: 0xeff8,
        hl: 0x9f6d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x4f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2ae3,
        bc: 0xc115,
        de: 0xeff8,
        hl: 0x9f6d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x2a, iff1: false, iff2: false, tStates: 9);
  });

  // Test instruction ed50 | IN D, (C)
  test(
      "OPCODE "
      "ed50 | IN D, (C)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x85ae,
        bc: 0xbbcc,
        de: 0xe2a8,
        hl: 0xf219,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x85ac,
        bc: 0xbbcc,
        de: 0xbba8,
        hl: 0xf219,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed51 | OUT (C), D
  test(
      "OPCODE "
      "ed51 | OUT (C), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2c4c,
        bc: 0xc0a4,
        de: 0x5303,
        hl: 0xbc25,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x51);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2c4c,
        bc: 0xc0a4,
        de: 0x5303,
        hl: 0xbc25,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed52 | SBC HL, DE
  test(
      "OPCODE "
      "ed52 | SBC HL, DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfc57,
        bc: 0x1fc8,
        de: 0x47b6,
        hl: 0xda7c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x52);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfc82,
        bc: 0x1fc8,
        de: 0x47b6,
        hl: 0x92c5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction ed53 | LD (**), DE
  test(
      "OPCODE "
      "ed53 | LD (**), DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1f88,
        bc: 0x4692,
        de: 0x5cb2,
        hl: 0x4915,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x7d8c,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x53);
    poke(0x0002, 0xff);
    poke(0x0003, 0x21);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1f88,
        bc: 0x4692,
        de: 0x5cb2,
        hl: 0x4915,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x7d8c,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
    expect(peek(8703), equals(0xb2));
    expect(peek(8704), equals(0x5c));
  });

  // Test instruction ed54 | <UNKNOWN>
  test(
      "OPCODE "
      "ed54", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xadf9,
        bc: 0x5661,
        de: 0x547c,
        hl: 0xc322,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xd9eb,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x54);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5313,
        bc: 0x5661,
        de: 0x547c,
        hl: 0xc322,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xd9eb,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed55 | RETN
  test(
      "OPCODE "
      "ed55 | RETN", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb05b,
        bc: 0x5e84,
        de: 0xd6e9,
        hl: 0xcb3e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xd4b4,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = true;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x55);
    poke(0xd4b4, 0xea);
    poke(0xd4b5, 0xc9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb05b,
        bc: 0x5e84,
        de: 0xd6e9,
        hl: 0xcb3e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xd4b6,
        pc: 0xc9ea);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 14);
  });

  // Test instruction ed56 | IM 1
  test(
      "OPCODE "
      "ed56 | IM 1", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5cc0,
        bc: 0x9100,
        de: 0x356b,
        hl: 0x4bfd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x2c93,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x56);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5cc0,
        bc: 0x9100,
        de: 0x356b,
        hl: 0x4bfd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x2c93,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed57 | LD A, I
  test(
      "OPCODE "
      "ed57 | LD A, I", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbcfe,
        bc: 0xdfc7,
        de: 0xa621,
        hl: 0x1022,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x1e;
    z80.r = 0x17;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x57);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1e08,
        bc: 0xdfc7,
        de: 0xa621,
        hl: 0x1022,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x1e, r: 0x19, iff1: false, iff2: false, tStates: 9);
  });

  // Test instruction ed58 | IN E, (C)
  test(
      "OPCODE "
      "ed58 | IN E, (C)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc9ee,
        bc: 0x4091,
        de: 0x9e46,
        hl: 0x873a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x58);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc900,
        bc: 0x4091,
        de: 0x9e40,
        hl: 0x873a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed59 | OUT (C), E
  test(
      "OPCODE "
      "ed59 | OUT (C), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x388a,
        bc: 0xd512,
        de: 0xecc5,
        hl: 0x93af,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x59);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x388a,
        bc: 0xd512,
        de: 0xecc5,
        hl: 0x93af,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed5a | ADC HL, DE
  test(
      "OPCODE "
      "ed5a | ADC HL, DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa41f,
        bc: 0x751c,
        de: 0x19ce,
        hl: 0x0493,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x5a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa408,
        bc: 0x751c,
        de: 0x19ce,
        hl: 0x1e62,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction ed5b | LD DE, (**)
  test(
      "OPCODE "
      "ed5b | LD DE, (**)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5df1,
        bc: 0x982e,
        de: 0x002f,
        hl: 0xadb9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xf398,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x5b);
    poke(0x0002, 0x04);
    poke(0x0003, 0x9f);
    poke(0x9f04, 0x84);
    poke(0x9f05, 0x4d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5df1,
        bc: 0x982e,
        de: 0x4d84,
        hl: 0xadb9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xf398,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ed5c | <UNKNOWN>
  test(
      "OPCODE "
      "ed5c", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x11c3,
        bc: 0xb86c,
        de: 0x2042,
        hl: 0xc958,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x93dc,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x5c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xefbb,
        bc: 0xb86c,
        de: 0x2042,
        hl: 0xc958,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x93dc,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed5d | RETN
  test(
      "OPCODE "
      "ed5d | RETN", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1152,
        bc: 0x1d20,
        de: 0x3f86,
        hl: 0x64fc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5308,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x5d);
    poke(0x5308, 0x26);
    poke(0x5309, 0xe0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1152,
        bc: 0x1d20,
        de: 0x3f86,
        hl: 0x64fc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x530a,
        pc: 0xe026);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 14);
  });

  // Test instruction ed5e | IM 2
  test(
      "OPCODE "
      "ed5e | IM 2", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x611a,
        bc: 0xc8cf,
        de: 0xf215,
        hl: 0xd92b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4d86,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x5e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x611a,
        bc: 0xc8cf,
        de: 0xf215,
        hl: 0xd92b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4d86,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed5f | LD A, R
  test(
      "OPCODE "
      "ed5f | LD A, R", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1bb5,
        bc: 0xfc09,
        de: 0x2dfa,
        hl: 0xbab9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0xd7;
    z80.r = 0xf3;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x5f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf5a1,
        bc: 0xfc09,
        de: 0x2dfa,
        hl: 0xbab9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0xd7, r: 0xf5, iff1: false, iff2: false, tStates: 9);
  });

  // Test instruction ed60 | IN H, (C)
  test(
      "OPCODE "
      "ed60 | IN H, (C)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2c9c,
        bc: 0x0dae,
        de: 0x621e,
        hl: 0x2f66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x60);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2c08,
        bc: 0x0dae,
        de: 0x621e,
        hl: 0x0d66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed61 | OUT (C), H
  test(
      "OPCODE "
      "ed61 | OUT (C), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xffa8,
        bc: 0x90ca,
        de: 0x0340,
        hl: 0xd847,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xffa8,
        bc: 0x90ca,
        de: 0x0340,
        hl: 0xd847,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed62 | SBC HL, HL
  test(
      "OPCODE "
      "ed62 | SBC HL, HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa60b,
        bc: 0xd9aa,
        de: 0x6623,
        hl: 0x0b1a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x62);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa6bb,
        bc: 0xd9aa,
        de: 0x6623,
        hl: 0xffff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction ed63 | <UNKNOWN>
  test(
      "OPCODE "
      "ed63", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5222,
        bc: 0x88f9,
        de: 0x9d9a,
        hl: 0xe4d3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xa2f0,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x63);
    poke(0x0002, 0x67);
    poke(0x0003, 0x65);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5222,
        bc: 0x88f9,
        de: 0x9d9a,
        hl: 0xe4d3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xa2f0,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
    expect(peek(25959), equals(0xd3));
    expect(peek(25960), equals(0xe4));
  });

  // Test instruction ed64 | <UNKNOWN>
  test(
      "OPCODE "
      "ed64", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2127,
        bc: 0xe425,
        de: 0x66ac,
        hl: 0xb2a3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f2,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x64);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdf9b,
        bc: 0xe425,
        de: 0x66ac,
        hl: 0xb2a3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f2,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed65 | RETN
  test(
      "OPCODE "
      "ed65 | RETN", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x63d2,
        bc: 0x1fa1,
        de: 0x0788,
        hl: 0x881c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xf207,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = true;
    poke(0x0000, 0xed);
    poke(0x0001, 0x65);
    poke(0xf207, 0xeb);
    poke(0xf208, 0x0e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x63d2,
        bc: 0x1fa1,
        de: 0x0788,
        hl: 0x881c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xf209,
        pc: 0x0eeb);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: true, iff2: true, tStates: 14);
  });

  // Test instruction ed66 | <UNKNOWN>
  test(
      "OPCODE "
      "ed66", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4088,
        bc: 0xa7e1,
        de: 0x3ffd,
        hl: 0x919b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xd193,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x66);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4088,
        bc: 0xa7e1,
        de: 0x3ffd,
        hl: 0x919b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xd193,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed67 | RRD
  test(
      "OPCODE "
      "ed67 | RRD", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3624,
        bc: 0xb16a,
        de: 0xa4db,
        hl: 0xb9de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x67);
    poke(0xb9de, 0x93);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3324,
        bc: 0xb16a,
        de: 0xa4db,
        hl: 0xb9de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 18);
    expect(peek(47582), equals(0x69));
  });

  // Test instruction ed68 | IN L, (C)
  test(
      "OPCODE "
      "ed68 | IN L, (C)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5316,
        bc: 0x624b,
        de: 0x7311,
        hl: 0x3106,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x68);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5320,
        bc: 0x624b,
        de: 0x7311,
        hl: 0x3162,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed69 | OUT (C), L
  test(
      "OPCODE "
      "ed69 | OUT (C), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xabd8,
        bc: 0x8d2f,
        de: 0x89c7,
        hl: 0xc3d6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x69);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xabd8,
        bc: 0x8d2f,
        de: 0x89c7,
        hl: 0xc3d6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed6a | ADC HL, HL
  test(
      "OPCODE "
      "ed6a | ADC HL, HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbb5a,
        bc: 0x6fed,
        de: 0x59bb,
        hl: 0x4e40,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x6a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbb9c,
        bc: 0x6fed,
        de: 0x59bb,
        hl: 0x9c80,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction ed6b | <UNKNOWN>
  test(
      "OPCODE "
      "ed6b", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9e35,
        bc: 0xd240,
        de: 0x1998,
        hl: 0xab19,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x9275,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x6b);
    poke(0x0002, 0x98);
    poke(0x0003, 0x61);
    poke(0x6198, 0x3f);
    poke(0x6199, 0xbe);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9e35,
        bc: 0xd240,
        de: 0x1998,
        hl: 0xbe3f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x9275,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ed6c | <UNKNOWN>
  test(
      "OPCODE "
      "ed6c", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0fb1,
        bc: 0x7d5b,
        de: 0xcadb,
        hl: 0x0893,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xd983,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x6c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf1b3,
        bc: 0x7d5b,
        de: 0xcadb,
        hl: 0x0893,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xd983,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed6d | RETI
  test(
      "OPCODE "
      "ed6d | RETI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3860,
        bc: 0x42da,
        de: 0x5935,
        hl: 0xdc10,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5cd3,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x6d);
    poke(0x5cd3, 0xa9);
    poke(0x5cd4, 0x73);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3860,
        bc: 0x42da,
        de: 0x5935,
        hl: 0xdc10,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5cd5,
        pc: 0x73a9);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 14);
  });

  // Test instruction ed6e | <UNKNOWN>
  test(
      "OPCODE "
      "ed6e", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7752,
        bc: 0xbec3,
        de: 0x0457,
        hl: 0x8c95,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xa787,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x6e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7752,
        bc: 0xbec3,
        de: 0x0457,
        hl: 0x8c95,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xa787,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed6f | RLD
  test(
      "OPCODE "
      "ed6f | RLD", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x658b,
        bc: 0x7a7a,
        de: 0xecf0,
        hl: 0x403c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x6f);
    poke(0x403c, 0xc4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6c2d,
        bc: 0x7a7a,
        de: 0xecf0,
        hl: 0x403c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 18);
    expect(peek(16444), equals(0x45));
  });

  // Test instruction ed70 | IN (C)
  test(
      "OPCODE "
      "ed70 | IN (C)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc6a1,
        bc: 0xf7d6,
        de: 0xa3cb,
        hl: 0x288d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x70);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc6a1,
        bc: 0xf7d6,
        de: 0xa3cb,
        hl: 0x288d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed71 | OUT (C), 0
  test(
      "OPCODE "
      "ed71 | OUT (C), 0", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xafa0,
        bc: 0x20b3,
        de: 0x7b33,
        hl: 0x4ac1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x71);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xafa0,
        bc: 0x20b3,
        de: 0x7b33,
        hl: 0x4ac1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed72 | SBC HL, SP
  test(
      "OPCODE "
      "ed72 | SBC HL, SP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5fd9,
        bc: 0x05cb,
        de: 0x0c6c,
        hl: 0xd18b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x53db,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x72);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5f3e,
        bc: 0x05cb,
        de: 0x0c6c,
        hl: 0x7daf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x53db,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction ed73 | LD (**), SP
  test(
      "OPCODE "
      "ed73 | LD (**), SP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x41c4,
        bc: 0x763a,
        de: 0xecb0,
        hl: 0xee62,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xaed5,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x73);
    poke(0x0002, 0x2a);
    poke(0x0003, 0x79);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x41c4,
        bc: 0x763a,
        de: 0xecb0,
        hl: 0xee62,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xaed5,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
    expect(peek(31018), equals(0xd5));
    expect(peek(31019), equals(0xae));
  });

  // Test instruction ed74 | <UNKNOWN>
  test(
      "OPCODE "
      "ed74", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4454,
        bc: 0xf2d2,
        de: 0x8340,
        hl: 0x7e76,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0323,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x74);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbcbb,
        bc: 0xf2d2,
        de: 0x8340,
        hl: 0x7e76,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0323,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed75 | RETN
  test(
      "OPCODE "
      "ed75 | RETN", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7ca4,
        bc: 0x1615,
        de: 0x5d2a,
        hl: 0xa95b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x7d00,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = true;
    z80.iff2 = true;
    poke(0x0000, 0xed);
    poke(0x0001, 0x75);
    poke(0x7d00, 0xfd);
    poke(0x7d01, 0x4f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7ca4,
        bc: 0x1615,
        de: 0x5d2a,
        hl: 0xa95b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x7d02,
        pc: 0x4ffd);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: true, iff2: true, tStates: 14);
  });

  // Test instruction ed76 | <UNKNOWN>
  test(
      "OPCODE "
      "ed76", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcabf,
        bc: 0xff9a,
        de: 0xb98c,
        hl: 0xa8e6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xfe8e,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x76);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcabf,
        bc: 0xff9a,
        de: 0xb98c,
        hl: 0xa8e6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xfe8e,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed78 | IN A, (C)
  test(
      "OPCODE "
      "ed78 | IN A, (C)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x58dd,
        bc: 0xf206,
        de: 0x2d6a,
        hl: 0xaf16,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf2a1,
        bc: 0xf206,
        de: 0x2d6a,
        hl: 0xaf16,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed79 | OUT (C), A
  test(
      "OPCODE "
      "ed79 | OUT (C), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe000,
        bc: 0x4243,
        de: 0x8f7f,
        hl: 0xed90,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x79);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe000,
        bc: 0x4243,
        de: 0x8f7f,
        hl: 0xed90,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 12);
  });

  // Test instruction ed7a | ADC HL, SP
  test(
      "OPCODE "
      "ed7a | ADC HL, SP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x32fd,
        bc: 0xd819,
        de: 0xd873,
        hl: 0x8dcf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5d22,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x7a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x32b8,
        bc: 0xd819,
        de: 0xd873,
        hl: 0xeaf2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5d22,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction ed7b | LD SP, (**)
  test(
      "OPCODE "
      "ed7b | LD SP, (**)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4f97,
        bc: 0x24b7,
        de: 0xe105,
        hl: 0x1bf2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5e17,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x7b);
    poke(0x0002, 0x50);
    poke(0x0003, 0x8c);
    poke(0x8c50, 0xd8);
    poke(0x8c51, 0x48);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4f97,
        bc: 0x24b7,
        de: 0xe105,
        hl: 0x1bf2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x48d8,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction ed7c | <UNKNOWN>
  test(
      "OPCODE "
      "ed7c", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd333,
        bc: 0x29ca,
        de: 0x9622,
        hl: 0xb452,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0be6,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2d3b,
        bc: 0x29ca,
        de: 0x9622,
        hl: 0xb452,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0be6,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction ed7d | RETN
  test(
      "OPCODE "
      "ed7d | RETN", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xecb6,
        bc: 0x073e,
        de: 0xdc1e,
        hl: 0x38d9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x66f0,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = true;
    poke(0x0000, 0xed);
    poke(0x0001, 0x7d);
    poke(0x66f0, 0x4f);
    poke(0x66f1, 0xfb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xecb6,
        bc: 0x073e,
        de: 0xdc1e,
        hl: 0x38d9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x66f2,
        pc: 0xfb4f);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: true, iff2: true, tStates: 14);
  });

  // Test instruction ed7e | <UNKNOWN>
  test(
      "OPCODE "
      "ed7e", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb246,
        bc: 0x1a1a,
        de: 0x933a,
        hl: 0x4b8b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x2242,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0x7e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb246,
        bc: 0x1a1a,
        de: 0x933a,
        hl: 0x4b8b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x2242,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction eda0 | LDI
  test(
      "OPCODE "
      "eda0 | LDI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1bc9,
        bc: 0x3d11,
        de: 0x95c1,
        hl: 0xd097,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa0);
    poke(0xd097, 0xb7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1be5,
        bc: 0x3d10,
        de: 0x95c2,
        hl: 0xd098,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(38337), equals(0xb7));
  });

  // Test instruction eda1 | CPI
  test(
      "OPCODE "
      "eda1 | CPI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xecdb,
        bc: 0x7666,
        de: 0x537f,
        hl: 0x3bc3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa1);
    poke(0x3bc3, 0xb4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xec0f,
        bc: 0x7665,
        de: 0x537f,
        hl: 0x3bc4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda2 | INI
  test(
      "OPCODE "
      "eda2 | INI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0121,
        bc: 0x9a82,
        de: 0x5bbd,
        hl: 0x2666,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x019f,
        bc: 0x9982,
        de: 0x5bbd,
        hl: 0x2667,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(9830), equals(0x9a));
  });

  // Test instruction eda2_01 | INI
  test(
      "OPCODE "
      "eda2_01 | INI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0200,
        de: 0x0000,
        hl: 0x8000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0100,
        de: 0x0000,
        hl: 0x8001,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(32768), equals(0x02));
  });

  // Test instruction eda2_02 | INI
  test(
      "OPCODE "
      "eda2_02 | INI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x569a,
        de: 0x0000,
        hl: 0x8000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x559a,
        de: 0x0000,
        hl: 0x8001,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(32768), equals(0x56));
  });

  // Test instruction eda2_03 | INI
  test(
      "OPCODE "
      "eda2_03 | INI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0xabcc,
        de: 0x0000,
        hl: 0x8000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00bf,
        bc: 0xaacc,
        de: 0x0000,
        hl: 0x8001,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(32768), equals(0xab));
  });

  // Test instruction eda3 | OUTI
  test(
      "OPCODE "
      "eda3 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x42c5,
        bc: 0x6334,
        de: 0x1e28,
        hl: 0x32fa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x32fa, 0xb3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4233,
        bc: 0x6234,
        de: 0x1e28,
        hl: 0x32fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_01 | OUTI
  test(
      "OPCODE "
      "eda3_01 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0100,
        de: 0x0000,
        hl: 0x01ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01ff, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0044,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0200,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_02 | OUTI
  test(
      "OPCODE "
      "eda3_02 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0100,
        de: 0x0000,
        hl: 0x0100,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x0100, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0040,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0101,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_03 | OUTI
  test(
      "OPCODE "
      "eda3_03 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0100,
        de: 0x0000,
        hl: 0x0107,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x0107, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0044,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0108,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_04 | OUTI
  test(
      "OPCODE "
      "eda3_04 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0100,
        de: 0x0000,
        hl: 0x01ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01ff, 0x80);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0046,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0200,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_05 | OUTI
  test(
      "OPCODE "
      "eda3_05 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0100,
        de: 0x0000,
        hl: 0x01fd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01fd, 0x12);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0055,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x01fe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_06 | OUTI
  test(
      "OPCODE "
      "eda3_06 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0100,
        de: 0x0000,
        hl: 0x01fe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01fe, 0x12);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0051,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x01ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_07 | OUTI
  test(
      "OPCODE "
      "eda3_07 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0200,
        de: 0x0000,
        hl: 0x01ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01ff, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0100,
        de: 0x0000,
        hl: 0x0200,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_08 | OUTI
  test(
      "OPCODE "
      "eda3_08 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0800,
        de: 0x0000,
        hl: 0x01fe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01fe, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0004,
        bc: 0x0700,
        de: 0x0000,
        hl: 0x01ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_09 | OUTI
  test(
      "OPCODE "
      "eda3_09 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x8100,
        de: 0x0000,
        hl: 0x01ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01ff, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0080,
        bc: 0x8000,
        de: 0x0000,
        hl: 0x0200,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_10 | OUTI
  test(
      "OPCODE "
      "eda3_10 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x8200,
        de: 0x0000,
        hl: 0x01ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01ff, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0084,
        bc: 0x8100,
        de: 0x0000,
        hl: 0x0200,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda3_11 | OUTI
  test(
      "OPCODE "
      "eda3_11 | OUTI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0xa900,
        de: 0x0000,
        hl: 0x01ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa3);
    poke(0x01ff, 0x00);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00a8,
        bc: 0xa800,
        de: 0x0000,
        hl: 0x0200,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction eda8 | LDD
  test(
      "OPCODE "
      "eda8 | LDD", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2a8e,
        bc: 0x1607,
        de: 0x5938,
        hl: 0x12e8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa8);
    poke(0x12e8, 0xd8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2aa4,
        bc: 0x1606,
        de: 0x5937,
        hl: 0x12e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(22840), equals(0xd8));
  });

  // Test instruction eda9 | CPD
  test(
      "OPCODE "
      "eda9 | CPD", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1495,
        bc: 0xfb42,
        de: 0x0466,
        hl: 0x0dbe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xa9);
    poke(0x0dbe, 0x89);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x14bf,
        bc: 0xfb41,
        de: 0x0466,
        hl: 0x0dbd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction edaa | IND
  test(
      "OPCODE "
      "edaa | IND", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2042,
        bc: 0xd791,
        de: 0xa912,
        hl: 0xa533,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2097,
        bc: 0xd691,
        de: 0xa912,
        hl: 0xa532,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(42291), equals(0xd7));
  });

  // Test instruction edaa_01 | IND
  test(
      "OPCODE "
      "edaa_01 | IND", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0101,
        de: 0x0000,
        hl: 0x8000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0040,
        bc: 0x0001,
        de: 0x0000,
        hl: 0x7fff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(32768), equals(0x01));
  });

  // Test instruction edaa_02 | IND
  test(
      "OPCODE "
      "edaa_02 | IND", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x56aa,
        de: 0x0000,
        hl: 0x8000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x55aa,
        de: 0x0000,
        hl: 0x7fff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(32768), equals(0x56));
  });

  // Test instruction edaa_03 | IND
  test(
      "OPCODE "
      "edaa_03 | IND", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0xabcc,
        de: 0x0000,
        hl: 0x8000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00bf,
        bc: 0xaacc,
        de: 0x0000,
        hl: 0x7fff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(32768), equals(0xab));
  });

  // Test instruction edab | OUTD
  test(
      "OPCODE "
      "edab | OUTD", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0037,
        bc: 0xf334,
        de: 0xd3e1,
        hl: 0x199f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xab);
    poke(0x199f, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00a4,
        bc: 0xf234,
        de: 0xd3e1,
        hl: 0x199e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction edab_01 | OUTD
  test(
      "OPCODE "
      "edab_01 | OUTD", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x5800,
        de: 0x0000,
        hl: 0x007a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xab);
    poke(0x007a, 0x7f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x5700,
        de: 0x0000,
        hl: 0x0079,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction edab_02 | OUTD
  test(
      "OPCODE "
      "edab_02 | OUTD", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0xab00,
        de: 0x0000,
        hl: 0x00f1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xab);
    poke(0x00f1, 0xcd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x00bf,
        bc: 0xaa00,
        de: 0x0000,
        hl: 0x00f0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
  });

  // Test instruction edb0 | LDIR
  test(
      "OPCODE "
      "edb0 | LDIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1045,
        bc: 0x0010,
        de: 0xaad8,
        hl: 0x558e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xb0);
    poke(0x558e, 0x53);
    poke(0x558f, 0x94);
    poke(0x5590, 0x30);
    poke(0x5591, 0x05);
    poke(0x5592, 0x44);
    poke(0x5593, 0x24);
    poke(0x5594, 0x22);
    poke(0x5595, 0xb9);
    poke(0x5596, 0xe9);
    poke(0x5597, 0x77);
    poke(0x5598, 0x23);
    poke(0x5599, 0x71);
    poke(0x559a, 0xe2);
    poke(0x559b, 0x5c);
    poke(0x559c, 0xfb);
    poke(0x559d, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 331) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1049,
        bc: 0x0000,
        de: 0xaae8,
        hl: 0x559e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x20, iff1: false, iff2: false, tStates: 331);
    expect(peek(43736), equals(0x53));
    expect(peek(43737), equals(0x94));
    expect(peek(43738), equals(0x30));
    expect(peek(43739), equals(0x05));
    expect(peek(43740), equals(0x44));
    expect(peek(43741), equals(0x24));
    expect(peek(43742), equals(0x22));
    expect(peek(43743), equals(0xb9));
    expect(peek(43744), equals(0xe9));
    expect(peek(43745), equals(0x77));
    expect(peek(43746), equals(0x23));
    expect(peek(43747), equals(0x71));
    expect(peek(43748), equals(0xe2));
    expect(peek(43749), equals(0x5c));
    expect(peek(43750), equals(0xfb));
    expect(peek(43751), equals(0x49));
  });

  // Test instruction edb0_1 | LDIR
  test(
      "OPCODE "
      "edb0_1 | LDIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0002,
        de: 0xc000,
        hl: 0x8000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x4000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x4000, 0xed);
    poke(0x4001, 0xb0);
    poke(0x8000, 0x12);
    poke(0x8001, 0x34);

    // Execute machine for tState cycles
    while (z80.tStates < 37) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xc002,
        hl: 0x8002,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x4002);
    checkSpecialRegisters(
        i: 0x00, r: 0x04, iff1: false, iff2: false, tStates: 37);
    expect(peek(49152), equals(0x12));
    expect(peek(49153), equals(0x34));
  });

  // Test instruction edb0_2 | LDIR
  test(
      "OPCODE "
      "edb0_2 | LDIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0001,
        de: 0xc000,
        hl: 0x8000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x4000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x4000, 0xed);
    poke(0x4001, 0xb0);
    poke(0x8000, 0x12);
    poke(0x8001, 0x34);

    // Execute machine for tState cycles
    while (z80.tStates < 16) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0020,
        bc: 0x0000,
        de: 0xc001,
        hl: 0x8001,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x4002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(49152), equals(0x12));
  });

  // Test instruction edb1 | CPIR
  test(
      "OPCODE "
      "edb1 | CPIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf4dd,
        bc: 0x0008,
        de: 0xe4e0,
        hl: 0x9825,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xb1);
    poke(0x9825, 0x50);
    poke(0x9826, 0xe5);
    poke(0x9827, 0x41);
    poke(0x9828, 0xf4);
    poke(0x9829, 0x01);
    poke(0x982a, 0x9f);
    poke(0x982b, 0x11);
    poke(0x982c, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 79) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf447,
        bc: 0x0004,
        de: 0xe4e0,
        hl: 0x9829,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x08, iff1: false, iff2: false, tStates: 79);
  });

  // Test instruction edb1_1 | CPIR
  test(
      "OPCODE "
      "edb1_1 | CPIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf4dd,
        bc: 0x0008,
        de: 0xe4e0,
        hl: 0x9825,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x8396);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x8396, 0xed);
    poke(0x8397, 0xb1);
    poke(0x9825, 0x50);
    poke(0x9826, 0xe5);
    poke(0x9827, 0x41);
    poke(0x9828, 0xf4);
    poke(0x9829, 0x01);
    poke(0x982a, 0x9f);
    poke(0x982b, 0x11);
    poke(0x982c, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 79) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf447,
        bc: 0x0004,
        de: 0xe4e0,
        hl: 0x9829,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x8398);
    checkSpecialRegisters(
        i: 0x00, r: 0x08, iff1: false, iff2: false, tStates: 79);
  });

  // Test instruction edb1_2 | CPIR
  test(
      "OPCODE "
      "edb1_2 | CPIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf4dd,
        bc: 0x0008,
        de: 0xe4e0,
        hl: 0x9825,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x8396);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x8396, 0xed);
    poke(0x8397, 0xb1);
    poke(0x9825, 0x50);
    poke(0x9826, 0xe5);
    poke(0x9827, 0x41);
    poke(0x9828, 0xf4);
    poke(0x9829, 0x01);
    poke(0x982a, 0x9f);
    poke(0x982b, 0x11);
    poke(0x982c, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 21) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf487,
        bc: 0x0007,
        de: 0xe4e0,
        hl: 0x9826,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x8396);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 21);
  });

  // Test instruction edb2 | INIR
  test(
      "OPCODE "
      "edb2 | INIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8a34,
        bc: 0x0a40,
        de: 0xd98c,
        hl: 0x37ce,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xb2);

    // Execute machine for tState cycles
    while (z80.tStates < 205) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8a40,
        bc: 0x0040,
        de: 0xd98c,
        hl: 0x37d8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x14, iff1: false, iff2: false, tStates: 205);
    expect(peek(14286), equals(0x0a));
    expect(peek(14287), equals(0x09));
    expect(peek(14288), equals(0x08));
    expect(peek(14289), equals(0x07));
    expect(peek(14290), equals(0x06));
    expect(peek(14291), equals(0x05));
    expect(peek(14292), equals(0x04));
    expect(peek(14293), equals(0x03));
    expect(peek(14294), equals(0x02));
    expect(peek(14295), equals(0x01));
  });

  // Test instruction edb2_1 | INIR
  test(
      "OPCODE "
      "edb2_1 | INIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8a34,
        bc: 0x0a40,
        de: 0xd98c,
        hl: 0x37ce,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xb2);

    // Execute machine for tState cycles
    while (z80.tStates < 21) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8a0c,
        bc: 0x0940,
        de: 0xd98c,
        hl: 0x37cf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 21);
    expect(peek(14286), equals(0x0a));
  });

  // Test instruction edb3 | OTIR
  test(
      "OPCODE "
      "edb3 | OTIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x34ab,
        bc: 0x03e0,
        de: 0x41b9,
        hl: 0x1d7c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xb3);
    poke(0x1d7c, 0x9d);
    poke(0x1d7d, 0x24);
    poke(0x1d7e, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 58) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3453,
        bc: 0x00e0,
        de: 0x41b9,
        hl: 0x1d7f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x06, iff1: false, iff2: false, tStates: 58);
  });

  // Test instruction edb3_1 | OTIR
  test(
      "OPCODE "
      "edb3_1 | OTIR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x34ab,
        bc: 0x03e0,
        de: 0x41b9,
        hl: 0x1d7c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xb3);
    poke(0x1d7c, 0x9d);
    poke(0x1d7d, 0x24);
    poke(0x1d7e, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 21) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3417,
        bc: 0x02e0,
        de: 0x41b9,
        hl: 0x1d7d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 21);
  });

  // Test instruction edb8 | LDDR
  test(
      "OPCODE "
      "edb8 | LDDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe553,
        bc: 0x0008,
        de: 0x68e8,
        hl: 0x4dcf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xb8);
    poke(0x4dc8, 0x29);
    poke(0x4dc9, 0x85);
    poke(0x4dca, 0xa7);
    poke(0x4dcb, 0xc3);
    poke(0x4dcc, 0x55);
    poke(0x4dcd, 0x74);
    poke(0x4dce, 0x23);
    poke(0x4dcf, 0x0a);

    // Execute machine for tState cycles
    while (z80.tStates < 163) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe569,
        bc: 0x0000,
        de: 0x68e0,
        hl: 0x4dc7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x10, iff1: false, iff2: false, tStates: 163);
    expect(peek(26849), equals(0x29));
    expect(peek(26850), equals(0x85));
    expect(peek(26851), equals(0xa7));
    expect(peek(26852), equals(0xc3));
    expect(peek(26853), equals(0x55));
    expect(peek(26854), equals(0x74));
    expect(peek(26855), equals(0x23));
    expect(peek(26856), equals(0x0a));
  });

  // Test instruction edb8_1 | LDDR
  test(
      "OPCODE "
      "edb8_1 | LDDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0002,
        de: 0xb5d7,
        hl: 0x6af0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x1ec1);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x1ec1, 0xed);
    poke(0x1ec2, 0xb8);
    poke(0x6aef, 0xd6);
    poke(0x6af0, 0x70);

    // Execute machine for tState cycles
    while (z80.tStates < 37) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0020,
        bc: 0x0000,
        de: 0xb5d5,
        hl: 0x6aee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x1ec3);
    checkSpecialRegisters(
        i: 0x00, r: 0x04, iff1: false, iff2: false, tStates: 37);
    expect(peek(46550), equals(0xd6));
    expect(peek(46551), equals(0x70));
  });

  // Test instruction edb8_2 | LDDR
  test(
      "OPCODE "
      "edb8_2 | LDDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0001,
        de: 0xb5d7,
        hl: 0x6af0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x1ec1);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x1ec1, 0xed);
    poke(0x1ec2, 0xb8);
    poke(0x6aef, 0xd6);
    poke(0x6af0, 0x70);

    // Execute machine for tState cycles
    while (z80.tStates < 16) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0xb5d6,
        hl: 0x6aef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x1ec3);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 16);
    expect(peek(46551), equals(0x70));
  });

  // Test instruction edb9 | CPDR
  test(
      "OPCODE "
      "edb9 | CPDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xffcd,
        bc: 0x0008,
        de: 0xa171,
        hl: 0xc749,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xb9);
    poke(0xc742, 0xc6);
    poke(0xc743, 0x09);
    poke(0xc744, 0x85);
    poke(0xc745, 0xec);
    poke(0xc746, 0x5a);
    poke(0xc747, 0x01);
    poke(0xc748, 0x4e);
    poke(0xc749, 0x6c);

    // Execute machine for tState cycles
    while (z80.tStates < 163) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff0b,
        bc: 0x0000,
        de: 0xa171,
        hl: 0xc741,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x10, iff1: false, iff2: false, tStates: 163);
  });

  // Test instruction edb9_1 | CPDR
  test(
      "OPCODE "
      "edb9_1 | CPDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xffcd,
        bc: 0x0008,
        de: 0xa171,
        hl: 0xc749,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x7a45);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x7a45, 0xed);
    poke(0x7a46, 0xb9);
    poke(0xc742, 0xc6);
    poke(0xc743, 0x09);
    poke(0xc744, 0x85);
    poke(0xc745, 0xec);
    poke(0xc746, 0x5a);
    poke(0xc747, 0x01);
    poke(0xc748, 0x4e);
    poke(0xc749, 0x6c);

    // Execute machine for tState cycles
    while (z80.tStates < 163) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xff0b,
        bc: 0x0000,
        de: 0xa171,
        hl: 0xc741,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x7a47);
    checkSpecialRegisters(
        i: 0x00, r: 0x10, iff1: false, iff2: false, tStates: 163);
  });

  // Test instruction edb9_2 | CPDR
  test(
      "OPCODE "
      "edb9_2 | CPDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xffcd,
        bc: 0x0008,
        de: 0xa171,
        hl: 0xc749,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x7a45);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x7a45, 0xed);
    poke(0x7a46, 0xb9);
    poke(0xc742, 0xc6);
    poke(0xc743, 0x09);
    poke(0xc744, 0x85);
    poke(0xc745, 0xec);
    poke(0xc746, 0x5a);
    poke(0xc747, 0x01);
    poke(0xc748, 0x4e);
    poke(0xc749, 0x6c);

    // Execute machine for tState cycles
    while (z80.tStates < 21) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xffa7,
        bc: 0x0007,
        de: 0xa171,
        hl: 0xc748,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x7a45);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 21);
  });

  // Test instruction edba | INDR
  test(
      "OPCODE "
      "edba | INDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2567,
        bc: 0x069f,
        de: 0xd40d,
        hl: 0x6b55,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xba);

    // Execute machine for tState cycles
    while (z80.tStates < 121) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2540,
        bc: 0x009f,
        de: 0xd40d,
        hl: 0x6b4f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x0c, iff1: false, iff2: false, tStates: 121);
    expect(peek(27472), equals(0x01));
    expect(peek(27473), equals(0x02));
    expect(peek(27474), equals(0x03));
    expect(peek(27475), equals(0x04));
    expect(peek(27476), equals(0x05));
    expect(peek(27477), equals(0x06));
  });

  // Test instruction edba_1 | INDR
  test(
      "OPCODE "
      "edba_1 | INDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2567,
        bc: 0x069f,
        de: 0xd40d,
        hl: 0x6b55,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xba);

    // Execute machine for tState cycles
    while (z80.tStates < 21) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2500,
        bc: 0x059f,
        de: 0xd40d,
        hl: 0x6b54,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 21);
    expect(peek(27477), equals(0x06));
  });

  // Test instruction edbb | OTDR
  test(
      "OPCODE "
      "edbb | OTDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x09c4,
        bc: 0x043b,
        de: 0xbe49,
        hl: 0x1dd0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xbb);
    poke(0x1dcd, 0xf9);
    poke(0x1dce, 0x71);
    poke(0x1dcf, 0xc5);
    poke(0x1dd0, 0xb6);

    // Execute machine for tState cycles
    while (z80.tStates < 79) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0957,
        bc: 0x003b,
        de: 0xbe49,
        hl: 0x1dcc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x08, iff1: false, iff2: false, tStates: 79);
  });

  // Test instruction edbb_1 | OTDR
  test(
      "OPCODE "
      "edbb_1 | OTDR", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x09c4,
        bc: 0x043b,
        de: 0xbe49,
        hl: 0x1dd0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xed);
    poke(0x0001, 0xbb);
    poke(0x1dcd, 0xf9);
    poke(0x1dce, 0x71);
    poke(0x1dcf, 0xc5);
    poke(0x1dd0, 0xb6);

    // Execute machine for tState cycles
    while (z80.tStates < 21) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0917,
        bc: 0x033b,
        de: 0xbe49,
        hl: 0x1dcf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 21);
  });

  // Test instruction ee | XOR *
  test(
      "OPCODE "
      "ee | XOR *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3e00,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xee);
    poke(0x0001, 0xd0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xeeac,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction ef | RST 28h
  test(
      "OPCODE "
      "ef | RST 28h", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5507,
        pc: 0x6d33);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x6d33, 0xef);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5505,
        pc: 0x0028);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(21765), equals(0x34));
    expect(peek(21766), equals(0x6d));
  });

  // Test instruction f0_1 | RET P
  test(
      "OPCODE "
      "f0_1 | RET P", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0018,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf0);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0018,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f9,
        pc: 0xafe9);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction f0_2 | RET P
  test(
      "OPCODE "
      "f0_2 | RET P", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf0);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 5);
  });

  // Test instruction f1 | POP AF
  test(
      "OPCODE "
      "f1 | POP AF", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4143,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf1);
    poke(0x4143, 0xce);
    poke(0x4144, 0xe8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe8ce,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x4145,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction f2_1 | JP P, **
  test(
      "OPCODE "
      "f2_1 | JP P, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0007,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf2);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0007,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xe11b);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction f2_2 | JP P, **
  test(
      "OPCODE "
      "f2_2 | JP P, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf2);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction f3 | DI
  test(
      "OPCODE "
      "f3 | DI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = true;
    z80.iff2 = true;
    poke(0x0000, 0xf3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 4);
  });

  // Test instruction f4_1 | CALL P, **
  test(
      "OPCODE "
      "f4_1 | CALL P, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf4);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5696,
        pc: 0x9c61);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(22166), equals(0x03));
    expect(peek(22167), equals(0x00));
  });

  // Test instruction f4_2 | CALL P, **
  test(
      "OPCODE "
      "f4_2 | CALL P, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x008e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf4);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x008e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction f5 | PUSH AF
  test(
      "OPCODE "
      "f5 | PUSH AF", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x53e3,
        bc: 0x1459,
        de: 0x775f,
        hl: 0x1a2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xec12,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x53e3,
        bc: 0x1459,
        de: 0x775f,
        hl: 0x1a2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xec10,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(60432), equals(0xe3));
    expect(peek(60433), equals(0x53));
  });

  // Test instruction f6 | OR *
  test(
      "OPCODE "
      "f6 | OR *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0600,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf6);
    poke(0x0001, 0xa7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa7a0,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction f7 | RST 30h
  test(
      "OPCODE "
      "f7 | RST 30h", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5507,
        pc: 0x6d33);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x6d33, 0xf7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5505,
        pc: 0x0030);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(21765), equals(0x34));
    expect(peek(21766), equals(0x6d));
  });

  // Test instruction f8_1 | RET M
  test(
      "OPCODE "
      "f8_1 | RET M", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0018,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf8);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0018,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 5);
  });

  // Test instruction f8_2 | RET M
  test(
      "OPCODE "
      "f8_2 | RET M", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f7,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf8);
    poke(0x43f7, 0xe9);
    poke(0x43f8, 0xaf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0098,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x43f9,
        pc: 0xafe9);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
  });

  // Test instruction f9 | LD SP, HL
  test(
      "OPCODE "
      "f9 | LD SP, HL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xce32,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xf9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0xce32,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0xce32,
        pc: 0x0001);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 6);
  });

  // Test instruction fa_1 | JP M, **
  test(
      "OPCODE "
      "fa_1 | JP M, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfa);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0087,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0xe11b);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction fa_2 | JP M, **
  test(
      "OPCODE "
      "fa_2 | JP M, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0007,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfa);
    poke(0x0001, 0x1b);
    poke(0x0002, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0007,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction fb | EI
  test(
      "OPCODE "
      "fb | EI", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0001);
    checkSpecialRegisters(i: 0x00, r: 0x01, iff1: true, iff2: true, tStates: 4);
  });

  // Test instruction fc_1 | CALL M, **
  test(
      "OPCODE "
      "fc_1 | CALL M, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x008e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfc);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x008e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5696,
        pc: 0x9c61);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 17);
    expect(peek(22166), equals(0x03));
    expect(peek(22167), equals(0x00));
  });

  // Test instruction fc_2 | CALL M, **
  test(
      "OPCODE "
      "fc_2 | CALL M, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfc);
    poke(0x0001, 0x61);
    poke(0x0002, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x000e,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5698,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction fd09 | ADD IY, BC
  test(
      "OPCODE "
      "fd09 | ADD IY, BC", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x466a,
        bc: 0xa623,
        de: 0xbab2,
        hl: 0xd788,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc9e8,
        iy: 0xf698,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x09);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4649,
        bc: 0xa623,
        de: 0xbab2,
        hl: 0xd788,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc9e8,
        iy: 0x9cbb,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction fd19 | ADD IY, DE
  test(
      "OPCODE "
      "fd19 | ADD IY, DE", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb3e5,
        bc: 0x5336,
        de: 0x76cb,
        hl: 0x54e2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb9ce,
        iy: 0x8624,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x19);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb3ec,
        bc: 0x5336,
        de: 0x76cb,
        hl: 0x54e2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb9ce,
        iy: 0xfcef,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction fd21 | LD IY, **
  test(
      "OPCODE "
      "fd21 | LD IY, **", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc924,
        bc: 0x5c83,
        de: 0xe0e2,
        hl: 0xeddb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6e9f,
        iy: 0xba55,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x21);
    poke(0x0002, 0x46);
    poke(0x0003, 0x47);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc924,
        bc: 0x5c83,
        de: 0xe0e2,
        hl: 0xeddb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6e9f,
        iy: 0x4746,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 14);
  });

  // Test instruction fd22 | LD (**), IY
  test(
      "OPCODE "
      "fd22 | LD (**), IY", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1235,
        bc: 0xf0b6,
        de: 0xb74c,
        hl: 0xcc9f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8b00,
        iy: 0x81e4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x22);
    poke(0x0002, 0x9a);
    poke(0x0003, 0xe2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1235,
        bc: 0xf0b6,
        de: 0xb74c,
        hl: 0xcc9f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8b00,
        iy: 0x81e4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
    expect(peek(58010), equals(0xe4));
    expect(peek(58011), equals(0x81));
  });

  // Test instruction fd23 | INC IY
  test(
      "OPCODE "
      "fd23 | INC IY", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x69f2,
        bc: 0xc1d3,
        de: 0x0f6f,
        hl: 0x2169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe39e,
        iy: 0x2605,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x23);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x69f2,
        bc: 0xc1d3,
        de: 0x0f6f,
        hl: 0x2169,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe39e,
        iy: 0x2606,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction fd24 | INC IYH
  test(
      "UNDOCUMENTED "
      "fd24 | INC IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5554,
        bc: 0x9684,
        de: 0xd36a,
        hl: 0xdac3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7803,
        iy: 0x6434,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x24);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5520,
        bc: 0x9684,
        de: 0xd36a,
        hl: 0xdac3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7803,
        iy: 0x6534,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd25 | <UNKNOWN>
  test(
      "UNDOCUMENTED "
      "fd25", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcd0b,
        bc: 0xb5e4,
        de: 0xa754,
        hl: 0x9526,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3dcb,
        iy: 0x03b2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x25);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcd03,
        bc: 0xb5e4,
        de: 0xa754,
        hl: 0x9526,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3dcb,
        iy: 0x02b2,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd26 | LD IYH, *
  test(
      "UNDOCUMENTED "
      "fd26 | LD IYH, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2452,
        bc: 0x300b,
        de: 0xb4a1,
        hl: 0x929d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc259,
        iy: 0x3f30,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x26);
    poke(0x0002, 0x77);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2452,
        bc: 0x300b,
        de: 0xb4a1,
        hl: 0x929d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc259,
        iy: 0x7730,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 11);
  }, tags: 'undocumented');

  // Test instruction fd29 | ADD IY, IY
  test(
      "OPCODE "
      "fd29 | ADD IY, IY", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5812,
        bc: 0x49d0,
        de: 0xec95,
        hl: 0x011c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xec6c,
        iy: 0x594c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x29);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5830,
        bc: 0x49d0,
        de: 0xec95,
        hl: 0x011c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xec6c,
        iy: 0xb298,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction fd2a | LD IY, (**)
  test(
      "OPCODE "
      "fd2a | LD IY, (**)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0f82,
        bc: 0x3198,
        de: 0x87e3,
        hl: 0x7c1c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1bb4,
        iy: 0xeb1a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x2a);
    poke(0x0002, 0x91);
    poke(0x0003, 0xf9);
    poke(0xf991, 0x92);
    poke(0xf992, 0xbf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0f82,
        bc: 0x3198,
        de: 0x87e3,
        hl: 0x7c1c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1bb4,
        iy: 0xbf92,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fd2b | DEC IY
  test(
      "OPCODE "
      "fd2b | DEC IY", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xab27,
        bc: 0x942f,
        de: 0x82fa,
        hl: 0x6f2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9438,
        iy: 0xebbc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x2b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xab27,
        bc: 0x942f,
        de: 0x82fa,
        hl: 0x6f2f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9438,
        iy: 0xebbb,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction fd2c | INC IYL
  test(
      "UNDOCUMENTED "
      "fd2c | INC IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x665d,
        bc: 0x0ab1,
        de: 0x5656,
        hl: 0xe5a9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5fb9,
        iy: 0x4df7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x2c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x66a9,
        bc: 0x0ab1,
        de: 0x5656,
        hl: 0xe5a9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5fb9,
        iy: 0x4df8,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd2d | <UNKNOWN>
  test(
      "UNDOCUMENTED "
      "fd2d", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x32fb,
        bc: 0xf78a,
        de: 0xb906,
        hl: 0x31d0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc72a,
        iy: 0xe91c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x2d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x320b,
        bc: 0xf78a,
        de: 0xb906,
        hl: 0x31d0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc72a,
        iy: 0xe91b,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd2e | LD IXL, *
  test(
      "UNDOCUMENTED "
      "fd2e | LD IXL, *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2114,
        bc: 0x4923,
        de: 0x6e65,
        hl: 0x006c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xda39,
        iy: 0xc0cb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x2e);
    poke(0x0002, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2114,
        bc: 0x4923,
        de: 0x6e65,
        hl: 0x006c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xda39,
        iy: 0xc049,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 11);
  }, tags: 'undocumented');

  // Test instruction fd34 | INC (IY+*)
  test(
      "OPCODE "
      "fd34 | INC (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd56a,
        bc: 0x6f24,
        de: 0x7df7,
        hl: 0x74f0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x365a,
        iy: 0xefc4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x34);
    poke(0x0002, 0xb8);
    poke(0xef7c, 0xe0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd5a0,
        bc: 0x6f24,
        de: 0x7df7,
        hl: 0x74f0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x365a,
        iy: 0xefc4,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61308), equals(0xe1));
  });

  // Test instruction fd35 | DEC (IY+*)
  test(
      "OPCODE "
      "fd35 | DEC (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8cda,
        bc: 0x35d8,
        de: 0x7c1a,
        hl: 0x1c0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x62bb,
        iy: 0xaec6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x35);
    poke(0x0002, 0xab);
    poke(0xae71, 0xa6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8ca2,
        bc: 0x35d8,
        de: 0x7c1a,
        hl: 0x1c0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x62bb,
        iy: 0xaec6,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(44657), equals(0xa5));
  });

  // Test instruction fd36 | LD (IY+*), *
  test(
      "OPCODE "
      "fd36 | LD (IY+*), *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe0f9,
        bc: 0xae1f,
        de: 0x4aef,
        hl: 0xc9d5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc0db,
        iy: 0xbdd4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x36);
    poke(0x0002, 0x81);
    poke(0x0003, 0xc5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe0f9,
        bc: 0xae1f,
        de: 0x4aef,
        hl: 0xc9d5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc0db,
        iy: 0xbdd4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(48469), equals(0xc5));
  });

  // Test instruction fd39 | ADD IY, SP
  test(
      "OPCODE "
      "fd39 | ADD IY, SP", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2603,
        bc: 0x726f,
        de: 0x9c7f,
        hl: 0xcd46,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdc45,
        iy: 0x54d5,
        sp: 0xdc57,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x39);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2631,
        bc: 0x726f,
        de: 0x9c7f,
        hl: 0xcd46,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdc45,
        iy: 0x312c,
        sp: 0xdc57,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
  });

  // Test instruction fd44 | LD B, IYH
  test(
      "UNDOCUMENTED "
      "fd44 | LD B, IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0e58,
        bc: 0x7192,
        de: 0x3580,
        hl: 0x9be4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1b79,
        iy: 0x685e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0e58,
        bc: 0x6892,
        de: 0x3580,
        hl: 0x9be4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1b79,
        iy: 0x685e,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd45 | LD B, IYL
  test(
      "UNDOCUMENTED "
      "fd45 | LD B, IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6555,
        bc: 0xa488,
        de: 0x5ae8,
        hl: 0xc948,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd7b8,
        iy: 0xa177,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x45);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6555,
        bc: 0x7788,
        de: 0x5ae8,
        hl: 0xc948,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd7b8,
        iy: 0xa177,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd46 | LD B, (IY+*)
  test(
      "OPCODE "
      "fd46 | LD B, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x87f3,
        bc: 0x17d5,
        de: 0x5eea,
        hl: 0x830b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdcee,
        iy: 0x3afc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x46);
    poke(0x0002, 0x4d);
    poke(0x3b49, 0xc9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x87f3,
        bc: 0xc9d5,
        de: 0x5eea,
        hl: 0x830b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdcee,
        iy: 0x3afc,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd4c | LD C, IYH
  test(
      "UNDOCUMENTED "
      "fd4c | LD C, IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7e6b,
        bc: 0xbd4b,
        de: 0x24b6,
        hl: 0xff94,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x862d,
        iy: 0x01d0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x4c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7e6b,
        bc: 0xbd01,
        de: 0x24b6,
        hl: 0xff94,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x862d,
        iy: 0x01d0,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd4d | LD C, IYL
  test(
      "UNDOCUMENTED "
      "fd4d | LD C, IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x50cf,
        bc: 0xe3fe,
        de: 0x998e,
        hl: 0xdba2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc4f5,
        iy: 0xc7c9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x4d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x50cf,
        bc: 0xe3c9,
        de: 0x998e,
        hl: 0xdba2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc4f5,
        iy: 0xc7c9,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd4e | LD C, (IY+*)
  test(
      "OPCODE "
      "fd4e | LD C, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2c0f,
        bc: 0x69d7,
        de: 0x748a,
        hl: 0x9290,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x904f,
        iy: 0xbb9a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x4e);
    poke(0x0002, 0x67);
    poke(0xbc01, 0x9d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2c0f,
        bc: 0x699d,
        de: 0x748a,
        hl: 0x9290,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x904f,
        iy: 0xbb9a,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd54 | LD D, IYH
  test(
      "UNDOCUMENTED "
      "fd54 | LD D, IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd7f9,
        bc: 0xf65b,
        de: 0xb001,
        hl: 0xd4c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4b8e,
        iy: 0xd437,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x54);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd7f9,
        bc: 0xf65b,
        de: 0xd401,
        hl: 0xd4c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4b8e,
        iy: 0xd437,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd55 | LD D, IYL
  test(
      "UNDOCUMENTED "
      "fd55 | LD D, IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xab98,
        bc: 0xfdab,
        de: 0x254a,
        hl: 0x010e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x126b,
        iy: 0x13a9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x55);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xab98,
        bc: 0xfdab,
        de: 0xa94a,
        hl: 0x010e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x126b,
        iy: 0x13a9,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd56 | LD D, (IY+*)
  test(
      "OPCODE "
      "fd56 | LD D, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd3e8,
        bc: 0xdf10,
        de: 0x5442,
        hl: 0xb641,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa5a0,
        iy: 0xfda2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x56);
    poke(0x0002, 0xce);
    poke(0xfd70, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd3e8,
        bc: 0xdf10,
        de: 0x7842,
        hl: 0xb641,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa5a0,
        iy: 0xfda2,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd5c | LD E, IYH
  test(
      "UNDOCUMENTED "
      "fd5c | LD E, IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x11d5,
        bc: 0xc489,
        de: 0xe220,
        hl: 0x434e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3244,
        iy: 0xd8bb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x5c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x11d5,
        bc: 0xc489,
        de: 0xe2d8,
        hl: 0x434e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3244,
        iy: 0xd8bb,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd5d | LD E, IYL
  test(
      "UNDOCUMENTED "
      "fd5d | LD E, IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe945,
        bc: 0xdbae,
        de: 0x32ea,
        hl: 0x4f7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfa56,
        iy: 0x074e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x5d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe945,
        bc: 0xdbae,
        de: 0x324e,
        hl: 0x4f7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfa56,
        iy: 0x074e,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd5e | LD E, (IY+*)
  test(
      "OPCODE "
      "fd5e | LD E, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6f3b,
        bc: 0xe9dc,
        de: 0x7a06,
        hl: 0x14f3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xec76,
        iy: 0x8aaa,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x5e);
    poke(0x0002, 0xc6);
    poke(0x8a70, 0x8c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6f3b,
        bc: 0xe9dc,
        de: 0x7a8c,
        hl: 0x14f3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xec76,
        iy: 0x8aaa,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd60 | LD IYH, B
  test(
      "UNDOCUMENTED "
      "fd60 | LD IYH, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8579,
        bc: 0x005d,
        de: 0xd9ee,
        hl: 0xfaee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x382d,
        iy: 0x2f95,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x60);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8579,
        bc: 0x005d,
        de: 0xd9ee,
        hl: 0xfaee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x382d,
        iy: 0x0095,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd61 | LD IYH, C
  test(
      "UNDOCUMENTED "
      "fd61 | LD IYH, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5682,
        bc: 0xdbc3,
        de: 0xb495,
        hl: 0x9799,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x85b2,
        iy: 0x3c1e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5682,
        bc: 0xdbc3,
        de: 0xb495,
        hl: 0x9799,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x85b2,
        iy: 0xc31e,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd62 | LD IYH, D
  test(
      "UNDOCUMENTED "
      "fd62 | LD IYH, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x906b,
        bc: 0xf52e,
        de: 0xf3d8,
        hl: 0x1e8c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xddba,
        iy: 0x9a02,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x62);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x906b,
        bc: 0xf52e,
        de: 0xf3d8,
        hl: 0x1e8c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xddba,
        iy: 0xf302,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd63 | LD IYH, E
  test(
      "UNDOCUMENTED "
      "fd63 | LD IYH, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9d59,
        bc: 0xbeb9,
        de: 0xd826,
        hl: 0x0eaa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4290,
        iy: 0xa4b9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x63);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9d59,
        bc: 0xbeb9,
        de: 0xd826,
        hl: 0x0eaa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4290,
        iy: 0x26b9,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd64 | LD IYH, H
  test(
      "UNDOCUMENTED "
      "fd64 | LD IYH, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7b0e,
        bc: 0xe394,
        de: 0x8a25,
        hl: 0xcddf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9784,
        iy: 0x2116,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x64);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7b0e,
        bc: 0xe394,
        de: 0x8a25,
        hl: 0xcddf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9784,
        iy: 0x2116,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd65 | LD IYH, L
  test(
      "UNDOCUMENTED "
      "fd65 | LD IYH, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb827,
        bc: 0xeb4f,
        de: 0xf666,
        hl: 0xc52a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6206,
        iy: 0x831f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x65);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb827,
        bc: 0xeb4f,
        de: 0xf666,
        hl: 0xc52a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6206,
        iy: 0x1f1f,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd66 | LD H, (IY+*)
  test(
      "OPCODE "
      "fd66 | LD H, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9129,
        bc: 0xe4ee,
        de: 0xe3a3,
        hl: 0x86ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4d93,
        iy: 0x5b24,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x66);
    poke(0x0002, 0x80);
    poke(0x5aa4, 0x77);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9129,
        bc: 0xe4ee,
        de: 0xe3a3,
        hl: 0x77ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4d93,
        iy: 0x5b24,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd67 | LD IYH, A
  test(
      "UNDOCUMENTED "
      "fd67 | LD IYH, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdb7a,
        bc: 0xb40b,
        de: 0x7b58,
        hl: 0x49fd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x266f,
        iy: 0x9e7b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x67);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdb7a,
        bc: 0xb40b,
        de: 0x7b58,
        hl: 0x49fd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x266f,
        iy: 0xdb7b,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd68 | LD IYL, B
  test(
      "UNDOCUMENTED "
      "fd68 | LD IYL, B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4d1d,
        bc: 0x4fd9,
        de: 0x783e,
        hl: 0x0745,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0c3d,
        iy: 0x82b5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x68);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4d1d,
        bc: 0x4fd9,
        de: 0x783e,
        hl: 0x0745,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0c3d,
        iy: 0x824f,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd69 | LD IYL, C
  test(
      "UNDOCUMENTED "
      "fd69 | LD IYL, C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1589,
        bc: 0x5ceb,
        de: 0xb5db,
        hl: 0x922a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3c3a,
        iy: 0xdc98,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x69);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1589,
        bc: 0x5ceb,
        de: 0xb5db,
        hl: 0x922a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3c3a,
        iy: 0xdceb,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd6a | LD IYL, D
  test(
      "UNDOCUMENTED "
      "fd6a | LD IYL, D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x607a,
        bc: 0xe035,
        de: 0x5bb9,
        hl: 0xdac0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfc04,
        iy: 0xb5b7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x6a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x607a,
        bc: 0xe035,
        de: 0x5bb9,
        hl: 0xdac0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfc04,
        iy: 0xb55b,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd6b | LD IYL, E
  test(
      "UNDOCUMENTED "
      "fd6b | LD IYL, E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdb2a,
        bc: 0xe244,
        de: 0x1182,
        hl: 0x096f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x198e,
        iy: 0x91a6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x6b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdb2a,
        bc: 0xe244,
        de: 0x1182,
        hl: 0x096f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x198e,
        iy: 0x9182,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd6c | LD IYL, H
  test(
      "UNDOCUMENTED "
      "fd6c | LD IYL, H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa0be,
        bc: 0x34ef,
        de: 0x8fcd,
        hl: 0x40a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4481,
        iy: 0xc215,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x6c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa0be,
        bc: 0x34ef,
        de: 0x8fcd,
        hl: 0x40a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4481,
        iy: 0xc2c2,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd6d | LD IYL, L
  test(
      "UNDOCUMENTED "
      "fd6d | LD IYL, L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfdfc,
        bc: 0x727a,
        de: 0xb839,
        hl: 0x50a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe782,
        iy: 0x02e5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x6d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfdfc,
        bc: 0x727a,
        de: 0xb839,
        hl: 0x50a6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe782,
        iy: 0x02e5,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd6e | LD L, (IY+*)
  test(
      "OPCODE "
      "fd6e | LD L, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcfd4,
        bc: 0x6ef1,
        de: 0xc07d,
        hl: 0xeb96,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb0f9,
        iy: 0xb0a3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x6e);
    poke(0x0002, 0x78);
    poke(0xb11b, 0xf8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcfd4,
        bc: 0x6ef1,
        de: 0xc07d,
        hl: 0xebf8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb0f9,
        iy: 0xb0a3,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd6f | LD IYL, A
  test(
      "UNDOCUMENTED "
      "fd6f | LD IYL, A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8e1d,
        bc: 0xa138,
        de: 0xf20a,
        hl: 0x298e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb600,
        iy: 0x0cf7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x6f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8e1d,
        bc: 0xa138,
        de: 0xf20a,
        hl: 0x298e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb600,
        iy: 0x0c8e,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd70 | LD (IY+*), B
  test(
      "OPCODE "
      "fd70 | LD (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2677,
        bc: 0x33c5,
        de: 0xc0dc,
        hl: 0x262f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd3dc,
        iy: 0x23a1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x70);
    poke(0x0002, 0x53);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2677,
        bc: 0x33c5,
        de: 0xc0dc,
        hl: 0x262f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd3dc,
        iy: 0x23a1,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(9204), equals(0x33));
  });

  // Test instruction fd71 | LD (IY+*), C
  test(
      "OPCODE "
      "fd71 | LD (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x892e,
        bc: 0x04ae,
        de: 0xd67f,
        hl: 0x81ec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7757,
        iy: 0xbfab,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x71);
    poke(0x0002, 0xb4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x892e,
        bc: 0x04ae,
        de: 0xd67f,
        hl: 0x81ec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7757,
        iy: 0xbfab,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(48991), equals(0xae));
  });

  // Test instruction fd72 | LD (IY+*), D
  test(
      "OPCODE "
      "fd72 | LD (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd2dc,
        bc: 0xc23c,
        de: 0xdd54,
        hl: 0x6559,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb32b,
        iy: 0x7c80,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x72);
    poke(0x0002, 0xe3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd2dc,
        bc: 0xc23c,
        de: 0xdd54,
        hl: 0x6559,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb32b,
        iy: 0x7c80,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(31843), equals(0xdd));
  });

  // Test instruction fd73 | LD (IY+*), E
  test(
      "OPCODE "
      "fd73 | LD (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x49ef,
        bc: 0xbff2,
        de: 0x8409,
        hl: 0x02dd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xaf95,
        iy: 0x8762,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x73);
    poke(0x0002, 0x17);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x49ef,
        bc: 0xbff2,
        de: 0x8409,
        hl: 0x02dd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xaf95,
        iy: 0x8762,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(34681), equals(0x09));
  });

  // Test instruction fd74 | LD (IY+*), H
  test(
      "OPCODE "
      "fd74 | LD (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9479,
        bc: 0x9817,
        de: 0xfa2e,
        hl: 0x1fe0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa395,
        iy: 0x92db,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x74);
    poke(0x0002, 0xf6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9479,
        bc: 0x9817,
        de: 0xfa2e,
        hl: 0x1fe0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa395,
        iy: 0x92db,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(37585), equals(0x1f));
  });

  // Test instruction fd75 | LD (IY+*), L
  test(
      "OPCODE "
      "fd75 | LD (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc8d6,
        bc: 0x6aa4,
        de: 0x180e,
        hl: 0xe37b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x02cf,
        iy: 0x1724,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x75);
    poke(0x0002, 0xab);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc8d6,
        bc: 0x6aa4,
        de: 0x180e,
        hl: 0xe37b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x02cf,
        iy: 0x1724,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(5839), equals(0x7b));
  });

  // Test instruction fd77 | LD (IY+*), A
  test(
      "OPCODE "
      "fd77 | LD (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6f9e,
        bc: 0x7475,
        de: 0x78ad,
        hl: 0x2b8c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc6b7,
        iy: 0x6b4d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x77);
    poke(0x0002, 0xf7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6f9e,
        bc: 0x7475,
        de: 0x78ad,
        hl: 0x2b8c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc6b7,
        iy: 0x6b4d,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
    expect(peek(27460), equals(0x6f));
  });

  // Test instruction fd7c | LD A, IYH
  test(
      "UNDOCUMENTED "
      "fd7c | LD A, IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf228,
        bc: 0x93fc,
        de: 0xa3d4,
        hl: 0xdc9e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x21ac,
        iy: 0xc617,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc628,
        bc: 0x93fc,
        de: 0xa3d4,
        hl: 0xdc9e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x21ac,
        iy: 0xc617,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd7d | LD A, IYL
  test(
      "UNDOCUMENTED "
      "fd7d | LD A, IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x93e5,
        bc: 0x3cbe,
        de: 0x02c3,
        hl: 0x26c2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xca81,
        iy: 0x92b9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x7d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb9e5,
        bc: 0x3cbe,
        de: 0x02c3,
        hl: 0x26c2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xca81,
        iy: 0x92b9,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd7e | LD A, (IY+*)
  test(
      "OPCODE "
      "fd7e | LD A, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1596,
        bc: 0xdaba,
        de: 0x147b,
        hl: 0xf362,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7110,
        iy: 0xd45f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x7e);
    poke(0x0002, 0xe4);
    poke(0xd443, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xaa96,
        bc: 0xdaba,
        de: 0x147b,
        hl: 0xf362,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7110,
        iy: 0xd45f,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd84 | ADD A, IYH
  test(
      "UNDOCUMENTED "
      "fd84 | ADD A, IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbfba,
        bc: 0x7cae,
        de: 0xc4da,
        hl: 0x7aee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x43ee,
        iy: 0xc08e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x84);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7f2d,
        bc: 0x7cae,
        de: 0xc4da,
        hl: 0x7aee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x43ee,
        iy: 0xc08e,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd85 | ADD A, IYL
  test(
      "UNDOCUMENTED "
      "fd85 | ADD A, IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x52dd,
        bc: 0x1dea,
        de: 0x324f,
        hl: 0x84e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe7a8,
        iy: 0xf799,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x85);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xeba8,
        bc: 0x1dea,
        de: 0x324f,
        hl: 0x84e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe7a8,
        iy: 0xf799,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd86 | ADD A, (IY+*)
  test(
      "OPCODE "
      "fd86 | ADD A, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfc9c,
        bc: 0xb882,
        de: 0x43f9,
        hl: 0x3e15,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9781,
        iy: 0x8b33,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x86);
    poke(0x0002, 0xce);
    poke(0x8b01, 0xe1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdd89,
        bc: 0xb882,
        de: 0x43f9,
        hl: 0x3e15,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9781,
        iy: 0x8b33,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd8c | ADC A, IYH
  test(
      "UNDOCUMENTED "
      "fd8c | ADC A, IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfd9c,
        bc: 0x42b1,
        de: 0x5e8a,
        hl: 0x081c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcb58,
        iy: 0x3b4e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x8c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3839,
        bc: 0x42b1,
        de: 0x5e8a,
        hl: 0x081c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcb58,
        iy: 0x3b4e,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd8d | ADC A, IYL
  test(
      "UNDOCUMENTED "
      "fd8d | ADC A, IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9301,
        bc: 0x7750,
        de: 0x8ad6,
        hl: 0x295c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x695c,
        iy: 0x99fb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8f89,
        bc: 0x7750,
        de: 0x8ad6,
        hl: 0x295c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x695c,
        iy: 0x99fb,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd8e | ADC A, (IY+*)
  test(
      "OPCODE "
      "fd8e | ADC A, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x41ee,
        bc: 0x398f,
        de: 0xf6dc,
        hl: 0x06f3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf34a,
        iy: 0x1aa2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x8e);
    poke(0x0002, 0x78);
    poke(0x1b1a, 0xc0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0101,
        bc: 0x398f,
        de: 0xf6dc,
        hl: 0x06f3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf34a,
        iy: 0x1aa2,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd94 | SUB IYH
  test(
      "UNDOCUMENTED "
      "fd94 | SUB IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0431,
        bc: 0xd255,
        de: 0xb9d6,
        hl: 0x20bb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1e6a,
        iy: 0xd5ef,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x94);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2f3b,
        bc: 0xd255,
        de: 0xb9d6,
        hl: 0x20bb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1e6a,
        iy: 0xd5ef,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd95 | SUB IYL
  test(
      "UNDOCUMENTED "
      "fd95 | SUB IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8b5d,
        bc: 0xb455,
        de: 0x2388,
        hl: 0xec1e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7637,
        iy: 0xcb97,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x95);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf4a3,
        bc: 0xb455,
        de: 0x2388,
        hl: 0xec1e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7637,
        iy: 0xcb97,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd96 | SUB (IY+*)
  test(
      "OPCODE "
      "fd96 | SUB (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa0c6,
        bc: 0x22ac,
        de: 0x0413,
        hl: 0x4b13,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb44e,
        iy: 0xc08b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x96);
    poke(0x0002, 0x55);
    poke(0xc0e0, 0x7b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2536,
        bc: 0x22ac,
        de: 0x0413,
        hl: 0x4b13,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb44e,
        iy: 0xc08b,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fd9c | SBC IYH
  test(
      "UNDOCUMENTED "
      "fd9c | SBC IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa44a,
        bc: 0x3ecf,
        de: 0xced3,
        hl: 0x66ec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4bff,
        iy: 0xb133,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf3a3,
        bc: 0x3ecf,
        de: 0xced3,
        hl: 0x66ec,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4bff,
        iy: 0xb133,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd9d | SBC IYL
  test(
      "UNDOCUMENTED "
      "fd9d | SBC IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x06c0,
        bc: 0x8bd0,
        de: 0x131b,
        hl: 0x3094,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xafc3,
        iy: 0x7409,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x9d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfdbb,
        bc: 0x8bd0,
        de: 0x131b,
        hl: 0x3094,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xafc3,
        iy: 0x7409,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fd9e | SBC A, (IY+*)
  test(
      "OPCODE "
      "fd9e | SBC A, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb983,
        bc: 0x981f,
        de: 0xbb8e,
        hl: 0xd6d5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5c3b,
        iy: 0xf66c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0x9e);
    poke(0x0002, 0xf9);
    poke(0xf665, 0xf3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc583,
        bc: 0x981f,
        de: 0xbb8e,
        hl: 0xd6d5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5c3b,
        iy: 0xf66c,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fda4 | AND IYH
  test(
      "UNDOCUMENTED "
      "fda4 | AND IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb079,
        bc: 0x79c0,
        de: 0x2c7c,
        hl: 0x3e06,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7399,
        iy: 0x037a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xa4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0054,
        bc: 0x79c0,
        de: 0x2c7c,
        hl: 0x3e06,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7399,
        iy: 0x037a,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fda5 | AND IYL
  test(
      "UNDOCUMENTED "
      "fda5 | AND IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x01d2,
        bc: 0x654d,
        de: 0x9653,
        hl: 0x2b33,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x61a4,
        iy: 0x8f88,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xa5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0054,
        bc: 0x654d,
        de: 0x9653,
        hl: 0x2b33,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x61a4,
        iy: 0x8f88,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fda6 | AND (IY+*)
  test(
      "OPCODE "
      "fda6 | AND (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xddb8,
        bc: 0x40bb,
        de: 0x3742,
        hl: 0x6ff1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad28,
        iy: 0x659b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xa6);
    poke(0x0002, 0x53);
    poke(0x65ee, 0x95);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9594,
        bc: 0x40bb,
        de: 0x3742,
        hl: 0x6ff1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad28,
        iy: 0x659b,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fdac | XOR IYH
  test(
      "UNDOCUMENTED "
      "fdac | XOR IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7a43,
        bc: 0x72e3,
        de: 0xdd4d,
        hl: 0x1b62,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4753,
        iy: 0x5d63,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xac);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2724,
        bc: 0x72e3,
        de: 0xdd4d,
        hl: 0x1b62,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4753,
        iy: 0x5d63,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fdad | XOR IYL
  test(
      "UNDOCUMENTED "
      "fdad | XOR IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7d8e,
        bc: 0x2573,
        de: 0x19cc,
        hl: 0x78fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5248,
        iy: 0x8391,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xad);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xeca8,
        bc: 0x2573,
        de: 0x19cc,
        hl: 0x78fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5248,
        iy: 0x8391,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fdae | XOR (IY+*)
  test(
      "OPCODE "
      "fdae | XOR (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa0da,
        bc: 0xbc27,
        de: 0x257b,
        hl: 0x5489,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfa59,
        iy: 0x81f8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xae);
    poke(0x0002, 0x09);
    poke(0x8201, 0xcb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6b28,
        bc: 0xbc27,
        de: 0x257b,
        hl: 0x5489,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfa59,
        iy: 0x81f8,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fdb4 | OR IYH
  test(
      "UNDOCUMENTED "
      "fdb4 | OR IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4f95,
        bc: 0x3461,
        de: 0xf173,
        hl: 0x8ad3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc1a2,
        iy: 0x8265,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xb4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcf8c,
        bc: 0x3461,
        de: 0xf173,
        hl: 0x8ad3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc1a2,
        iy: 0x8265,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fdb5 | OR IYL
  test(
      "UNDOCUMENTED "
      "fdb5 | OR IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x17f6,
        bc: 0xe6ea,
        de: 0xf919,
        hl: 0x327c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4299,
        iy: 0x9733,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xb5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3720,
        bc: 0xe6ea,
        de: 0xf919,
        hl: 0x327c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4299,
        iy: 0x9733,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fdb6 | OR (IY+*)
  test(
      "OPCODE "
      "fdb6 | OR (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdb37,
        bc: 0x3509,
        de: 0xd6ca,
        hl: 0xb16a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa099,
        iy: 0xdf6d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xb6);
    poke(0x0002, 0x4b);
    poke(0xdfb8, 0x64);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xffac,
        bc: 0x3509,
        de: 0xd6ca,
        hl: 0xb16a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa099,
        iy: 0xdf6d,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fdbc | CP IYH
  test(
      "UNDOCUMENTED "
      "fdbc | CP IYH", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb4fc,
        bc: 0x9302,
        de: 0xe35d,
        hl: 0x31bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5c12,
        iy: 0x1c92,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb49a,
        bc: 0x9302,
        de: 0xe35d,
        hl: 0x31bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5c12,
        iy: 0x1c92,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fdbd | CP IYL
  test(
      "UNDOCUMENTED "
      "fdbd | CP IYL", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x391c,
        bc: 0x7b82,
        de: 0xdfeb,
        hl: 0x03ee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbe7b,
        iy: 0xb30f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xbd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x391a,
        bc: 0x7b82,
        de: 0xdfeb,
        hl: 0x03ee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbe7b,
        iy: 0xb30f,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  }, tags: 'undocumented');

  // Test instruction fdbe | CP (IY+*)
  test(
      "OPCODE "
      "fdbe | CP (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0970,
        bc: 0x0b31,
        de: 0xf4ad,
        hl: 0x9d4c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb95a,
        iy: 0xa96b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xbe);
    poke(0x0002, 0x6b);
    poke(0xa9d6, 0xc0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0903,
        bc: 0x0b31,
        de: 0xf4ad,
        hl: 0x9d4c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb95a,
        iy: 0xa96b,
        sp: 0x0000,
        pc: 0x0003);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 19);
  });

  // Test instruction fdcb00 | RLC (IY+*), B
  test(
      "UNDOCUMENTED "
      "fdcb00 | RLC (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x85ac,
        bc: 0x46d0,
        de: 0xa135,
        hl: 0x20c5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb8de,
        iy: 0x2776,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0b);
    poke(0x0003, 0x00);
    poke(0x2781, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x85a4,
        bc: 0xa0d0,
        de: 0xa135,
        hl: 0x20c5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb8de,
        iy: 0x2776,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(10113), equals(0xa0));
  }, tags: 'undocumented');

  // Test instruction fdcb01 | RLC (IY+*), C
  test(
      "UNDOCUMENTED "
      "fdcb01 | RLC (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x577c,
        bc: 0x2b76,
        de: 0x3576,
        hl: 0x280a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae22,
        iy: 0x5c35,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc8);
    poke(0x0003, 0x01);
    poke(0x5bfd, 0xcb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5781,
        bc: 0x2b97,
        de: 0x3576,
        hl: 0x280a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae22,
        iy: 0x5c35,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(23549), equals(0x97));
  }, tags: 'undocumented');

  // Test instruction fdcb02 | RLC (IY+*), D
  test(
      "UNDOCUMENTED "
      "fdcb02 | RLC (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdc23,
        bc: 0x2b37,
        de: 0x83c8,
        hl: 0x5dd9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb2d2,
        iy: 0x3df2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x14);
    poke(0x0003, 0x02);
    poke(0x3e06, 0x58);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdca0,
        bc: 0x2b37,
        de: 0xb0c8,
        hl: 0x5dd9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb2d2,
        iy: 0x3df2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(15878), equals(0xb0));
  }, tags: 'undocumented');

  // Test instruction fdcb03 | RLC (IY+*), E
  test(
      "UNDOCUMENTED "
      "fdcb03 | RLC (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x57ee,
        bc: 0xc179,
        de: 0xb2b6,
        hl: 0x7058,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3f2e,
        iy: 0x57e7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3a);
    poke(0x0003, 0x03);
    poke(0x5821, 0x1a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5720,
        bc: 0xc179,
        de: 0xb234,
        hl: 0x7058,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3f2e,
        iy: 0x57e7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22561), equals(0x34));
  }, tags: 'undocumented');

  // Test instruction fdcb04 | RLC (IY+*), H
  test(
      "UNDOCUMENTED "
      "fdcb04 | RLC (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xed18,
        bc: 0x3f03,
        de: 0x3327,
        hl: 0xf35a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcbf2,
        iy: 0x5071,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x67);
    poke(0x0003, 0x04);
    poke(0x50d8, 0x92);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xed21,
        bc: 0x3f03,
        de: 0x3327,
        hl: 0x255a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcbf2,
        iy: 0x5071,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(20696), equals(0x25));
  }, tags: 'undocumented');

  // Test instruction fdcb05 | RLC (IY+*), L
  test(
      "UNDOCUMENTED "
      "fdcb05 | RLC (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7a39,
        bc: 0x0858,
        de: 0xdb6c,
        hl: 0xdbe0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x157a,
        iy: 0xb25b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x1e);
    poke(0x0003, 0x05);
    poke(0xb279, 0x66);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7a8c,
        bc: 0x0858,
        de: 0xdb6c,
        hl: 0xdbcc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x157a,
        iy: 0xb25b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(45689), equals(0xcc));
  }, tags: 'undocumented');

  // Test instruction fdcb06 | RLC (IY+*)
  test(
      "OPCODE "
      "fdcb06 | RLC (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf285,
        bc: 0x89a2,
        de: 0xe78f,
        hl: 0xef74,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x140d,
        iy: 0xff27,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x72);
    poke(0x0003, 0x06);
    poke(0xff99, 0xf1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf2a1,
        bc: 0x89a2,
        de: 0xe78f,
        hl: 0xef74,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x140d,
        iy: 0xff27,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(65433), equals(0xe3));
  });

  // Test instruction fdcb07 | RLC (IY+*), A
  test(
      "UNDOCUMENTED "
      "fdcb07 | RLC (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8cce,
        bc: 0xf3a7,
        de: 0x3a6e,
        hl: 0x8f0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8423,
        iy: 0x07eb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x24);
    poke(0x0003, 0x07);
    poke(0x080f, 0xae);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5d09,
        bc: 0xf3a7,
        de: 0x3a6e,
        hl: 0x8f0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8423,
        iy: 0x07eb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(2063), equals(0x5d));
  }, tags: 'undocumented');

  // Test instruction fdcb08 | RRC (IY+*), B
  test(
      "UNDOCUMENTED "
      "fdcb08 | RRC (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa611,
        bc: 0xe8ec,
        de: 0xc958,
        hl: 0x7bda,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x194d,
        iy: 0x6137,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x25);
    poke(0x0003, 0x08);
    poke(0x615c, 0x83);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa681,
        bc: 0xc1ec,
        de: 0xc958,
        hl: 0x7bda,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x194d,
        iy: 0x6137,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(24924), equals(0xc1));
  }, tags: 'undocumented');

  // Test instruction fdcb09 | RRC (IY+*), C
  test(
      "UNDOCUMENTED "
      "fdcb09 | RRC (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x54b1,
        bc: 0xfa1a,
        de: 0x84e8,
        hl: 0x4fa5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1ad3,
        iy: 0x19da,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa0);
    poke(0x0003, 0x09);
    poke(0x197a, 0x27);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5485,
        bc: 0xfa93,
        de: 0x84e8,
        hl: 0x4fa5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1ad3,
        iy: 0x19da,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(6522), equals(0x93));
  }, tags: 'undocumented');

  // Test instruction fdcb0a | RRC (IY+*), D
  test(
      "UNDOCUMENTED "
      "fdcb0a | RRC (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb3ef,
        bc: 0xa2bb,
        de: 0xe5d6,
        hl: 0x9617,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf946,
        iy: 0xeef6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe1);
    poke(0x0003, 0x0a);
    poke(0xeed7, 0x19);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb389,
        bc: 0xa2bb,
        de: 0x8cd6,
        hl: 0x9617,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf946,
        iy: 0xeef6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61143), equals(0x8c));
  }, tags: 'undocumented');

  // Test instruction fdcb0b | RRC (IY+*), E
  test(
      "UNDOCUMENTED "
      "fdcb0b | RRC (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xae10,
        bc: 0x8c4e,
        de: 0xe159,
        hl: 0x1c54,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe108,
        iy: 0xc68f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0c);
    poke(0x0003, 0x0b);
    poke(0xc69b, 0xf2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xae28,
        bc: 0x8c4e,
        de: 0xe179,
        hl: 0x1c54,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe108,
        iy: 0xc68f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(50843), equals(0x79));
  }, tags: 'undocumented');

  // Test instruction fdcb0c | RRC (IY+*), H
  test(
      "UNDOCUMENTED "
      "fdcb0c | RRC (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8719,
        bc: 0x6b16,
        de: 0x4c3b,
        hl: 0x180a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x175a,
        iy: 0x8c9d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd7);
    poke(0x0003, 0x0c);
    poke(0x8c74, 0xae);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8700,
        bc: 0x6b16,
        de: 0x4c3b,
        hl: 0x570a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x175a,
        iy: 0x8c9d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(35956), equals(0x57));
  }, tags: 'undocumented');

  // Test instruction fdcb0d | RRC (IY+*), L
  test(
      "UNDOCUMENTED "
      "fdcb0d | RRC (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1204,
        bc: 0xe0cb,
        de: 0x3ab1,
        hl: 0x2416,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1de4,
        iy: 0xfe2d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x11);
    poke(0x0003, 0x0d);
    poke(0xfe3e, 0x1b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x128d,
        bc: 0xe0cb,
        de: 0x3ab1,
        hl: 0x248d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1de4,
        iy: 0xfe2d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(65086), equals(0x8d));
  }, tags: 'undocumented');

  // Test instruction fdcb0e | RRC (IY+*)
  test(
      "OPCODE "
      "fdcb0e | RRC (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8da4,
        bc: 0x8f91,
        de: 0xfc5a,
        hl: 0x5e2c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb2f2,
        iy: 0xf223,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0c);
    poke(0x0003, 0x0e);
    poke(0xf22f, 0xf7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8da9,
        bc: 0x8f91,
        de: 0xfc5a,
        hl: 0x5e2c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb2f2,
        iy: 0xf223,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61999), equals(0xfb));
  });

  // Test instruction fdcb0f | RRC (IY+*), A
  test(
      "UNDOCUMENTED "
      "fdcb0f | RRC (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfbb0,
        bc: 0x2ac9,
        de: 0xec6b,
        hl: 0x6511,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc93a,
        iy: 0xce38,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x15);
    poke(0x0003, 0x0f);
    poke(0xce4d, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2224,
        bc: 0x2ac9,
        de: 0xec6b,
        hl: 0x6511,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc93a,
        iy: 0xce38,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(52813), equals(0x22));
  }, tags: 'undocumented');

  // Test instruction fdcb10 | RL (IY+*), B
  test(
      "UNDOCUMENTED "
      "fdcb10 | RL (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x259d,
        bc: 0x3852,
        de: 0x590d,
        hl: 0xac66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x144f,
        iy: 0x42a2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7a);
    poke(0x0003, 0x10);
    poke(0x431c, 0x1c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x252c,
        bc: 0x3952,
        de: 0x590d,
        hl: 0xac66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x144f,
        iy: 0x42a2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(17180), equals(0x39));
  }, tags: 'undocumented');

  // Test instruction fdcb11 | RL (IY+*), C
  test(
      "UNDOCUMENTED "
      "fdcb11 | RL (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbc60,
        bc: 0x61c1,
        de: 0xf5f8,
        hl: 0xaf24,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4019,
        iy: 0x9c90,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7b);
    poke(0x0003, 0x11);
    poke(0x9d0b, 0x5e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbca8,
        bc: 0x61bc,
        de: 0xf5f8,
        hl: 0xaf24,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4019,
        iy: 0x9c90,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(40203), equals(0xbc));
  }, tags: 'undocumented');

  // Test instruction fdcb12 | RL (IY+*), D
  test(
      "UNDOCUMENTED "
      "fdcb12 | RL (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4e45,
        bc: 0x3a25,
        de: 0x3417,
        hl: 0xbcc7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0d7e,
        iy: 0x8537,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x61);
    poke(0x0003, 0x12);
    poke(0x8598, 0xa7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4e09,
        bc: 0x3a25,
        de: 0x4f17,
        hl: 0xbcc7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0d7e,
        iy: 0x8537,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(34200), equals(0x4f));
  }, tags: 'undocumented');

  // Test instruction fdcb13 | RL (IY+*), E
  test(
      "UNDOCUMENTED "
      "fdcb13 | RL (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb224,
        bc: 0xb79b,
        de: 0x84f1,
        hl: 0xff7d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x414c,
        iy: 0xe798,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb3);
    poke(0x0003, 0x13);
    poke(0xe74b, 0xb3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb225,
        bc: 0xb79b,
        de: 0x8466,
        hl: 0xff7d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x414c,
        iy: 0xe798,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(59211), equals(0x66));
  }, tags: 'undocumented');

  // Test instruction fdcb14 | RL (IY+*), H
  test(
      "UNDOCUMENTED "
      "fdcb14 | RL (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xabbb,
        bc: 0x451a,
        de: 0xfc65,
        hl: 0x14a1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0f4d,
        iy: 0xd93c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc4);
    poke(0x0003, 0x14);
    poke(0xd900, 0x06);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xab08,
        bc: 0x451a,
        de: 0xfc65,
        hl: 0x0da1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0f4d,
        iy: 0xd93c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(55552), equals(0x0d));
  }, tags: 'undocumented');

  // Test instruction fdcb15 | RL (IY+*), L
  test(
      "UNDOCUMENTED "
      "fdcb15 | RL (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2864,
        bc: 0x9532,
        de: 0x8631,
        hl: 0x751c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe327,
        iy: 0x2d7b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x17);
    poke(0x0003, 0x15);
    poke(0x2d92, 0x12);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2824,
        bc: 0x9532,
        de: 0x8631,
        hl: 0x7524,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe327,
        iy: 0x2d7b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(11666), equals(0x24));
  }, tags: 'undocumented');

  // Test instruction fdcb16 | RL (IY+*)
  test(
      "OPCODE "
      "fdcb16 | RL (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0c3c,
        bc: 0xdcd7,
        de: 0xadcc,
        hl: 0x196d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x87e2,
        iy: 0xf0b4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x23);
    poke(0x0003, 0x16);
    poke(0xf0d7, 0x89);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0c05,
        bc: 0xdcd7,
        de: 0xadcc,
        hl: 0x196d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x87e2,
        iy: 0xf0b4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61655), equals(0x12));
  });

  // Test instruction fdcb17 | RL (IY+*), A
  test(
      "UNDOCUMENTED "
      "fdcb17 | RL (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xaf5b,
        bc: 0xd016,
        de: 0x066e,
        hl: 0x6638,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5e92,
        iy: 0x2013,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8a);
    poke(0x0003, 0x17);
    poke(0x1f9d, 0xb8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7125,
        bc: 0xd016,
        de: 0x066e,
        hl: 0x6638,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5e92,
        iy: 0x2013,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(8093), equals(0x71));
  }, tags: 'undocumented');

  // Test instruction fdcb18 | RR (IY+*), B
  test(
      "UNDOCUMENTED "
      "fdcb18 | RR (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x23f3,
        bc: 0x4517,
        de: 0x16e0,
        hl: 0x6894,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb908,
        iy: 0x3216,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc0);
    poke(0x0003, 0x18);
    poke(0x31d6, 0xfa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x23a8,
        bc: 0xfd17,
        de: 0x16e0,
        hl: 0x6894,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb908,
        iy: 0x3216,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(12758), equals(0xfd));
  }, tags: 'undocumented');

  // Test instruction fdcb19 | RR (IY+*), C
  test(
      "UNDOCUMENTED "
      "fdcb19 | RR (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x11ed,
        bc: 0xc2b8,
        de: 0xa9f3,
        hl: 0x2014,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6db0,
        iy: 0x4d2e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa2);
    poke(0x0003, 0x19);
    poke(0x4cd0, 0x4b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x11a5,
        bc: 0xc2a5,
        de: 0xa9f3,
        hl: 0x2014,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6db0,
        iy: 0x4d2e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(19664), equals(0xa5));
  }, tags: 'undocumented');

  // Test instruction fdcb1a | RR (IY+*), D
  test(
      "UNDOCUMENTED "
      "fdcb1a | RR (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbc5c,
        bc: 0x6168,
        de: 0xe541,
        hl: 0xb630,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0207,
        iy: 0x40d3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x78);
    poke(0x0003, 0x1a);
    poke(0x414b, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbc24,
        bc: 0x6168,
        de: 0x2241,
        hl: 0xb630,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0207,
        iy: 0x40d3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(16715), equals(0x22));
  }, tags: 'undocumented');

  // Test instruction fdcb1b | RR (IY+*), E
  test(
      "UNDOCUMENTED "
      "fdcb1b | RR (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7a28,
        bc: 0x1286,
        de: 0xfe50,
        hl: 0xc42d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe290,
        iy: 0x71b0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x16);
    poke(0x0003, 0x1b);
    poke(0x71c6, 0xb8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7a0c,
        bc: 0x1286,
        de: 0xfe5c,
        hl: 0xc42d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe290,
        iy: 0x71b0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(29126), equals(0x5c));
  }, tags: 'undocumented');

  // Test instruction fdcb1c | RR (IY+*), H
  test(
      "UNDOCUMENTED "
      "fdcb1c | RR (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x932b,
        bc: 0x097b,
        de: 0x6928,
        hl: 0x83a3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xff2d,
        iy: 0xdf62,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x86);
    poke(0x0003, 0x1c);
    poke(0xdee8, 0x8f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9381,
        bc: 0x097b,
        de: 0x6928,
        hl: 0xc7a3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xff2d,
        iy: 0xdf62,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(57064), equals(0xc7));
  }, tags: 'undocumented');

  // Test instruction fdcb1d | RR (IY+*), L
  test(
      "UNDOCUMENTED "
      "fdcb1d | RR (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x97b1,
        bc: 0x2b30,
        de: 0x2645,
        hl: 0x04ef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x186a,
        iy: 0xd667,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x27);
    poke(0x0003, 0x1d);
    poke(0xd68e, 0xb7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x978d,
        bc: 0x2b30,
        de: 0x2645,
        hl: 0x04db,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x186a,
        iy: 0xd667,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(54926), equals(0xdb));
  }, tags: 'undocumented');

  // Test instruction fdcb1e | RR (IY+*)
  test(
      "OPCODE "
      "fdcb1e | RR (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2f39,
        bc: 0x2470,
        de: 0xb521,
        hl: 0x6ca3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1066,
        iy: 0xda38,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3a);
    poke(0x0003, 0x1e);
    poke(0xda72, 0x25);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2f81,
        bc: 0x2470,
        de: 0xb521,
        hl: 0x6ca3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1066,
        iy: 0xda38,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(55922), equals(0x92));
  });

  // Test instruction fdcb1f | RR (IY+*), A
  test(
      "UNDOCUMENTED "
      "fdcb1f | RR (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4cdd,
        bc: 0x49a3,
        de: 0xda18,
        hl: 0x3afd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa4f1,
        iy: 0x2095,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7b);
    poke(0x0003, 0x1f);
    poke(0x2110, 0x04);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8284,
        bc: 0x49a3,
        de: 0xda18,
        hl: 0x3afd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa4f1,
        iy: 0x2095,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(8464), equals(0x82));
  }, tags: 'undocumented');

  // Test instruction fdcb20 | SLA (IY+*), B
  test(
      "UNDOCUMENTED "
      "fdcb20 | SLA (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3d74,
        bc: 0x3a8f,
        de: 0x206f,
        hl: 0x8894,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xddab,
        iy: 0xda25,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7a);
    poke(0x0003, 0x20);
    poke(0xda9f, 0x89);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3d05,
        bc: 0x128f,
        de: 0x206f,
        hl: 0x8894,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xddab,
        iy: 0xda25,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(55967), equals(0x12));
  }, tags: 'undocumented');

  // Test instruction fdcb21 | SLA (IY+*), C
  test(
      "UNDOCUMENTED "
      "fdcb21 | SLA (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1674,
        bc: 0x6025,
        de: 0x641a,
        hl: 0x6598,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x473b,
        iy: 0xde36,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7b);
    poke(0x0003, 0x21);
    poke(0xdeb1, 0x23);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1600,
        bc: 0x6046,
        de: 0x641a,
        hl: 0x6598,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x473b,
        iy: 0xde36,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(57009), equals(0x46));
  }, tags: 'undocumented');

  // Test instruction fdcb22 | SLA (IY+*), D
  test(
      "UNDOCUMENTED "
      "fdcb22 | SLA (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xada9,
        bc: 0xefb2,
        de: 0x6f03,
        hl: 0xe732,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc11d,
        iy: 0x8926,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9a);
    poke(0x0003, 0x22);
    poke(0x88c0, 0xd4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xada9,
        bc: 0xefb2,
        de: 0xa803,
        hl: 0xe732,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc11d,
        iy: 0x8926,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(35008), equals(0xa8));
  }, tags: 'undocumented');

  // Test instruction fdcb23 | SLA (IY+*), E
  test(
      "UNDOCUMENTED "
      "fdcb23 | SLA (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x21e9,
        bc: 0xd678,
        de: 0xa71b,
        hl: 0x25d7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4ca8,
        iy: 0x5255,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf5);
    poke(0x0003, 0x23);
    poke(0x524a, 0x65);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x218c,
        bc: 0xd678,
        de: 0xa7ca,
        hl: 0x25d7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4ca8,
        iy: 0x5255,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(21066), equals(0xca));
  }, tags: 'undocumented');

  // Test instruction fdcb24 | SLA (IY+*), H
  test(
      "UNDOCUMENTED "
      "fdcb24 | SLA (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1c51,
        bc: 0xda3e,
        de: 0xcc7c,
        hl: 0xcb19,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x572c,
        iy: 0xaffe,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xb4);
    poke(0x0003, 0x24);
    poke(0xafb2, 0x7e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1cac,
        bc: 0xda3e,
        de: 0xcc7c,
        hl: 0xfc19,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x572c,
        iy: 0xaffe,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(44978), equals(0xfc));
  }, tags: 'undocumented');

  // Test instruction fdcb25 | SLA (IY+*), L
  test(
      "UNDOCUMENTED "
      "fdcb25 | SLA (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x954e,
        bc: 0x097c,
        de: 0xa341,
        hl: 0x89e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x435d,
        iy: 0x23e9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa6);
    poke(0x0003, 0x25);
    poke(0x238f, 0x26);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9508,
        bc: 0x097c,
        de: 0xa341,
        hl: 0x894c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x435d,
        iy: 0x23e9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(9103), equals(0x4c));
  }, tags: 'undocumented');

  // Test instruction fdcb26 | SLA (IY+*)
  test(
      "OPCODE "
      "fdcb26 | SLA (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5844,
        bc: 0x0e19,
        de: 0xd277,
        hl: 0xbf7f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6504,
        iy: 0xd4e4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbd);
    poke(0x0003, 0x26);
    poke(0xd4a1, 0xbf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x582d,
        bc: 0x0e19,
        de: 0xd277,
        hl: 0xbf7f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6504,
        iy: 0xd4e4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(54433), equals(0x7e));
  });

  // Test instruction fdcb27 | SLA (IY+*), A
  test(
      "UNDOCUMENTED "
      "fdcb27 | SLA (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8e0d,
        bc: 0x8c06,
        de: 0x2c4c,
        hl: 0xd7c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9239,
        iy: 0x8d42,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x59);
    poke(0x0003, 0x27);
    poke(0x8d9b, 0xa7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4e0d,
        bc: 0x8c06,
        de: 0x2c4c,
        hl: 0xd7c8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9239,
        iy: 0x8d42,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(36251), equals(0x4e));
  }, tags: 'undocumented');

  // Test instruction fdcb28 | SRA (IY+*), B
  test(
      "UNDOCUMENTED "
      "fdcb28 | SRA (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4122,
        bc: 0xaf9b,
        de: 0x7745,
        hl: 0x76f5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa1bb,
        iy: 0xab43,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x83);
    poke(0x0003, 0x28);
    poke(0xaac6, 0x5d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x412d,
        bc: 0x2e9b,
        de: 0x7745,
        hl: 0x76f5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa1bb,
        iy: 0xab43,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(43718), equals(0x2e));
  }, tags: 'undocumented');

  // Test instruction fdcb29 | SRA (IY+*), C
  test(
      "UNDOCUMENTED "
      "fdcb29 | SRA (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0b21,
        bc: 0xaffd,
        de: 0xfea6,
        hl: 0x9478,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x32bb,
        iy: 0x0343,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7d);
    poke(0x0003, 0x29);
    poke(0x03c0, 0x84);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0b80,
        bc: 0xafc2,
        de: 0xfea6,
        hl: 0x9478,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x32bb,
        iy: 0x0343,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(960), equals(0xc2));
  }, tags: 'undocumented');

  // Test instruction fdcb2a | SRA (IY+*), D
  test(
      "UNDOCUMENTED "
      "fdcb2a | SRA (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf236,
        bc: 0x8c31,
        de: 0x5932,
        hl: 0x7feb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7db7,
        iy: 0xabe7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf9);
    poke(0x0003, 0x2a);
    poke(0xabe0, 0xdd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf2ad,
        bc: 0x8c31,
        de: 0xee32,
        hl: 0x7feb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7db7,
        iy: 0xabe7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(44000), equals(0xee));
  }, tags: 'undocumented');

  // Test instruction fdcb2b | SRA (IY+*), E
  test(
      "UNDOCUMENTED "
      "fdcb2b | SRA (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2450,
        bc: 0x6945,
        de: 0xdcfc,
        hl: 0xd643,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5be1,
        iy: 0x4a94,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4b);
    poke(0x0003, 0x2b);
    poke(0x4adf, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2425,
        bc: 0x6945,
        de: 0xdc24,
        hl: 0xd643,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5be1,
        iy: 0x4a94,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(19167), equals(0x24));
  }, tags: 'undocumented');

  // Test instruction fdcb2c | SRA (IY+*), H
  test(
      "UNDOCUMENTED "
      "fdcb2c | SRA (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x117f,
        bc: 0xb32b,
        de: 0xe530,
        hl: 0x255a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2416,
        iy: 0xccd1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe6);
    poke(0x0003, 0x2c);
    poke(0xccb7, 0x3c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x110c,
        bc: 0xb32b,
        de: 0xe530,
        hl: 0x1e5a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2416,
        iy: 0xccd1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(52407), equals(0x1e));
  }, tags: 'undocumented');

  // Test instruction fdcb2d | SRA (IY+*), L
  test(
      "UNDOCUMENTED "
      "fdcb2d | SRA (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd0c3,
        bc: 0x344b,
        de: 0x1bb0,
        hl: 0x3eab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe11,
        iy: 0xe4e6,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x5f);
    poke(0x0003, 0x2d);
    poke(0xe545, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd02c,
        bc: 0x344b,
        de: 0x1bb0,
        hl: 0x3e3c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe11,
        iy: 0xe4e6,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(58693), equals(0x3c));
  }, tags: 'undocumented');

  // Test instruction fdcb2e | SRA (IY+*)
  test(
      "OPCODE "
      "fdcb2e | SRA (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf4ee,
        bc: 0xb832,
        de: 0x4b7f,
        hl: 0xe2b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9386,
        iy: 0x42fd,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x06);
    poke(0x0003, 0x2e);
    poke(0x4303, 0xad);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf481,
        bc: 0xb832,
        de: 0x4b7f,
        hl: 0xe2b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9386,
        iy: 0x42fd,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(17155), equals(0xd6));
  });

  // Test instruction fdcb2f | SRA (IY+*), A
  test(
      "UNDOCUMENTED "
      "fdcb2f | SRA (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xff86,
        bc: 0xf2c2,
        de: 0x9f2f,
        hl: 0xc946,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5fe0,
        iy: 0x16b8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x29);
    poke(0x0003, 0x2f);
    poke(0x16e1, 0x18);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0c0c,
        bc: 0xf2c2,
        de: 0x9f2f,
        hl: 0xc946,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5fe0,
        iy: 0x16b8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(5857), equals(0x0c));
  }, tags: 'undocumented');

  // Test instruction fdcb30 | SLL (IY+*), B
  test(
      "UNDOCUMENTED "
      "fdcb30 | SLL (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xacf6,
        bc: 0xe832,
        de: 0xf9ed,
        hl: 0xcabc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfabd,
        iy: 0xd646,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x1b);
    poke(0x0003, 0x30);
    poke(0xd661, 0xa5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xac0d,
        bc: 0x4b32,
        de: 0xf9ed,
        hl: 0xcabc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfabd,
        iy: 0xd646,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(54881), equals(0x4b));
  }, tags: 'undocumented');

  // Test instruction fdcb31 | SLL (IY+*), C
  test(
      "UNDOCUMENTED "
      "fdcb31 | SLL (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2b96,
        bc: 0x5134,
        de: 0x83a7,
        hl: 0x7eee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7750,
        iy: 0xbfe0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf0);
    poke(0x0003, 0x31);
    poke(0xbfd0, 0xf1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2ba1,
        bc: 0x51e3,
        de: 0x83a7,
        hl: 0x7eee,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7750,
        iy: 0xbfe0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(49104), equals(0xe3));
  }, tags: 'undocumented');

  // Test instruction fdcb32 | SLL (IY+*), D
  test(
      "UNDOCUMENTED "
      "fdcb32 | SLL (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb2bc,
        bc: 0xa4b1,
        de: 0xb685,
        hl: 0xf66e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa9a1,
        iy: 0x5ade,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc5);
    poke(0x0003, 0x32);
    poke(0x5aa3, 0x59);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb2a0,
        bc: 0xa4b1,
        de: 0xb385,
        hl: 0xf66e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa9a1,
        iy: 0x5ade,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(23203), equals(0xb3));
  }, tags: 'undocumented');

  // Test instruction fdcb33 | SLL (IY+*), E
  test(
      "UNDOCUMENTED "
      "fdcb33 | SLL (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9c6d,
        bc: 0x2c90,
        de: 0xd0a9,
        hl: 0x2be3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2691,
        iy: 0x1964,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7f);
    poke(0x0003, 0x33);
    poke(0x19e3, 0xda);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9ca1,
        bc: 0x2c90,
        de: 0xd0b5,
        hl: 0x2be3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2691,
        iy: 0x1964,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(6627), equals(0xb5));
  }, tags: 'undocumented');

  // Test instruction fdcb34 | SLL (IY+*), H
  test(
      "UNDOCUMENTED "
      "fdcb34 | SLL (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6029,
        bc: 0xfbcd,
        de: 0x5348,
        hl: 0xf947,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5338,
        iy: 0x5696,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd2);
    poke(0x0003, 0x34);
    poke(0x5668, 0xd4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x60ad,
        bc: 0xfbcd,
        de: 0x5348,
        hl: 0xa947,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5338,
        iy: 0x5696,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22120), equals(0xa9));
  }, tags: 'undocumented');

  // Test instruction fdcb35 | SLL (IY+*), L
  test(
      "UNDOCUMENTED "
      "fdcb35 | SLL (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x96a9,
        bc: 0x21c6,
        de: 0x4cb6,
        hl: 0xb40b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x673a,
        iy: 0x00f8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x71);
    poke(0x0003, 0x35);
    poke(0x0169, 0x0b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9604,
        bc: 0x21c6,
        de: 0x4cb6,
        hl: 0xb417,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x673a,
        iy: 0x00f8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(361), equals(0x17));
  }, tags: 'undocumented');

  // Test instruction fdcb36 | SLL (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb36 | SLL (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdc6f,
        bc: 0x0892,
        de: 0x3cc7,
        hl: 0x1494,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8598,
        iy: 0x1ade,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xda);
    poke(0x0003, 0x36);
    poke(0x1ab8, 0x3c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdc28,
        bc: 0x0892,
        de: 0x3cc7,
        hl: 0x1494,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8598,
        iy: 0x1ade,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(6840), equals(0x79));
  }, tags: 'undocumented');

  // Test instruction fdcb37 | SLL (IY+*), A
  test(
      "UNDOCUMENTED "
      "fdcb37 | SLL (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd2b3,
        bc: 0x4524,
        de: 0x208f,
        hl: 0x076f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad10,
        iy: 0xe7ec,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xcb);
    poke(0x0003, 0x37);
    poke(0xe7b7, 0x9f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3f2d,
        bc: 0x4524,
        de: 0x208f,
        hl: 0x076f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad10,
        iy: 0xe7ec,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(59319), equals(0x3f));
  }, tags: 'undocumented');

  // Test instruction fdcb38 | SRL (IY+*), B
  test(
      "UNDOCUMENTED "
      "fdcb38 | SRL (IY+*), B", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4f07,
        bc: 0x0050,
        de: 0x40c6,
        hl: 0x4fb7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf37e,
        iy: 0xd096,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8e);
    poke(0x0003, 0x38);
    poke(0xd024, 0x0d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4f05,
        bc: 0x0650,
        de: 0x40c6,
        hl: 0x4fb7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf37e,
        iy: 0xd096,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(53284), equals(0x06));
  }, tags: 'undocumented');

  // Test instruction fdcb39 | SRL (IY+*), C
  test(
      "UNDOCUMENTED "
      "fdcb39 | SRL (IY+*), C", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbcc2,
        bc: 0xf5b5,
        de: 0x8dee,
        hl: 0xe514,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x48bc,
        iy: 0xf433,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7f);
    poke(0x0003, 0x39);
    poke(0xf4b2, 0xf5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbc29,
        bc: 0xf57a,
        de: 0x8dee,
        hl: 0xe514,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x48bc,
        iy: 0xf433,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(62642), equals(0x7a));
  }, tags: 'undocumented');

  // Test instruction fdcb3a | SRL (IY+*), D
  test(
      "UNDOCUMENTED "
      "fdcb3a | SRL (IY+*), D", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd012,
        bc: 0x2ef5,
        de: 0x2910,
        hl: 0x9ca5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb155,
        iy: 0xcb03,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x1d);
    poke(0x0003, 0x3a);
    poke(0xcb20, 0xa8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd000,
        bc: 0x2ef5,
        de: 0x5410,
        hl: 0x9ca5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb155,
        iy: 0xcb03,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(52000), equals(0x54));
  }, tags: 'undocumented');

  // Test instruction fdcb3b | SRL (IY+*), E
  test(
      "UNDOCUMENTED "
      "fdcb3b | SRL (IY+*), E", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x503d,
        bc: 0xa85b,
        de: 0xcfbb,
        hl: 0xde8c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9c5b,
        iy: 0xd263,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x05);
    poke(0x0003, 0x3b);
    poke(0xd268, 0xb2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x500c,
        bc: 0xa85b,
        de: 0xcf59,
        hl: 0xde8c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9c5b,
        iy: 0xd263,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(53864), equals(0x59));
  }, tags: 'undocumented');

  // Test instruction fdcb3c | SRL (IY+*), H
  test(
      "UNDOCUMENTED "
      "fdcb3c | SRL (IY+*), H", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x97f0,
        bc: 0x4456,
        de: 0x0b52,
        hl: 0xfdad,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6d2a,
        iy: 0xa80f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xae);
    poke(0x0003, 0x3c);
    poke(0xa7bd, 0x96);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x970c,
        bc: 0x4456,
        de: 0x0b52,
        hl: 0x4bad,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6d2a,
        iy: 0xa80f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(42941), equals(0x4b));
  }, tags: 'undocumented');

  // Test instruction fdcb3d | SRL (IY+*), L
  test(
      "UNDOCUMENTED "
      "fdcb3d | SRL (IY+*), L", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7d44,
        bc: 0x9303,
        de: 0xe12b,
        hl: 0xbff6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4c0f,
        iy: 0xe52a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x13);
    poke(0x0003, 0x3d);
    poke(0xe53d, 0xfb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7d2d,
        bc: 0x9303,
        de: 0xe12b,
        hl: 0xbf7d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4c0f,
        iy: 0xe52a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(58685), equals(0x7d));
  }, tags: 'undocumented');

  // Test instruction fdcb3e | SRL (IY+*)
  test(
      "OPCODE "
      "fdcb3e | SRL (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0d95,
        bc: 0x3e02,
        de: 0x8f74,
        hl: 0x0f82,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x85df,
        iy: 0xb2d1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2e);
    poke(0x0003, 0x3e);
    poke(0xb2ff, 0x50);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0d2c,
        bc: 0x3e02,
        de: 0x8f74,
        hl: 0x0f82,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x85df,
        iy: 0xb2d1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(45823), equals(0x28));
  });

  // Test instruction fdcb3f | SRL (IY+*), A
  test(
      "UNDOCUMENTED "
      "fdcb3f | SRL (IY+*), A", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x89e3,
        bc: 0x12f6,
        de: 0x426c,
        hl: 0x52d4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd9f7,
        iy: 0xc1ac,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x21);
    poke(0x0003, 0x3f);
    poke(0xc1cd, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c2c,
        bc: 0x12f6,
        de: 0x426c,
        hl: 0x52d4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd9f7,
        iy: 0xc1ac,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(49613), equals(0x3c));
  }, tags: 'undocumented');

  // Test instruction fdcb40 | BIT 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb40 | BIT 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5408,
        bc: 0x2c34,
        de: 0x6784,
        hl: 0xb376,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8ff9,
        iy: 0x4195,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3b);
    poke(0x0003, 0x40);
    poke(0x41d0, 0x0d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5410,
        bc: 0x2c34,
        de: 0x6784,
        hl: 0xb376,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8ff9,
        iy: 0x4195,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb41 | BIT 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb41 | BIT 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8c35,
        bc: 0x5a58,
        de: 0xb71c,
        hl: 0x6777,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdeca,
        iy: 0x03cb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xcc);
    poke(0x0003, 0x41);
    poke(0x0397, 0xe9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8c11,
        bc: 0x5a58,
        de: 0xb71c,
        hl: 0x6777,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdeca,
        iy: 0x03cb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb42 | BIT 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb42 | BIT 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5535,
        bc: 0x9c29,
        de: 0x2feb,
        hl: 0x97ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7f17,
        iy: 0x9f56,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x01);
    poke(0x0003, 0x42);
    poke(0x9f57, 0xa8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x555d,
        bc: 0x9c29,
        de: 0x2feb,
        hl: 0x97ff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7f17,
        iy: 0x9f56,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb43 | BIT 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb43 | BIT 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb404,
        bc: 0xe58c,
        de: 0xe62e,
        hl: 0x2a32,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7130,
        iy: 0x1fd1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x08);
    poke(0x0003, 0x43);
    poke(0x1fd9, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb45c,
        bc: 0xe58c,
        de: 0xe62e,
        hl: 0x2a32,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7130,
        iy: 0x1fd1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb44 | BIT 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb44 | BIT 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa954,
        bc: 0x68f4,
        de: 0x9fa4,
        hl: 0x7f66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0209,
        iy: 0xf4f3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x03);
    poke(0x0003, 0x44);
    poke(0xf4f6, 0x89);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa930,
        bc: 0x68f4,
        de: 0x9fa4,
        hl: 0x7f66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0209,
        iy: 0xf4f3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb45 | BIT 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb45 | BIT 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x73e5,
        bc: 0x8dde,
        de: 0x5e4f,
        hl: 0x84a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4e24,
        iy: 0x93ed,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8d);
    poke(0x0003, 0x45);
    poke(0x937a, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7311,
        bc: 0x8dde,
        de: 0x5e4f,
        hl: 0x84a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4e24,
        iy: 0x93ed,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb46 | BIT 0, (IY+*)
  test(
      "OPCODE "
      "fdcb46 | BIT 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0e5a,
        bc: 0xb1f9,
        de: 0x475f,
        hl: 0xebfc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7765,
        iy: 0x63b1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8c);
    poke(0x0003, 0x46);
    poke(0x633d, 0xfe);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0e74,
        bc: 0xb1f9,
        de: 0x475f,
        hl: 0xebfc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7765,
        iy: 0x63b1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fdcb47 | BIT 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb47 | BIT 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9b3d,
        bc: 0x7f38,
        de: 0x0753,
        hl: 0xd5e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb9c3,
        iy: 0x6e0e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x96);
    poke(0x0003, 0x47);
    poke(0x6da4, 0xd6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9b7d,
        bc: 0x7f38,
        de: 0x0753,
        hl: 0xd5e7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb9c3,
        iy: 0x6e0e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb48 | BIT 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb48 | BIT 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7d94,
        bc: 0x50a9,
        de: 0x2511,
        hl: 0x8f9f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb612,
        iy: 0xaba9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x44);
    poke(0x0003, 0x48);
    poke(0xabed, 0xb0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7d7c,
        bc: 0x50a9,
        de: 0x2511,
        hl: 0x8f9f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb612,
        iy: 0xaba9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb49 | BIT 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb49 | BIT 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x691e,
        bc: 0x3a39,
        de: 0xb834,
        hl: 0x74b6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0eb7,
        iy: 0x3e21,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4e);
    poke(0x0003, 0x49);
    poke(0x3e6f, 0xa9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x697c,
        bc: 0x3a39,
        de: 0xb834,
        hl: 0x74b6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0eb7,
        iy: 0x3e21,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb4a | BIT 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb4a | BIT 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x31e3,
        bc: 0x68e0,
        de: 0xfe2f,
        hl: 0xa2c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xac96,
        iy: 0xe7db,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x52);
    poke(0x0003, 0x4a);
    poke(0xe82d, 0xda);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3139,
        bc: 0x68e0,
        de: 0xfe2f,
        hl: 0xa2c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xac96,
        iy: 0xe7db,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb4b | BIT 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb4b | BIT 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x09a1,
        bc: 0x2453,
        de: 0x9186,
        hl: 0xa32a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x71af,
        iy: 0x883f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xea);
    poke(0x0003, 0x4b);
    poke(0x8829, 0x4e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0919,
        bc: 0x2453,
        de: 0x9186,
        hl: 0xa32a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x71af,
        iy: 0x883f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb4c | BIT 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb4c | BIT 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4a52,
        bc: 0x1e5b,
        de: 0xbe2e,
        hl: 0x3ee4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xaf79,
        iy: 0x7f22,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xee);
    poke(0x0003, 0x4c);
    poke(0x7f10, 0x70);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4a7c,
        bc: 0x1e5b,
        de: 0xbe2e,
        hl: 0x3ee4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xaf79,
        iy: 0x7f22,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb4d | BIT 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb4d | BIT 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9f87,
        bc: 0x6c8f,
        de: 0x34f4,
        hl: 0x5a79,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd3cc,
        iy: 0xa770,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x29);
    poke(0x0003, 0x4d);
    poke(0xa799, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9f75,
        bc: 0x6c8f,
        de: 0x34f4,
        hl: 0x5a79,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd3cc,
        iy: 0xa770,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb4e | BIT 1, (IY+*)
  test(
      "OPCODE "
      "fdcb4e | BIT 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x30cb,
        bc: 0x5626,
        de: 0x52bc,
        hl: 0x5503,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x303b,
        iy: 0xe1c8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x20);
    poke(0x0003, 0x4e);
    poke(0xe1e8, 0xaa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3031,
        bc: 0x5626,
        de: 0x52bc,
        hl: 0x5503,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x303b,
        iy: 0xe1c8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fdcb4f | BIT 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb4f | BIT 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6088,
        bc: 0xe079,
        de: 0x7152,
        hl: 0x671f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8c22,
        iy: 0x1cf8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9d);
    poke(0x0003, 0x4f);
    poke(0x1c95, 0x18);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x605c,
        bc: 0xe079,
        de: 0x7152,
        hl: 0x671f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8c22,
        iy: 0x1cf8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb50 | BIT 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb50 | BIT 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8cde,
        bc: 0x1409,
        de: 0x6d69,
        hl: 0xe5b2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4a0c,
        iy: 0xc75f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6b);
    poke(0x0003, 0x50);
    poke(0xc7ca, 0xfe);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8c10,
        bc: 0x1409,
        de: 0x6d69,
        hl: 0xe5b2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4a0c,
        iy: 0xc75f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb51 | BIT 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb51 | BIT 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8f59,
        bc: 0x40cb,
        de: 0x9543,
        hl: 0x9b3a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1942,
        iy: 0x3495,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x86);
    poke(0x0003, 0x51);
    poke(0x341b, 0x13);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8f75,
        bc: 0x40cb,
        de: 0x9543,
        hl: 0x9b3a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1942,
        iy: 0x3495,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb52 | BIT 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb52 | BIT 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8905,
        bc: 0x3e41,
        de: 0x7ab4,
        hl: 0x37f6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf82d,
        iy: 0x8b0d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe6);
    poke(0x0003, 0x52);
    poke(0x8af3, 0x87);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8919,
        bc: 0x3e41,
        de: 0x7ab4,
        hl: 0x37f6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf82d,
        iy: 0x8b0d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb53 | BIT 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb53 | BIT 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xefde,
        bc: 0xe345,
        de: 0x09a3,
        hl: 0xf0b2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc378,
        iy: 0x7ee1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd1);
    poke(0x0003, 0x53);
    poke(0x7eb2, 0xe4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xef38,
        bc: 0xe345,
        de: 0x09a3,
        hl: 0xf0b2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc378,
        iy: 0x7ee1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb54 | BIT 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb54 | BIT 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x72a6,
        bc: 0xcb82,
        de: 0xd966,
        hl: 0x2fc6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3c00,
        iy: 0x5b6b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x08);
    poke(0x0003, 0x54);
    poke(0x5b73, 0x07);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7218,
        bc: 0xcb82,
        de: 0xd966,
        hl: 0x2fc6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3c00,
        iy: 0x5b6b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb55 | BIT 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb55 | BIT 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x855c,
        bc: 0xc23b,
        de: 0x6aab,
        hl: 0x9b00,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe93,
        iy: 0xb4b2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x54);
    poke(0x0003, 0x55);
    poke(0xb506, 0x46);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8530,
        bc: 0xc23b,
        de: 0x6aab,
        hl: 0x9b00,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe93,
        iy: 0xb4b2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb56 | BIT 2, (IY+*)
  test(
      "OPCODE "
      "fdcb56 | BIT 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf5ad,
        bc: 0xf9f6,
        de: 0x1e8c,
        hl: 0x9e08,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x716a,
        iy: 0x6932,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6f);
    poke(0x0003, 0x56);
    poke(0x69a1, 0xdf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf539,
        bc: 0xf9f6,
        de: 0x1e8c,
        hl: 0x9e08,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x716a,
        iy: 0x6932,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fdcb57 | BIT 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb57 | BIT 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x37d7,
        bc: 0xb7dc,
        de: 0xbe1c,
        hl: 0x38ea,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5e82,
        iy: 0xa3bb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3c);
    poke(0x0003, 0x57);
    poke(0xa3f7, 0x6c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3731,
        bc: 0xb7dc,
        de: 0xbe1c,
        hl: 0x38ea,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5e82,
        iy: 0xa3bb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb58 | BIT 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb58 | BIT 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x752c,
        bc: 0x7296,
        de: 0x3ea5,
        hl: 0x1143,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd7cc,
        iy: 0x1e94,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4e);
    poke(0x0003, 0x58);
    poke(0x1ee2, 0xf6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x755c,
        bc: 0x7296,
        de: 0x3ea5,
        hl: 0x1143,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd7cc,
        iy: 0x1e94,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb59 | BIT 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb59 | BIT 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8056,
        bc: 0xbf2a,
        de: 0x1809,
        hl: 0xed31,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe2b,
        iy: 0xfad3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2e);
    poke(0x0003, 0x59);
    poke(0xfb01, 0x6f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8038,
        bc: 0xbf2a,
        de: 0x1809,
        hl: 0xed31,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe2b,
        iy: 0xfad3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb5a | BIT 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb5a | BIT 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcc74,
        bc: 0xa108,
        de: 0x65d4,
        hl: 0x6f66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0008,
        iy: 0x7bb8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x88);
    poke(0x0003, 0x5a);
    poke(0x7b40, 0x6e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcc38,
        bc: 0xa108,
        de: 0x65d4,
        hl: 0x6f66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0008,
        iy: 0x7bb8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb5b | BIT 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb5b | BIT 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5cf1,
        bc: 0xb3bd,
        de: 0x25bd,
        hl: 0x98cf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2ba1,
        iy: 0x315c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe7);
    poke(0x0003, 0x5b);
    poke(0x3143, 0xb1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5c75,
        bc: 0xb3bd,
        de: 0x25bd,
        hl: 0x98cf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2ba1,
        iy: 0x315c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb5c | BIT 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb5c | BIT 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb3e0,
        bc: 0xd43d,
        de: 0xd9c0,
        hl: 0xb04d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x21a9,
        iy: 0x543e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x74);
    poke(0x0003, 0x5c);
    poke(0x54b2, 0xe3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb354,
        bc: 0xd43d,
        de: 0xd9c0,
        hl: 0xb04d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x21a9,
        iy: 0x543e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb5d | BIT 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb5d | BIT 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9f49,
        bc: 0x43dd,
        de: 0xccb3,
        hl: 0x085a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf130,
        iy: 0x3b84,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xdc);
    poke(0x0003, 0x5d);
    poke(0x3b60, 0xef);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9f39,
        bc: 0x43dd,
        de: 0xccb3,
        hl: 0x085a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf130,
        iy: 0x3b84,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb5e | BIT 3, (IY+*)
  test(
      "OPCODE "
      "fdcb5e | BIT 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6f89,
        bc: 0xeff5,
        de: 0x993b,
        hl: 0x22b5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0f30,
        iy: 0xe165,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe2);
    poke(0x0003, 0x5e);
    poke(0xe147, 0x17);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6f75,
        bc: 0xeff5,
        de: 0x993b,
        hl: 0x22b5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0f30,
        iy: 0xe165,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fdcb5f | BIT 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb5f | BIT 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd72a,
        bc: 0xa57a,
        de: 0xaca6,
        hl: 0x667e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5c33,
        iy: 0xf81b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xab);
    poke(0x0003, 0x5f);
    poke(0xf7c6, 0xe2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd774,
        bc: 0xa57a,
        de: 0xaca6,
        hl: 0x667e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5c33,
        iy: 0xf81b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb60 | BIT 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb60 | BIT 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x15e9,
        bc: 0x8d30,
        de: 0x43f4,
        hl: 0xc65e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1e34,
        iy: 0x8c44,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x85);
    poke(0x0003, 0x60);
    poke(0x8bc9, 0xb9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1519,
        bc: 0x8d30,
        de: 0x43f4,
        hl: 0xc65e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1e34,
        iy: 0x8c44,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb61 | BIT 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb61 | BIT 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7bd1,
        bc: 0xd421,
        de: 0x5570,
        hl: 0xcb85,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x32ec,
        iy: 0x92e4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbe);
    poke(0x0003, 0x61);
    poke(0x92a2, 0x28);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7b55,
        bc: 0xd421,
        de: 0x5570,
        hl: 0xcb85,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x32ec,
        iy: 0x92e4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb62 | BIT 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb62 | BIT 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xba2f,
        bc: 0x4fbb,
        de: 0x67a7,
        hl: 0xc5db,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x470b,
        iy: 0x7eb1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9d);
    poke(0x0003, 0x62);
    poke(0x7e4e, 0x1a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xba39,
        bc: 0x4fbb,
        de: 0x67a7,
        hl: 0xc5db,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x470b,
        iy: 0x7eb1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb63 | BIT 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb63 | BIT 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc0a1,
        bc: 0x2cc2,
        de: 0xce12,
        hl: 0xe77c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x71c5,
        iy: 0x1713,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf4);
    poke(0x0003, 0x63);
    poke(0x1707, 0x3b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc011,
        bc: 0x2cc2,
        de: 0xce12,
        hl: 0xe77c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x71c5,
        iy: 0x1713,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb64 | BIT 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb64 | BIT 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0c1f,
        bc: 0x7847,
        de: 0x2494,
        hl: 0x71eb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x315c,
        iy: 0xb336,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x35);
    poke(0x0003, 0x64);
    poke(0xb36b, 0x8c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0c75,
        bc: 0x7847,
        de: 0x2494,
        hl: 0x71eb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x315c,
        iy: 0xb336,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb65 | BIT 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb65 | BIT 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5245,
        bc: 0xa82d,
        de: 0x1112,
        hl: 0x8f09,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x672a,
        iy: 0x89f4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x37);
    poke(0x0003, 0x65);
    poke(0x8a2b, 0x08);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x525d,
        bc: 0xa82d,
        de: 0x1112,
        hl: 0x8f09,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x672a,
        iy: 0x89f4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb66 | BIT 4, (IY+*)
  test(
      "OPCODE "
      "fdcb66 | BIT 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x583f,
        bc: 0xc13e,
        de: 0xb136,
        hl: 0x6bc5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3ef9,
        iy: 0x6948,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9d);
    poke(0x0003, 0x66);
    poke(0x68e5, 0x90);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5839,
        bc: 0xc13e,
        de: 0xb136,
        hl: 0x6bc5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3ef9,
        iy: 0x6948,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fdcb67 | BIT 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb67 | BIT 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x31b6,
        bc: 0x0f7d,
        de: 0x48b5,
        hl: 0xcc5f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2103,
        iy: 0x6572,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xcb);
    poke(0x0003, 0x67);
    poke(0x653d, 0x15);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3130,
        bc: 0x0f7d,
        de: 0x48b5,
        hl: 0xcc5f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2103,
        iy: 0x6572,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb68 | BIT 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb68 | BIT 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe330,
        bc: 0x39fb,
        de: 0xa03a,
        hl: 0x59bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe04a,
        iy: 0x03be,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xca);
    poke(0x0003, 0x68);
    poke(0x0388, 0x83);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe354,
        bc: 0x39fb,
        de: 0xa03a,
        hl: 0x59bc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe04a,
        iy: 0x03be,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb69 | BIT 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb69 | BIT 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1896,
        bc: 0x5bc2,
        de: 0xd4d9,
        hl: 0x4e8a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3716,
        iy: 0xa603,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe2);
    poke(0x0003, 0x69);
    poke(0xa5e5, 0x01);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1874,
        bc: 0x5bc2,
        de: 0xd4d9,
        hl: 0x4e8a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3716,
        iy: 0xa603,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb6a | BIT 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb6a | BIT 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5bc9,
        bc: 0x0099,
        de: 0x34f8,
        hl: 0x3e96,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf251,
        iy: 0x93be,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xae);
    poke(0x0003, 0x6a);
    poke(0x936c, 0x33);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5b11,
        bc: 0x0099,
        de: 0x34f8,
        hl: 0x3e96,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf251,
        iy: 0x93be,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb6b | BIT 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb6b | BIT 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbbe5,
        bc: 0x9e6c,
        de: 0xabd1,
        hl: 0x515f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x73db,
        iy: 0xaa2f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x1f);
    poke(0x0003, 0x6b);
    poke(0xaa4e, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbb39,
        bc: 0x9e6c,
        de: 0xabd1,
        hl: 0x515f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x73db,
        iy: 0xaa2f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb6c | BIT 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb6c | BIT 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x144b,
        bc: 0x3af2,
        de: 0x8f80,
        hl: 0x7be5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc379,
        iy: 0x86ba,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0d);
    poke(0x0003, 0x6c);
    poke(0x86c7, 0x25);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1411,
        bc: 0x3af2,
        de: 0x8f80,
        hl: 0x7be5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc379,
        iy: 0x86ba,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb6d | BIT 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb6d | BIT 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6392,
        bc: 0xd077,
        de: 0x668d,
        hl: 0x6e4a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb0a8,
        iy: 0x62c8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf0);
    poke(0x0003, 0x6d);
    poke(0x62b8, 0xe3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6330,
        bc: 0xd077,
        de: 0x668d,
        hl: 0x6e4a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb0a8,
        iy: 0x62c8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb6e | BIT 5, (IY+*)
  test(
      "OPCODE "
      "fdcb6e | BIT 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2da0,
        bc: 0xf872,
        de: 0x692d,
        hl: 0x92c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x36b5,
        iy: 0x4210,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x93);
    poke(0x0003, 0x6e);
    poke(0x41a3, 0x1e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2d54,
        bc: 0xf872,
        de: 0x692d,
        hl: 0x92c4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x36b5,
        iy: 0x4210,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fdcb6f | BIT 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb6f | BIT 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdf7b,
        bc: 0xc7aa,
        de: 0x9002,
        hl: 0x86b8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1347,
        iy: 0x004e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x20);
    poke(0x0003, 0x6f);
    poke(0x006e, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdf11,
        bc: 0xc7aa,
        de: 0x9002,
        hl: 0x86b8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1347,
        iy: 0x004e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb70 | BIT 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb70 | BIT 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6ea9,
        bc: 0x018d,
        de: 0x5075,
        hl: 0xcf4e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcd2b,
        iy: 0x3e68,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd9);
    poke(0x0003, 0x70);
    poke(0x3e41, 0xc9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6e39,
        bc: 0x018d,
        de: 0x5075,
        hl: 0xcf4e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcd2b,
        iy: 0x3e68,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb71 | BIT 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb71 | BIT 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1b48,
        bc: 0xe3af,
        de: 0x94d5,
        hl: 0x0996,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcad5,
        iy: 0x999a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x27);
    poke(0x0003, 0x71);
    poke(0x99c1, 0x3e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1b5c,
        bc: 0xe3af,
        de: 0x94d5,
        hl: 0x0996,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcad5,
        iy: 0x999a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb72 | BIT 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb72 | BIT 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe83b,
        bc: 0x26b1,
        de: 0x8608,
        hl: 0xf3cb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6323,
        iy: 0xfd31,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x98);
    poke(0x0003, 0x72);
    poke(0xfcc9, 0x4f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe839,
        bc: 0x26b1,
        de: 0x8608,
        hl: 0xf3cb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6323,
        iy: 0xfd31,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb73 | BIT 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb73 | BIT 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x101b,
        bc: 0x446c,
        de: 0xc2f9,
        hl: 0xb9b1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0820,
        iy: 0xf5d8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7a);
    poke(0x0003, 0x73);
    poke(0xf652, 0x31);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1075,
        bc: 0x446c,
        de: 0xc2f9,
        hl: 0xb9b1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0820,
        iy: 0xf5d8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb74 | BIT 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb74 | BIT 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6847,
        bc: 0x38c2,
        de: 0x0ea4,
        hl: 0x0825,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd255,
        iy: 0x5e4a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4b);
    poke(0x0003, 0x74);
    poke(0x5e95, 0xfe);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6819,
        bc: 0x38c2,
        de: 0x0ea4,
        hl: 0x0825,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd255,
        iy: 0x5e4a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb75 | BIT 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb75 | BIT 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x56f2,
        bc: 0xc034,
        de: 0x6e11,
        hl: 0xd35e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe702,
        iy: 0x60be,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x57);
    poke(0x0003, 0x75);
    poke(0x6115, 0x21);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5674,
        bc: 0xc034,
        de: 0x6e11,
        hl: 0xd35e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe702,
        iy: 0x60be,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb76 | BIT 6, (IY+*)
  test(
      "OPCODE "
      "fdcb76 | BIT 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7375,
        bc: 0xcaff,
        de: 0xdd80,
        hl: 0xc8ed,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7e39,
        iy: 0x6623,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x53);
    poke(0x0003, 0x76);
    poke(0x6676, 0x3a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7375,
        bc: 0xcaff,
        de: 0xdd80,
        hl: 0xc8ed,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7e39,
        iy: 0x6623,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fdcb77 | BIT 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb77 | BIT 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xab10,
        bc: 0x983e,
        de: 0x0bdc,
        hl: 0x3b46,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae51,
        iy: 0x8841,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x02);
    poke(0x0003, 0x77);
    poke(0x8843, 0xd8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xab18,
        bc: 0x983e,
        de: 0x0bdc,
        hl: 0x3b46,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae51,
        iy: 0x8841,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb78 | BIT 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb78 | BIT 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2765,
        bc: 0xce2f,
        de: 0x4824,
        hl: 0x6930,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae69,
        iy: 0xfecb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7d);
    poke(0x0003, 0x78);
    poke(0xff48, 0xec);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x27b9,
        bc: 0xce2f,
        de: 0x4824,
        hl: 0x6930,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xae69,
        iy: 0xfecb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb79 | BIT 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb79 | BIT 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb428,
        bc: 0x6355,
        de: 0x7896,
        hl: 0x8a7c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9090,
        iy: 0x1cae,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x23);
    poke(0x0003, 0x79);
    poke(0x1cd1, 0x87);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb498,
        bc: 0x6355,
        de: 0x7896,
        hl: 0x8a7c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9090,
        iy: 0x1cae,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb7a | BIT 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb7a | BIT 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x59f4,
        bc: 0xca21,
        de: 0x1482,
        hl: 0x3fae,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc6c9,
        iy: 0xd923,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x42);
    poke(0x0003, 0x7a);
    poke(0xd965, 0xb3);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5998,
        bc: 0xca21,
        de: 0x1482,
        hl: 0x3fae,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc6c9,
        iy: 0xd923,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb7b | BIT 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb7b | BIT 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6314,
        bc: 0x0240,
        de: 0x5efa,
        hl: 0x5e7b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3e50,
        iy: 0x0a83,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x17);
    poke(0x0003, 0x7b);
    poke(0x0a9a, 0xbd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6398,
        bc: 0x0240,
        de: 0x5efa,
        hl: 0x5e7b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3e50,
        iy: 0x0a83,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb7c | BIT 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb7c | BIT 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x22a6,
        bc: 0xaff4,
        de: 0xb89b,
        hl: 0x4dca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0ac2,
        iy: 0xd371,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf1);
    poke(0x0003, 0x7c);
    poke(0xd362, 0x1b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2254,
        bc: 0xaff4,
        de: 0xb89b,
        hl: 0x4dca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0ac2,
        iy: 0xd371,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb7d | BIT 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb7d | BIT 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1c95,
        bc: 0xd615,
        de: 0x825a,
        hl: 0x5e64,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x32fb,
        iy: 0xac3b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9f);
    poke(0x0003, 0x7d);
    poke(0xabda, 0x8a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1cb9,
        bc: 0xd615,
        de: 0x825a,
        hl: 0x5e64,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x32fb,
        iy: 0xac3b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb7e | BIT 7, (IY+*)
  test(
      "OPCODE "
      "fdcb7e | BIT 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x503c,
        bc: 0x8dfe,
        de: 0x1019,
        hl: 0x6778,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf7df,
        iy: 0x9484,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x40);
    poke(0x0003, 0x7e);
    poke(0x94c4, 0x9e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5090,
        bc: 0x8dfe,
        de: 0x1019,
        hl: 0x6778,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf7df,
        iy: 0x9484,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  });

  // Test instruction fdcb7f | BIT 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb7f | BIT 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1b07,
        bc: 0x9ec3,
        de: 0x14be,
        hl: 0x5ebe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1178,
        iy: 0xce69,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa2);
    poke(0x0003, 0x7f);
    poke(0xce0b, 0x47);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1b5d,
        bc: 0x9ec3,
        de: 0x14be,
        hl: 0x5ebe,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1178,
        iy: 0xce69,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 20);
  }, tags: 'undocumented');

  // Test instruction fdcb80 | RES 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb80 | RES 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe196,
        bc: 0x72ea,
        de: 0x507e,
        hl: 0x6457,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xab75,
        iy: 0x920d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8b);
    poke(0x0003, 0x80);
    poke(0x9198, 0xa9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe196,
        bc: 0xa8ea,
        de: 0x507e,
        hl: 0x6457,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xab75,
        iy: 0x920d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(37272), equals(0xa8));
  }, tags: 'undocumented');

  // Test instruction fdcb81 | RES 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb81 | RES 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3d3d,
        bc: 0xb255,
        de: 0x8759,
        hl: 0x0cb0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe078,
        iy: 0x82a5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x55);
    poke(0x0003, 0x81);
    poke(0x82fa, 0xfa);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3d3d,
        bc: 0xb2fa,
        de: 0x8759,
        hl: 0x0cb0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe078,
        iy: 0x82a5,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb82 | RES 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb82 | RES 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4e10,
        bc: 0x5d8d,
        de: 0x27a0,
        hl: 0xffff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xee0a,
        iy: 0x5dd8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9c);
    poke(0x0003, 0x82);
    poke(0x5d74, 0x9d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4e10,
        bc: 0x5d8d,
        de: 0x9ca0,
        hl: 0xffff,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xee0a,
        iy: 0x5dd8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(23924), equals(0x9c));
  }, tags: 'undocumented');

  // Test instruction fdcb83 | RES 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb83 | RES 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3c7f,
        bc: 0xfd81,
        de: 0x47fb,
        hl: 0x9f12,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcbf9,
        iy: 0x374a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x28);
    poke(0x0003, 0x83);
    poke(0x3772, 0xd5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3c7f,
        bc: 0xfd81,
        de: 0x47d4,
        hl: 0x9f12,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcbf9,
        iy: 0x374a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(14194), equals(0xd4));
  }, tags: 'undocumented');

  // Test instruction fdcb84 | RES 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb84 | RES 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6872,
        bc: 0x81b1,
        de: 0x1e7a,
        hl: 0xe37e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9b4c,
        iy: 0xf1c3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xaa);
    poke(0x0003, 0x84);
    poke(0xf16d, 0xea);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6872,
        bc: 0x81b1,
        de: 0x1e7a,
        hl: 0xea7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9b4c,
        iy: 0xf1c3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb85 | RES 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb85 | RES 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x25b3,
        bc: 0x5694,
        de: 0x57cd,
        hl: 0xf34d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8ed2,
        iy: 0x0433,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6c);
    poke(0x0003, 0x85);
    poke(0x049f, 0xe0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x25b3,
        bc: 0x5694,
        de: 0x57cd,
        hl: 0xf3e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8ed2,
        iy: 0x0433,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb86 | RES 0, (IY+*)
  test(
      "OPCODE "
      "fdcb86 | RES 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x152b,
        bc: 0x8ce1,
        de: 0x818d,
        hl: 0x40f2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9b7a,
        iy: 0x2a50,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7e);
    poke(0x0003, 0x86);
    poke(0x2ace, 0x36);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x152b,
        bc: 0x8ce1,
        de: 0x818d,
        hl: 0x40f2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9b7a,
        iy: 0x2a50,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction fdcb87 | RES 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb87 | RES 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfe1d,
        bc: 0x5353,
        de: 0x618d,
        hl: 0x3266,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1a53,
        iy: 0x246a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x59);
    poke(0x0003, 0x87);
    poke(0x24c3, 0x65);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x641d,
        bc: 0x5353,
        de: 0x618d,
        hl: 0x3266,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1a53,
        iy: 0x246a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(9411), equals(0x64));
  }, tags: 'undocumented');

  // Test instruction fdcb88 | RES 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb88 | RES 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7d14,
        bc: 0xa0ec,
        de: 0x1e47,
        hl: 0x76e1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3871,
        iy: 0xc60d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd4);
    poke(0x0003, 0x88);
    poke(0xc5e1, 0xd6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7d14,
        bc: 0xd4ec,
        de: 0x1e47,
        hl: 0x76e1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3871,
        iy: 0xc60d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(50657), equals(0xd4));
  }, tags: 'undocumented');

  // Test instruction fdcb89 | RES 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb89 | RES 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x86c3,
        bc: 0x50a6,
        de: 0x8592,
        hl: 0xd6ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x947b,
        iy: 0x0a01,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc3);
    poke(0x0003, 0x89);
    poke(0x09c4, 0xb0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x86c3,
        bc: 0x50b0,
        de: 0x8592,
        hl: 0xd6ca,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x947b,
        iy: 0x0a01,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb8a | RES 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb8a | RES 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x599c,
        bc: 0x961a,
        de: 0x55f9,
        hl: 0x8470,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd2a5,
        iy: 0xd4d2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf9);
    poke(0x0003, 0x8a);
    poke(0xd4cb, 0xd8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x599c,
        bc: 0x961a,
        de: 0xd8f9,
        hl: 0x8470,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd2a5,
        iy: 0xd4d2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb8b | RES 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb8b | RES 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2715,
        bc: 0xa209,
        de: 0xab47,
        hl: 0x3eac,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf352,
        iy: 0xc71e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xed);
    poke(0x0003, 0x8b);
    poke(0xc70b, 0xdc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2715,
        bc: 0xa209,
        de: 0xabdc,
        hl: 0x3eac,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf352,
        iy: 0xc71e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb8c | RES 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb8c | RES 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2818,
        bc: 0x4259,
        de: 0xa9b0,
        hl: 0xe7a0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6471,
        iy: 0xa202,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x97);
    poke(0x0003, 0x8c);
    poke(0xa199, 0x67);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2818,
        bc: 0x4259,
        de: 0xa9b0,
        hl: 0x65a0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6471,
        iy: 0xa202,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(41369), equals(0x65));
  }, tags: 'undocumented');

  // Test instruction fdcb8d | RES 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb8d | RES 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x14e3,
        bc: 0xc330,
        de: 0x9aa2,
        hl: 0x8418,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0d4f,
        iy: 0x5669,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc9);
    poke(0x0003, 0x8d);
    poke(0x5632, 0x9a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x14e3,
        bc: 0xc330,
        de: 0x9aa2,
        hl: 0x8498,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0d4f,
        iy: 0x5669,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22066), equals(0x98));
  }, tags: 'undocumented');

  // Test instruction fdcb8e | RES 1, (IY+*)
  test(
      "OPCODE "
      "fdcb8e | RES 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xcb79,
        bc: 0x0fff,
        de: 0xb244,
        hl: 0xc902,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6246,
        iy: 0x4c81,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc2);
    poke(0x0003, 0x8e);
    poke(0x4c43, 0x7f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xcb79,
        bc: 0x0fff,
        de: 0xb244,
        hl: 0xc902,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6246,
        iy: 0x4c81,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(19523), equals(0x7d));
  });

  // Test instruction fdcb8f | RES 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb8f | RES 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x66b4,
        bc: 0x5fbb,
        de: 0x6c9b,
        hl: 0xd0e3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xac5a,
        iy: 0x6b51,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd4);
    poke(0x0003, 0x8f);
    poke(0x6b25, 0x59);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x59b4,
        bc: 0x5fbb,
        de: 0x6c9b,
        hl: 0xd0e3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xac5a,
        iy: 0x6b51,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb90 | RES 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb90 | RES 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1305,
        bc: 0x1ce1,
        de: 0xd627,
        hl: 0x7402,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb470,
        iy: 0xd7f5,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xfd);
    poke(0x0003, 0x90);
    poke(0xd7f2, 0x70);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1305,
        bc: 0x70e1,
        de: 0xd627,
        hl: 0x7402,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb470,
        iy: 0xd7f5,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb91 | RES 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb91 | RES 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x10df,
        bc: 0xc48f,
        de: 0x0213,
        hl: 0xfc7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbfab,
        iy: 0x47d2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbf);
    poke(0x0003, 0x91);
    poke(0x4791, 0x0e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x10df,
        bc: 0xc40a,
        de: 0x0213,
        hl: 0xfc7e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbfab,
        iy: 0x47d2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(18321), equals(0x0a));
  }, tags: 'undocumented');

  // Test instruction fdcb92 | RES 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb92 | RES 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6a11,
        bc: 0xf89e,
        de: 0xf49d,
        hl: 0xc115,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbc5d,
        iy: 0x313a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0b);
    poke(0x0003, 0x92);
    poke(0x3145, 0xf6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6a11,
        bc: 0xf89e,
        de: 0xf29d,
        hl: 0xc115,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbc5d,
        iy: 0x313a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(12613), equals(0xf2));
  }, tags: 'undocumented');

  // Test instruction fdcb93 | RES 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb93 | RES 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x61e5,
        bc: 0xcc2c,
        de: 0x959a,
        hl: 0xb52b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfa64,
        iy: 0x2940,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x52);
    poke(0x0003, 0x93);
    poke(0x2992, 0x38);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x61e5,
        bc: 0xcc2c,
        de: 0x9538,
        hl: 0xb52b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfa64,
        iy: 0x2940,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb94 | RES 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb94 | RES 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x31b4,
        bc: 0x3e5a,
        de: 0xfb3d,
        hl: 0xab83,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa801,
        iy: 0xfe1c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x95);
    poke(0x0003, 0x94);
    poke(0xfdb1, 0x48);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x31b4,
        bc: 0x3e5a,
        de: 0xfb3d,
        hl: 0x4883,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa801,
        iy: 0xfe1c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb95 | RES 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb95 | RES 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x337e,
        bc: 0x63a7,
        de: 0x2918,
        hl: 0xed6b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb12c,
        iy: 0xe776,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x90);
    poke(0x0003, 0x95);
    poke(0xe706, 0xeb);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x337e,
        bc: 0x63a7,
        de: 0x2918,
        hl: 0xedeb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb12c,
        iy: 0xe776,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb96 | RES 2, (IY+*)
  test(
      "OPCODE "
      "fdcb96 | RES 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5d99,
        bc: 0xd9ec,
        de: 0xb6d0,
        hl: 0x5ed5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5d9d,
        iy: 0xe6cf,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9e);
    poke(0x0003, 0x96);
    poke(0xe66d, 0xfc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5d99,
        bc: 0xd9ec,
        de: 0xb6d0,
        hl: 0x5ed5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5d9d,
        iy: 0xe6cf,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(58989), equals(0xf8));
  });

  // Test instruction fdcb97 | RES 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb97 | RES 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xccb6,
        bc: 0x8406,
        de: 0x72c6,
        hl: 0x1ba7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6dca,
        iy: 0x187f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x64);
    poke(0x0003, 0x97);
    poke(0x18e3, 0x9d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x99b6,
        bc: 0x8406,
        de: 0x72c6,
        hl: 0x1ba7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6dca,
        iy: 0x187f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(6371), equals(0x99));
  }, tags: 'undocumented');

  // Test instruction fdcb98 | RES 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb98 | RES 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0495,
        bc: 0x312f,
        de: 0x8000,
        hl: 0xb749,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe9cb,
        iy: 0x43b8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xda);
    poke(0x0003, 0x98);
    poke(0x4392, 0x15);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0495,
        bc: 0x152f,
        de: 0x8000,
        hl: 0xb749,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe9cb,
        iy: 0x43b8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb99 | RES 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb99 | RES 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2824,
        bc: 0xa485,
        de: 0xa30b,
        hl: 0xb286,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x10b0,
        iy: 0xd86c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x78);
    poke(0x0003, 0x99);
    poke(0xd8e4, 0xb5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2824,
        bc: 0xa4b5,
        de: 0xa30b,
        hl: 0xb286,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x10b0,
        iy: 0xd86c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb9a | RES 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb9a | RES 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb0cc,
        bc: 0xc40c,
        de: 0xdc1a,
        hl: 0x014a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2ff9,
        iy: 0xd717,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9c);
    poke(0x0003, 0x9a);
    poke(0xd6b3, 0x9d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb0cc,
        bc: 0xc40c,
        de: 0x951a,
        hl: 0x014a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2ff9,
        iy: 0xd717,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(54963), equals(0x95));
  }, tags: 'undocumented');

  // Test instruction fdcb9b | RES 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb9b | RES 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd092,
        bc: 0xa6c2,
        de: 0x7900,
        hl: 0x5448,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfab0,
        iy: 0xcb1e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x83);
    poke(0x0003, 0x9b);
    poke(0xcaa1, 0x95);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd092,
        bc: 0xa6c2,
        de: 0x7995,
        hl: 0x5448,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfab0,
        iy: 0xcb1e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb9c | RES 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb9c | RES 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb58d,
        bc: 0x1ed1,
        de: 0xe93b,
        hl: 0x9e0c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5605,
        iy: 0x03b3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x1e);
    poke(0x0003, 0x9c);
    poke(0x03d1, 0x78);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb58d,
        bc: 0x1ed1,
        de: 0xe93b,
        hl: 0x700c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5605,
        iy: 0x03b3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(977), equals(0x70));
  }, tags: 'undocumented');

  // Test instruction fdcb9d | RES 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb9d | RES 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc7e9,
        bc: 0x18d3,
        de: 0x8eed,
        hl: 0xbd7d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9a7f,
        iy: 0xc087,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe6);
    poke(0x0003, 0x9d);
    poke(0xc06d, 0x53);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc7e9,
        bc: 0x18d3,
        de: 0x8eed,
        hl: 0xbd53,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9a7f,
        iy: 0xc087,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcb9e | RES 3, (IY+*)
  test(
      "OPCODE "
      "fdcb9e | RES 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x81c7,
        bc: 0x71df,
        de: 0x45d5,
        hl: 0x0ca7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x648f,
        iy: 0x41bd,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xeb);
    poke(0x0003, 0x9e);
    poke(0x41a8, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x81c7,
        bc: 0x71df,
        de: 0x45d5,
        hl: 0x0ca7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x648f,
        iy: 0x41bd,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction fdcb9f | RES 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcb9f | RES 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xebf5,
        bc: 0xdc9f,
        de: 0xd490,
        hl: 0x15be,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0e12,
        iy: 0x9d49,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x50);
    poke(0x0003, 0x9f);
    poke(0x9d99, 0x89);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x81f5,
        bc: 0xdc9f,
        de: 0xd490,
        hl: 0x15be,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0e12,
        iy: 0x9d49,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(40345), equals(0x81));
  }, tags: 'undocumented');

  // Test instruction fdcba0 | RES 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba0 | RES 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8ccb,
        bc: 0x0057,
        de: 0xbc19,
        hl: 0xe543,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8c5d,
        iy: 0xd68d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x76);
    poke(0x0003, 0xa0);
    poke(0xd703, 0xd4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8ccb,
        bc: 0xc457,
        de: 0xbc19,
        hl: 0xe543,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8c5d,
        iy: 0xd68d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(55043), equals(0xc4));
  }, tags: 'undocumented');

  // Test instruction fdcba1 | RES 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba1 | RES 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xeee6,
        bc: 0x6da4,
        de: 0x3a20,
        hl: 0x8bba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1de7,
        iy: 0x66c8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x31);
    poke(0x0003, 0xa1);
    poke(0x66f9, 0xec);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xeee6,
        bc: 0x6dec,
        de: 0x3a20,
        hl: 0x8bba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1de7,
        iy: 0x66c8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcba2 | RES 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba2 | RES 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3f89,
        bc: 0x5120,
        de: 0x0bd1,
        hl: 0xe669,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2993,
        iy: 0x04bf,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0e);
    poke(0x0003, 0xa2);
    poke(0x04cd, 0x47);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3f89,
        bc: 0x5120,
        de: 0x47d1,
        hl: 0xe669,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2993,
        iy: 0x04bf,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcba3 | RES 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba3 | RES 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4439,
        bc: 0x6b8b,
        de: 0x6178,
        hl: 0x1246,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4cdb,
        iy: 0xad77,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x05);
    poke(0x0003, 0xa3);
    poke(0xad7c, 0x59);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4439,
        bc: 0x6b8b,
        de: 0x6149,
        hl: 0x1246,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4cdb,
        iy: 0xad77,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(44412), equals(0x49));
  }, tags: 'undocumented');

  // Test instruction fdcba4 | RES 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba4 | RES 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3385,
        bc: 0x261e,
        de: 0xa487,
        hl: 0xb3bd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4b8f,
        iy: 0xc0cd,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x66);
    poke(0x0003, 0xa4);
    poke(0xc133, 0xc5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3385,
        bc: 0x261e,
        de: 0xa487,
        hl: 0xc5bd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4b8f,
        iy: 0xc0cd,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcba5 | RES 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba5 | RES 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6e70,
        bc: 0xb7ed,
        de: 0x22cd,
        hl: 0xaedc,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x46de,
        iy: 0xf1a1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa0);
    poke(0x0003, 0xa5);
    poke(0xf141, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6e70,
        bc: 0xb7ed,
        de: 0x22cd,
        hl: 0xae44,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x46de,
        iy: 0xf1a1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcba6 | RES 4, (IY+*)
  test(
      "OPCODE "
      "fdcba6 | RES 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x814b,
        bc: 0x6408,
        de: 0x3dcb,
        hl: 0x971f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5716,
        iy: 0x93f3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x76);
    poke(0x0003, 0xa6);
    poke(0x9469, 0xbc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x814b,
        bc: 0x6408,
        de: 0x3dcb,
        hl: 0x971f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5716,
        iy: 0x93f3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(37993), equals(0xac));
  });

  // Test instruction fdcba7 | RES 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba7 | RES 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa4c2,
        bc: 0x679e,
        de: 0xc313,
        hl: 0x61df,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x67e6,
        iy: 0x79c4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x66);
    poke(0x0003, 0xa7);
    poke(0x7a2a, 0x2e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2ec2,
        bc: 0x679e,
        de: 0xc313,
        hl: 0x61df,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x67e6,
        iy: 0x79c4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcba8 | RES 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba8 | RES 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x537c,
        bc: 0x1fed,
        de: 0x6cbb,
        hl: 0xbd26,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc638,
        iy: 0x0d46,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa9);
    poke(0x0003, 0xa8);
    poke(0x0cef, 0xb7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x537c,
        bc: 0x97ed,
        de: 0x6cbb,
        hl: 0xbd26,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc638,
        iy: 0x0d46,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(3311), equals(0x97));
  }, tags: 'undocumented');

  // Test instruction fdcba9 | RES 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcba9 | RES 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xba5a,
        bc: 0x3076,
        de: 0xcdd7,
        hl: 0x298d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x59ab,
        iy: 0x0f54,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2b);
    poke(0x0003, 0xa9);
    poke(0x0f7f, 0x8f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xba5a,
        bc: 0x308f,
        de: 0xcdd7,
        hl: 0x298d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x59ab,
        iy: 0x0f54,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbaa | RES 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbaa | RES 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x406a,
        bc: 0x2ed6,
        de: 0xfa8c,
        hl: 0xc633,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x87cb,
        iy: 0xb3d1,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0b);
    poke(0x0003, 0xaa);
    poke(0xb3dc, 0x3a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x406a,
        bc: 0x2ed6,
        de: 0x1a8c,
        hl: 0xc633,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x87cb,
        iy: 0xb3d1,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(46044), equals(0x1a));
  }, tags: 'undocumented');

  // Test instruction fdcbab | RES 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbab | RES 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xda61,
        bc: 0x0521,
        de: 0xa123,
        hl: 0xc7fa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb71a,
        iy: 0x8ece,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa9);
    poke(0x0003, 0xab);
    poke(0x8e77, 0x1f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xda61,
        bc: 0x0521,
        de: 0xa11f,
        hl: 0xc7fa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb71a,
        iy: 0x8ece,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbac | RES 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbac | RES 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x34a3,
        bc: 0x81ce,
        de: 0x07d6,
        hl: 0xf3a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x430b,
        iy: 0x0525,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x23);
    poke(0x0003, 0xac);
    poke(0x0548, 0x9c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x34a3,
        bc: 0x81ce,
        de: 0x07d6,
        hl: 0x9ca4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x430b,
        iy: 0x0525,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbad | RES 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbad | RES 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5010,
        bc: 0x918e,
        de: 0xddbc,
        hl: 0x4f89,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x88c5,
        iy: 0x948f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x4e);
    poke(0x0003, 0xad);
    poke(0x94dd, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5010,
        bc: 0x918e,
        de: 0xddbc,
        hl: 0x4f17,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x88c5,
        iy: 0x948f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(38109), equals(0x17));
  }, tags: 'undocumented');

  // Test instruction fdcbae | RES 5, (IY+*)
  test(
      "OPCODE "
      "fdcbae | RES 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xec0d,
        bc: 0xb57e,
        de: 0x18c6,
        hl: 0x7b01,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbac6,
        iy: 0x0c1d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0c);
    poke(0x0003, 0xae);
    poke(0x0c29, 0xa9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xec0d,
        bc: 0xb57e,
        de: 0x18c6,
        hl: 0x7b01,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbac6,
        iy: 0x0c1d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(3113), equals(0x89));
  });

  // Test instruction fdcbaf | RES 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbaf | RES 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb322,
        bc: 0x6731,
        de: 0xdaad,
        hl: 0x8d38,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdd8f,
        iy: 0x26eb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0d);
    poke(0x0003, 0xaf);
    poke(0x26f8, 0x44);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4422,
        bc: 0x6731,
        de: 0xdaad,
        hl: 0x8d38,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xdd8f,
        iy: 0x26eb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbb0 | RES 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb0 | RES 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb984,
        bc: 0x796c,
        de: 0x44b1,
        hl: 0xfef9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4069,
        iy: 0xa0cb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x5a);
    poke(0x0003, 0xb0);
    poke(0xa125, 0x76);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb984,
        bc: 0x366c,
        de: 0x44b1,
        hl: 0xfef9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4069,
        iy: 0xa0cb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(41253), equals(0x36));
  }, tags: 'undocumented');

  // Test instruction fdcbb1 | RES 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb1 | RES 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x59c3,
        bc: 0xab13,
        de: 0x42ee,
        hl: 0xb764,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8f7f,
        iy: 0xf398,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x82);
    poke(0x0003, 0xb1);
    poke(0xf31a, 0x79);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x59c3,
        bc: 0xab39,
        de: 0x42ee,
        hl: 0xb764,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8f7f,
        iy: 0xf398,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(62234), equals(0x39));
  }, tags: 'undocumented');

  // Test instruction fdcbb2 | RES 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb2 | RES 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf310,
        bc: 0xceec,
        de: 0xbbfb,
        hl: 0x3569,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4a6f,
        iy: 0x33f9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x23);
    poke(0x0003, 0xb2);
    poke(0x341c, 0x7b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xf310,
        bc: 0xceec,
        de: 0x3bfb,
        hl: 0x3569,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4a6f,
        iy: 0x33f9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(13340), equals(0x3b));
  }, tags: 'undocumented');

  // Test instruction fdcbb3 | RES 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb3 | RES 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9c05,
        bc: 0x0f92,
        de: 0xbd3b,
        hl: 0x553d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc75e,
        iy: 0x51d2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x6c);
    poke(0x0003, 0xb3);
    poke(0x523e, 0x37);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9c05,
        bc: 0x0f92,
        de: 0xbd37,
        hl: 0x553d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc75e,
        iy: 0x51d2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbb4 | RES 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb4 | RES 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3e55,
        bc: 0x1338,
        de: 0x638d,
        hl: 0x353c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x44ad,
        iy: 0x4d17,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc5);
    poke(0x0003, 0xb4);
    poke(0x4cdc, 0xe9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3e55,
        bc: 0x1338,
        de: 0x638d,
        hl: 0xa93c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x44ad,
        iy: 0x4d17,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(19676), equals(0xa9));
  }, tags: 'undocumented');

  // Test instruction fdcbb5 | RES 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb5 | RES 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2f3a,
        bc: 0xb709,
        de: 0x4167,
        hl: 0x57be,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb543,
        iy: 0x8edd,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x50);
    poke(0x0003, 0xb5);
    poke(0x8f2d, 0x0f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2f3a,
        bc: 0xb709,
        de: 0x4167,
        hl: 0x570f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb543,
        iy: 0x8edd,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbb6 | RES 6, (IY+*)
  test(
      "OPCODE "
      "fdcbb6 | RES 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xa887,
        bc: 0x519b,
        de: 0xc91b,
        hl: 0xcc91,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa416,
        iy: 0x1e16,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3a);
    poke(0x0003, 0xb6);
    poke(0x1e50, 0x13);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xa887,
        bc: 0x519b,
        de: 0xc91b,
        hl: 0xcc91,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa416,
        iy: 0x1e16,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction fdcbb7 | RES 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb7 | RES 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1335,
        bc: 0xa599,
        de: 0x9fbf,
        hl: 0xc111,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8bc5,
        iy: 0x00a9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc0);
    poke(0x0003, 0xb7);
    poke(0x0069, 0x38);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3835,
        bc: 0xa599,
        de: 0x9fbf,
        hl: 0xc111,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8bc5,
        iy: 0x00a9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbb8 | RES 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb8 | RES 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd146,
        bc: 0x1138,
        de: 0x1a45,
        hl: 0x8259,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6a03,
        iy: 0xd087,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x31);
    poke(0x0003, 0xb8);
    poke(0xd0b8, 0x17);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd146,
        bc: 0x1738,
        de: 0x1a45,
        hl: 0x8259,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6a03,
        iy: 0xd087,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbb9 | RES 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbb9 | RES 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x757b,
        bc: 0x0b9e,
        de: 0x767b,
        hl: 0x2ad1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1498,
        iy: 0xb84e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3b);
    poke(0x0003, 0xb9);
    poke(0xb889, 0xb4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x757b,
        bc: 0x0b34,
        de: 0x767b,
        hl: 0x2ad1,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1498,
        iy: 0xb84e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(47241), equals(0x34));
  }, tags: 'undocumented');

  // Test instruction fdcbba | RES 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbba | RES 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x43ef,
        bc: 0x1c58,
        de: 0xdda3,
        hl: 0x4519,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb67b,
        iy: 0x383f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x38);
    poke(0x0003, 0xba);
    poke(0x3877, 0xd6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x43ef,
        bc: 0x1c58,
        de: 0x56a3,
        hl: 0x4519,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xb67b,
        iy: 0x383f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(14455), equals(0x56));
  }, tags: 'undocumented');

  // Test instruction fdcbbb | RES 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbbb | RES 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xdccb,
        bc: 0x7ab3,
        de: 0x7615,
        hl: 0x4161,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2942,
        iy: 0xe2fe,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x07);
    poke(0x0003, 0xbb);
    poke(0xe305, 0x6e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xdccb,
        bc: 0x7ab3,
        de: 0x766e,
        hl: 0x4161,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2942,
        iy: 0xe2fe,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbbc | RES 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbbc | RES 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0e07,
        bc: 0x34f5,
        de: 0x0995,
        hl: 0xcc42,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9d42,
        iy: 0xaf0c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf8);
    poke(0x0003, 0xbc);
    poke(0xaf04, 0xcf);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0e07,
        bc: 0x34f5,
        de: 0x0995,
        hl: 0x4f42,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9d42,
        iy: 0xaf0c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(44804), equals(0x4f));
  }, tags: 'undocumented');

  // Test instruction fdcbbd | RES 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbbd | RES 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x30ef,
        bc: 0xe60c,
        de: 0x9bf0,
        hl: 0xa1bf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbd1c,
        iy: 0xdf0d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xaa);
    poke(0x0003, 0xbd);
    poke(0xdeb7, 0x8d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x30ef,
        bc: 0xe60c,
        de: 0x9bf0,
        hl: 0xa10d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xbd1c,
        iy: 0xdf0d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(57015), equals(0x0d));
  }, tags: 'undocumented');

  // Test instruction fdcbbe | RES 7, (IY+*)
  test(
      "OPCODE "
      "fdcbbe | RES 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1133,
        bc: 0xbef6,
        de: 0x5059,
        hl: 0x1089,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd558,
        iy: 0x3d0f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc8);
    poke(0x0003, 0xbe);
    poke(0x3cd7, 0xa1);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1133,
        bc: 0xbef6,
        de: 0x5059,
        hl: 0x1089,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd558,
        iy: 0x3d0f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(15575), equals(0x21));
  });

  // Test instruction fdcbbf | RES 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbbf | RES 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x83d6,
        bc: 0xc893,
        de: 0x8db8,
        hl: 0x716b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0956,
        iy: 0xbde7,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xfd);
    poke(0x0003, 0xbf);
    poke(0xbde4, 0xac);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x2cd6,
        bc: 0xc893,
        de: 0x8db8,
        hl: 0x716b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0956,
        iy: 0xbde7,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(48612), equals(0x2c));
  }, tags: 'undocumented');

  // Test instruction fdcbc0 | SET 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc0 | SET 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3666,
        bc: 0x676c,
        de: 0x35e5,
        hl: 0xdb0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xea93,
        iy: 0x2b31,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x0a);
    poke(0x0003, 0xc0);
    poke(0x2b3b, 0xec);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3666,
        bc: 0xed6c,
        de: 0x35e5,
        hl: 0xdb0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xea93,
        iy: 0x2b31,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(11067), equals(0xed));
  }, tags: 'undocumented');

  // Test instruction fdcbc1 | SET 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc1 | SET 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3902,
        bc: 0xd498,
        de: 0xaf62,
        hl: 0x9821,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x48b8,
        iy: 0xbd67,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x87);
    poke(0x0003, 0xc1);
    poke(0xbcee, 0xee);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3902,
        bc: 0xd4ef,
        de: 0xaf62,
        hl: 0x9821,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x48b8,
        iy: 0xbd67,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(48366), equals(0xef));
  }, tags: 'undocumented');

  // Test instruction fdcbc2 | SET 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc2 | SET 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xad26,
        bc: 0x5a6d,
        de: 0x6762,
        hl: 0x16c9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x495a,
        iy: 0x5b2c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x8d);
    poke(0x0003, 0xc2);
    poke(0x5ab9, 0xc2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xad26,
        bc: 0x5a6d,
        de: 0xc362,
        hl: 0x16c9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x495a,
        iy: 0x5b2c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(23225), equals(0xc3));
  }, tags: 'undocumented');

  // Test instruction fdcbc3 | SET 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc3 | SET 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3e6c,
        bc: 0x9a74,
        de: 0xa2ee,
        hl: 0x9838,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeafa,
        iy: 0xe666,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x5a);
    poke(0x0003, 0xc3);
    poke(0xe6c0, 0x4f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3e6c,
        bc: 0x9a74,
        de: 0xa24f,
        hl: 0x9838,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xeafa,
        iy: 0xe666,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbc4 | SET 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc4 | SET 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbf68,
        bc: 0xd00b,
        de: 0x5283,
        hl: 0x51c2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x517c,
        iy: 0x5d10,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x89);
    poke(0x0003, 0xc4);
    poke(0x5c99, 0x61);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbf68,
        bc: 0xd00b,
        de: 0x5283,
        hl: 0x61c2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x517c,
        iy: 0x5d10,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbc5 | SET 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc5 | SET 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x127b,
        bc: 0xdb6a,
        de: 0x00b9,
        hl: 0x5138,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x98f6,
        iy: 0x02bb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa9);
    poke(0x0003, 0xc5);
    poke(0x0264, 0xcd);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x127b,
        bc: 0xdb6a,
        de: 0x00b9,
        hl: 0x51cd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x98f6,
        iy: 0x02bb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbc6 | SET 0, (IY+*)
  test(
      "OPCODE "
      "fdcbc6 | SET 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x35da,
        bc: 0x98c2,
        de: 0x3f57,
        hl: 0x44a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2771,
        iy: 0x76c4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xee);
    poke(0x0003, 0xc6);
    poke(0x76b2, 0x82);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x35da,
        bc: 0x98c2,
        de: 0x3f57,
        hl: 0x44a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2771,
        iy: 0x76c4,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(30386), equals(0x83));
  });

  // Test instruction fdcbc7 | SET 0, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc7 | SET 0, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x763f,
        bc: 0xb86f,
        de: 0x12d3,
        hl: 0x7e2d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd870,
        iy: 0xf30b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9e);
    poke(0x0003, 0xc7);
    poke(0xf2a9, 0xd7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd73f,
        bc: 0xb86f,
        de: 0x12d3,
        hl: 0x7e2d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd870,
        iy: 0xf30b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbc8 | SET 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc8 | SET 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1f81,
        bc: 0xc7c0,
        de: 0x85da,
        hl: 0x3cdd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd854,
        iy: 0xc412,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x10);
    poke(0x0003, 0xc8);
    poke(0xc422, 0xe9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1f81,
        bc: 0xebc0,
        de: 0x85da,
        hl: 0x3cdd,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd854,
        iy: 0xc412,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(50210), equals(0xeb));
  }, tags: 'undocumented');

  // Test instruction fdcbc9 | SET 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbc9 | SET 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xed19,
        bc: 0x3f88,
        de: 0x1370,
        hl: 0xe084,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4fdd,
        iy: 0x8b42,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x61);
    poke(0x0003, 0xc9);
    poke(0x8ba3, 0xb7);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xed19,
        bc: 0x3fb7,
        de: 0x1370,
        hl: 0xe084,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4fdd,
        iy: 0x8b42,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbca | SET 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbca | SET 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc7e5,
        bc: 0x233b,
        de: 0x2312,
        hl: 0xf7f9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe417,
        iy: 0x5190,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x1a);
    poke(0x0003, 0xca);
    poke(0x51aa, 0x90);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc7e5,
        bc: 0x233b,
        de: 0x9212,
        hl: 0xf7f9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe417,
        iy: 0x5190,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(20906), equals(0x92));
  }, tags: 'undocumented');

  // Test instruction fdcbcb | SET 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbcb | SET 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xbdba,
        bc: 0xa964,
        de: 0xea38,
        hl: 0x9422,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfca3,
        iy: 0x9a72,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x5e);
    poke(0x0003, 0xcb);
    poke(0x9ad0, 0x70);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xbdba,
        bc: 0xa964,
        de: 0xea72,
        hl: 0x9422,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfca3,
        iy: 0x9a72,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(39632), equals(0x72));
  }, tags: 'undocumented');

  // Test instruction fdcbcc | SET 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbcc | SET 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0f4f,
        bc: 0x0261,
        de: 0x21b0,
        hl: 0x2097,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x575d,
        iy: 0x14f9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2d);
    poke(0x0003, 0xcc);
    poke(0x1526, 0x4e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0f4f,
        bc: 0x0261,
        de: 0x21b0,
        hl: 0x4e97,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x575d,
        iy: 0x14f9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbcd | SET 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbcd | SET 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1b79,
        bc: 0x8f9f,
        de: 0x31bf,
        hl: 0x9ca6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7ecb,
        iy: 0xbbe9,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xa1);
    poke(0x0003, 0xcd);
    poke(0xbb8a, 0x66);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1b79,
        bc: 0x8f9f,
        de: 0x31bf,
        hl: 0x9c66,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7ecb,
        iy: 0xbbe9,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbce | SET 1, (IY+*)
  test(
      "OPCODE "
      "fdcbce | SET 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8e13,
        bc: 0x968e,
        de: 0x1784,
        hl: 0x0a0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1e87,
        iy: 0xb8a2,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x36);
    poke(0x0003, 0xce);
    poke(0xb8d8, 0x45);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8e13,
        bc: 0x968e,
        de: 0x1784,
        hl: 0x0a0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1e87,
        iy: 0xb8a2,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(47320), equals(0x47));
  });

  // Test instruction fdcbcf | SET 1, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbcf | SET 1, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8d0a,
        bc: 0xa073,
        de: 0xc4ba,
        hl: 0x5b69,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3b47,
        iy: 0xc29c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x70);
    poke(0x0003, 0xcf);
    poke(0xc30c, 0x7a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7a0a,
        bc: 0xa073,
        de: 0xc4ba,
        hl: 0x5b69,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3b47,
        iy: 0xc29c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbd0 | SET 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd0 | SET 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe2bb,
        bc: 0x8635,
        de: 0x650c,
        hl: 0x689a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1294,
        iy: 0x3beb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbc);
    poke(0x0003, 0xd0);
    poke(0x3ba7, 0x20);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe2bb,
        bc: 0x2435,
        de: 0x650c,
        hl: 0x689a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1294,
        iy: 0x3beb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(15271), equals(0x24));
  }, tags: 'undocumented');

  // Test instruction fdcbd1 | SET 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd1 | SET 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5df8,
        bc: 0xf701,
        de: 0x9494,
        hl: 0x4967,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad00,
        iy: 0x8c65,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x11);
    poke(0x0003, 0xd1);
    poke(0x8c76, 0xb9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5df8,
        bc: 0xf7bd,
        de: 0x9494,
        hl: 0x4967,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xad00,
        iy: 0x8c65,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(35958), equals(0xbd));
  }, tags: 'undocumented');

  // Test instruction fdcbd2 | SET 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd2 | SET 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9876,
        bc: 0x4bd9,
        de: 0x3148,
        hl: 0x665a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7eac,
        iy: 0xc051,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xfb);
    poke(0x0003, 0xd2);
    poke(0xc04c, 0x51);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9876,
        bc: 0x4bd9,
        de: 0x5548,
        hl: 0x665a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7eac,
        iy: 0xc051,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(49228), equals(0x55));
  }, tags: 'undocumented');

  // Test instruction fdcbd3 | SET 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd3 | SET 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8f90,
        bc: 0xbacd,
        de: 0xe87a,
        hl: 0x538f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe5a,
        iy: 0x0a87,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x3e);
    poke(0x0003, 0xd3);
    poke(0x0ac5, 0xe0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8f90,
        bc: 0xbacd,
        de: 0xe8e4,
        hl: 0x538f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfe5a,
        iy: 0x0a87,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(2757), equals(0xe4));
  }, tags: 'undocumented');

  // Test instruction fdcbd4 | SET 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd4 | SET 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x15e2,
        bc: 0x1820,
        de: 0x5588,
        hl: 0xe67f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7193,
        iy: 0x9478,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x36);
    poke(0x0003, 0xd4);
    poke(0x94ae, 0x7d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x15e2,
        bc: 0x1820,
        de: 0x5588,
        hl: 0x7d7f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x7193,
        iy: 0x9478,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbd5 | SET 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd5 | SET 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1409,
        bc: 0x6535,
        de: 0xc371,
        hl: 0xabe2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2e10,
        iy: 0x8608,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x48);
    poke(0x0003, 0xd5);
    poke(0x8650, 0x98);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1409,
        bc: 0x6535,
        de: 0xc371,
        hl: 0xab9c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2e10,
        iy: 0x8608,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(34384), equals(0x9c));
  }, tags: 'undocumented');

  // Test instruction fdcbd6 | SET 2, (IY+*)
  test(
      "OPCODE "
      "fdcbd6 | SET 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7801,
        bc: 0x78b6,
        de: 0xd191,
        hl: 0x054a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2065,
        iy: 0x6aa3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xc9);
    poke(0x0003, 0xd6);
    poke(0x6a6c, 0x7c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7801,
        bc: 0x78b6,
        de: 0xd191,
        hl: 0x054a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2065,
        iy: 0x6aa3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction fdcbd7 | SET 2, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd7 | SET 2, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1b6a,
        bc: 0x266e,
        de: 0x387f,
        hl: 0x7fcb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1941,
        iy: 0x36ab,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbe);
    poke(0x0003, 0xd7);
    poke(0x3669, 0x95);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x956a,
        bc: 0x266e,
        de: 0x387f,
        hl: 0x7fcb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1941,
        iy: 0x36ab,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbd8 | SET 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd8 | SET 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7b1b,
        bc: 0xa191,
        de: 0xefee,
        hl: 0x55b9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf789,
        iy: 0x43f8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xbc);
    poke(0x0003, 0xd8);
    poke(0x43b4, 0xd8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7b1b,
        bc: 0xd891,
        de: 0xefee,
        hl: 0x55b9,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf789,
        iy: 0x43f8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbd9 | SET 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbd9 | SET 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0faf,
        bc: 0x4eda,
        de: 0xc556,
        hl: 0x6ed3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3fc3,
        iy: 0x0a66,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x16);
    poke(0x0003, 0xd9);
    poke(0x0a7c, 0xf4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0faf,
        bc: 0x4efc,
        de: 0xc556,
        hl: 0x6ed3,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x3fc3,
        iy: 0x0a66,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(2684), equals(0xfc));
  }, tags: 'undocumented');

  // Test instruction fdcbda | SET 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbda | SET 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9ea1,
        bc: 0x8186,
        de: 0xc045,
        hl: 0xd6e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x34d3,
        iy: 0xd0f0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe8);
    poke(0x0003, 0xda);
    poke(0xd0d8, 0x6b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9ea1,
        bc: 0x8186,
        de: 0x6b45,
        hl: 0xd6e0,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x34d3,
        iy: 0xd0f0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbdb | SET 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbdb | SET 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5ee0,
        bc: 0xbdea,
        de: 0xd00e,
        hl: 0x513f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x690a,
        iy: 0x8c29,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x7a);
    poke(0x0003, 0xdb);
    poke(0x8ca3, 0x15);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5ee0,
        bc: 0xbdea,
        de: 0xd01d,
        hl: 0x513f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x690a,
        iy: 0x8c29,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(36003), equals(0x1d));
  }, tags: 'undocumented');

  // Test instruction fdcbdc | SET 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbdc | SET 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5cfa,
        bc: 0x2e2b,
        de: 0x1d17,
        hl: 0xdbf6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa4f2,
        iy: 0x593a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x64);
    poke(0x0003, 0xdc);
    poke(0x599e, 0x15);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5cfa,
        bc: 0x2e2b,
        de: 0x1d17,
        hl: 0x1df6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa4f2,
        iy: 0x593a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(22942), equals(0x1d));
  }, tags: 'undocumented');

  // Test instruction fdcbdd | SET 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbdd | SET 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8773,
        bc: 0x70a6,
        de: 0x83ce,
        hl: 0x52b8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x35da,
        iy: 0x1d94,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x75);
    poke(0x0003, 0xdd);
    poke(0x1e09, 0x28);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8773,
        bc: 0x70a6,
        de: 0x83ce,
        hl: 0x5228,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x35da,
        iy: 0x1d94,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbde | SET 3, (IY+*)
  test(
      "OPCODE "
      "fdcbde | SET 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8310,
        bc: 0xfa01,
        de: 0x6c69,
        hl: 0x252a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5291,
        iy: 0xc9e0,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x17);
    poke(0x0003, 0xde);
    poke(0xc9f7, 0x41);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8310,
        bc: 0xfa01,
        de: 0x6c69,
        hl: 0x252a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x5291,
        iy: 0xc9e0,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(51703), equals(0x49));
  });

  // Test instruction fdcbdf | SET 3, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbdf | SET 3, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x780d,
        bc: 0xa722,
        de: 0xe78e,
        hl: 0x50ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9d67,
        iy: 0xeac3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x93);
    poke(0x0003, 0xdf);
    poke(0xea56, 0xef);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xef0d,
        bc: 0xa722,
        de: 0xe78e,
        hl: 0x50ba,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x9d67,
        iy: 0xeac3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbe0 | SET 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe0 | SET 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x10ef,
        bc: 0x4101,
        de: 0x2ca5,
        hl: 0xf752,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4747,
        iy: 0x1507,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x56);
    poke(0x0003, 0xe0);
    poke(0x155d, 0xb9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x10ef,
        bc: 0xb901,
        de: 0x2ca5,
        hl: 0xf752,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4747,
        iy: 0x1507,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbe1 | SET 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe1 | SET 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe4cb,
        bc: 0x6f72,
        de: 0x1c11,
        hl: 0x1426,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x189b,
        iy: 0x0e0d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd1);
    poke(0x0003, 0xe1);
    poke(0x0dde, 0x16);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe4cb,
        bc: 0x6f16,
        de: 0x1c11,
        hl: 0x1426,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x189b,
        iy: 0x0e0d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbe2 | SET 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe2 | SET 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x11a9,
        bc: 0xbae8,
        de: 0x938b,
        hl: 0xbac4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd8ed,
        iy: 0xe49c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x50);
    poke(0x0003, 0xe2);
    poke(0xe4ec, 0xc2);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x11a9,
        bc: 0xbae8,
        de: 0xd28b,
        hl: 0xbac4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd8ed,
        iy: 0xe49c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(58604), equals(0xd2));
  }, tags: 'undocumented');

  // Test instruction fdcbe3 | SET 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe3 | SET 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x8832,
        bc: 0x952b,
        de: 0x02b2,
        hl: 0x26ef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfb55,
        iy: 0xada8,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xca);
    poke(0x0003, 0xe3);
    poke(0xad72, 0xba);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x8832,
        bc: 0x952b,
        de: 0x02ba,
        hl: 0x26ef,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xfb55,
        iy: 0xada8,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbe4 | SET 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe4 | SET 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3989,
        bc: 0x4142,
        de: 0x89e2,
        hl: 0x785b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0bf7,
        iy: 0x5474,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x62);
    poke(0x0003, 0xe4);
    poke(0x54d6, 0x7b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3989,
        bc: 0x4142,
        de: 0x89e2,
        hl: 0x7b5b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0bf7,
        iy: 0x5474,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbe5 | SET 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe5 | SET 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe5c5,
        bc: 0xb86d,
        de: 0x41bb,
        hl: 0x315e,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1a78,
        iy: 0xa52d,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xda);
    poke(0x0003, 0xe5);
    poke(0xa507, 0x4c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe5c5,
        bc: 0xb86d,
        de: 0x41bb,
        hl: 0x315c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x1a78,
        iy: 0xa52d,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(42247), equals(0x5c));
  }, tags: 'undocumented');

  // Test instruction fdcbe6 | SET 4, (IY+*)
  test(
      "OPCODE "
      "fdcbe6 | SET 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfd89,
        bc: 0xd888,
        de: 0x1e2f,
        hl: 0xddf5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x42f5,
        iy: 0x8b06,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x76);
    poke(0x0003, 0xe6);
    poke(0x8b7c, 0x45);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfd89,
        bc: 0xd888,
        de: 0x1e2f,
        hl: 0xddf5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x42f5,
        iy: 0x8b06,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(35708), equals(0x55));
  });

  // Test instruction fdcbe7 | SET 4, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe7 | SET 4, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x2025,
        bc: 0xd3e9,
        de: 0xd4b6,
        hl: 0xaa30,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x88bd,
        iy: 0xb597,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x11);
    poke(0x0003, 0xe7);
    poke(0xb5a8, 0xa6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb625,
        bc: 0xd3e9,
        de: 0xd4b6,
        hl: 0xaa30,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x88bd,
        iy: 0xb597,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(46504), equals(0xb6));
  }, tags: 'undocumented');

  // Test instruction fdcbe8 | SET 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe8 | SET 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x514d,
        bc: 0xc2ab,
        de: 0x37b5,
        hl: 0x57de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa4ec,
        iy: 0x0a77,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xed);
    poke(0x0003, 0xe8);
    poke(0x0a64, 0xd0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x514d,
        bc: 0xf0ab,
        de: 0x37b5,
        hl: 0x57de,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xa4ec,
        iy: 0x0a77,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(2660), equals(0xf0));
  }, tags: 'undocumented');

  // Test instruction fdcbe9 | SET 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbe9 | SET 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x974e,
        bc: 0xd28e,
        de: 0xd5cb,
        hl: 0x6bd4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x158a,
        iy: 0xa84e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x35);
    poke(0x0003, 0xe9);
    poke(0xa883, 0x2f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x974e,
        bc: 0xd22f,
        de: 0xd5cb,
        hl: 0x6bd4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x158a,
        iy: 0xa84e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbea | SET 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbea | SET 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x3ef4,
        bc: 0x3fc6,
        de: 0x4a44,
        hl: 0xe9a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc877,
        iy: 0x7593,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x93);
    poke(0x0003, 0xea);
    poke(0x7526, 0x1b);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x3ef4,
        bc: 0x3fc6,
        de: 0x3b44,
        hl: 0xe9a4,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc877,
        iy: 0x7593,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(29990), equals(0x3b));
  }, tags: 'undocumented');

  // Test instruction fdcbeb | SET 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbeb | SET 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x798f,
        bc: 0x5e9b,
        de: 0x940e,
        hl: 0x2e52,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd6ad,
        iy: 0x2411,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd0);
    poke(0x0003, 0xeb);
    poke(0x23e1, 0x47);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x798f,
        bc: 0x5e9b,
        de: 0x9467,
        hl: 0x2e52,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd6ad,
        iy: 0x2411,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(9185), equals(0x67));
  }, tags: 'undocumented');

  // Test instruction fdcbec | SET 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbec | SET 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x38a4,
        bc: 0x07c0,
        de: 0x6cee,
        hl: 0xe715,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf160,
        iy: 0xd2eb,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xf3);
    poke(0x0003, 0xec);
    poke(0xd2de, 0x49);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x38a4,
        bc: 0x07c0,
        de: 0x6cee,
        hl: 0x6915,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf160,
        iy: 0xd2eb,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(53982), equals(0x69));
  }, tags: 'undocumented');

  // Test instruction fdcbed | SET 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbed | SET 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe0bc,
        bc: 0x70c1,
        de: 0xde35,
        hl: 0x81c5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd57f,
        iy: 0x0eab,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x58);
    poke(0x0003, 0xed);
    poke(0x0f03, 0x10);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xe0bc,
        bc: 0x70c1,
        de: 0xde35,
        hl: 0x8130,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xd57f,
        iy: 0x0eab,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(3843), equals(0x30));
  }, tags: 'undocumented');

  // Test instruction fdcbee | SET 5, (IY+*)
  test(
      "OPCODE "
      "fdcbee | SET 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5fcb,
        bc: 0x9007,
        de: 0x1736,
        hl: 0xaca8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4bab,
        iy: 0x42bc,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x02);
    poke(0x0003, 0xee);
    poke(0x42be, 0xd0);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5fcb,
        bc: 0x9007,
        de: 0x1736,
        hl: 0xaca8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4bab,
        iy: 0x42bc,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(17086), equals(0xf0));
  });

  // Test instruction fdcbef | SET 5, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbef | SET 5, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4ee3,
        bc: 0xd344,
        de: 0xcb5b,
        hl: 0xaeb5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xde5f,
        iy: 0x2272,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x58);
    poke(0x0003, 0xef);
    poke(0x22ca, 0x09);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x29e3,
        bc: 0xd344,
        de: 0xcb5b,
        hl: 0xaeb5,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xde5f,
        iy: 0x2272,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(8906), equals(0x29));
  }, tags: 'undocumented');

  // Test instruction fdcbf0 | SET 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf0 | SET 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1080,
        bc: 0xb270,
        de: 0x1b5b,
        hl: 0xa9b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe89d,
        iy: 0xee9e,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x45);
    poke(0x0003, 0xf0);
    poke(0xeee3, 0x2c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1080,
        bc: 0x6c70,
        de: 0x1b5b,
        hl: 0xa9b7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe89d,
        iy: 0xee9e,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(61155), equals(0x6c));
  }, tags: 'undocumented');

  // Test instruction fdcbf1 | SET 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf1 | SET 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1702,
        bc: 0xc43b,
        de: 0xd138,
        hl: 0x316f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8067,
        iy: 0x4783,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2f);
    poke(0x0003, 0xf1);
    poke(0x47b2, 0xdc);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1702,
        bc: 0xc4dc,
        de: 0xd138,
        hl: 0x316f,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8067,
        iy: 0x4783,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbf2 | SET 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf2 | SET 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x732a,
        bc: 0x4cd1,
        de: 0x77fe,
        hl: 0x4814,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x42f1,
        iy: 0xea97,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x2c);
    poke(0x0003, 0xf2);
    poke(0xeac3, 0x5e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x732a,
        bc: 0x4cd1,
        de: 0x5efe,
        hl: 0x4814,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x42f1,
        iy: 0xea97,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbf3 | SET 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf3 | SET 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6b97,
        bc: 0x59d3,
        de: 0xf546,
        hl: 0x7530,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6670,
        iy: 0x7d90,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x38);
    poke(0x0003, 0xf3);
    poke(0x7dc8, 0x0c);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6b97,
        bc: 0x59d3,
        de: 0xf54c,
        hl: 0x7530,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x6670,
        iy: 0x7d90,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(32200), equals(0x4c));
  }, tags: 'undocumented');

  // Test instruction fdcbf4 | SET 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf4 | SET 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7af0,
        bc: 0xa81f,
        de: 0x5d3a,
        hl: 0x799b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe12b,
        iy: 0x309c,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xd0);
    poke(0x0003, 0xf4);
    poke(0x306c, 0x0e);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7af0,
        bc: 0xa81f,
        de: 0x5d3a,
        hl: 0x4e9b,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe12b,
        iy: 0x309c,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(12396), equals(0x4e));
  }, tags: 'undocumented');

  // Test instruction fdcbf5 | SET 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf5 | SET 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1370,
        bc: 0xf6b2,
        de: 0xaaa2,
        hl: 0x7f0a,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc9f6,
        iy: 0x6b1f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x55);
    poke(0x0003, 0xf5);
    poke(0x6b74, 0xf8);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1370,
        bc: 0xf6b2,
        de: 0xaaa2,
        hl: 0x7ff8,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc9f6,
        iy: 0x6b1f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbf6 | SET 6, (IY+*)
  test(
      "OPCODE "
      "fdcbf6 | SET 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x7c43,
        bc: 0xfcd1,
        de: 0x34bd,
        hl: 0xf4ab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xef33,
        iy: 0xc61a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x56);
    poke(0x0003, 0xf6);
    poke(0xc670, 0x5d);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x7c43,
        bc: 0xfcd1,
        de: 0x34bd,
        hl: 0xf4ab,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xef33,
        iy: 0xc61a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  });

  // Test instruction fdcbf7 | SET 6, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf7 | SET 6, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xe6da,
        bc: 0x231a,
        de: 0x7bb1,
        hl: 0x800d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe37e,
        iy: 0x5789,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x9e);
    poke(0x0003, 0xf7);
    poke(0x5727, 0x66);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x66da,
        bc: 0x231a,
        de: 0x7bb1,
        hl: 0x800d,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe37e,
        iy: 0x5789,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbf8 | SET 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf8 | SET 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xfa29,
        bc: 0xee74,
        de: 0xd7c4,
        hl: 0xafaf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x512c,
        iy: 0xde7a,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x54);
    poke(0x0003, 0xf8);
    poke(0xdece, 0x7a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xfa29,
        bc: 0xfa74,
        de: 0xd7c4,
        hl: 0xafaf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x512c,
        iy: 0xde7a,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(57038), equals(0xfa));
  }, tags: 'undocumented');

  // Test instruction fdcbf9 | SET 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbf9 | SET 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4662,
        bc: 0xa71b,
        de: 0x5065,
        hl: 0xed06,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x279e,
        iy: 0x99e3,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x30);
    poke(0x0003, 0xf9);
    poke(0x9a13, 0xc6);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4662,
        bc: 0xa7c6,
        de: 0x5065,
        hl: 0xed06,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x279e,
        iy: 0x99e3,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbfa | SET 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbfa | SET 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x9426,
        bc: 0x53ec,
        de: 0x5016,
        hl: 0x6c99,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8b99,
        iy: 0xbd79,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x09);
    poke(0x0003, 0xfa);
    poke(0xbd82, 0xf4);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9426,
        bc: 0x53ec,
        de: 0xf416,
        hl: 0x6c99,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x8b99,
        iy: 0xbd79,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbfb | SET 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbfb | SET 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x5343,
        bc: 0xb212,
        de: 0x09ca,
        hl: 0xe3c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcd2b,
        iy: 0xf875,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xba);
    poke(0x0003, 0xfb);
    poke(0xf82f, 0xed);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x5343,
        bc: 0xb212,
        de: 0x09ed,
        hl: 0xe3c6,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xcd2b,
        iy: 0xf875,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fdcbfc | SET 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbfc | SET 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0965,
        bc: 0x4392,
        de: 0xca25,
        hl: 0x2baa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf023,
        iy: 0x6623,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x56);
    poke(0x0003, 0xfc);
    poke(0x6679, 0x65);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0965,
        bc: 0x4392,
        de: 0xca25,
        hl: 0xe5aa,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xf023,
        iy: 0x6623,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(26233), equals(0xe5));
  }, tags: 'undocumented');

  // Test instruction fdcbfd | SET 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbfd | SET 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x1751,
        bc: 0x233c,
        de: 0x6214,
        hl: 0xd119,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc415,
        iy: 0x5d2b,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x25);
    poke(0x0003, 0xfd);
    poke(0x5d50, 0x27);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x1751,
        bc: 0x233c,
        de: 0x6214,
        hl: 0xd1a7,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xc415,
        iy: 0x5d2b,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(23888), equals(0xa7));
  }, tags: 'undocumented');

  // Test instruction fdcbfe | SET 7, (IY+*)
  test(
      "OPCODE "
      "fdcbfe | SET 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xb4cf,
        bc: 0x5639,
        de: 0x677b,
        hl: 0x0ca2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xddc5,
        iy: 0x4e4f,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0x88);
    poke(0x0003, 0xfe);
    poke(0x4dd7, 0x4a);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xb4cf,
        bc: 0x5639,
        de: 0x677b,
        hl: 0x0ca2,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xddc5,
        iy: 0x4e4f,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(19927), equals(0xca));
  });

  // Test instruction fdcbff | SET 7, (IY+*)
  test(
      "UNDOCUMENTED "
      "fdcbff | SET 7, (IY+*)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xf151,
        bc: 0x13da,
        de: 0x7c56,
        hl: 0xf025,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2b36,
        iy: 0x2aed,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xcb);
    poke(0x0002, 0xe4);
    poke(0x0003, 0xff);
    poke(0x2ad1, 0x97);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x9751,
        bc: 0x13da,
        de: 0x7c56,
        hl: 0xf025,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x2b36,
        iy: 0x2aed,
        sp: 0x0000,
        pc: 0x0004);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
  }, tags: 'undocumented');

  // Test instruction fde1 | POP IY
  test(
      "OPCODE "
      "fde1 | POP IY", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x828e,
        bc: 0x078b,
        de: 0x1e35,
        hl: 0x8f1c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4827,
        iy: 0xb742,
        sp: 0x716e,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xe1);
    poke(0x716e, 0xd5);
    poke(0x716f, 0x92);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x828e,
        bc: 0x078b,
        de: 0x1e35,
        hl: 0x8f1c,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x4827,
        iy: 0x92d5,
        sp: 0x7170,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 14);
  });

  // Test instruction fde3 | EX (SP), IY
  test(
      "OPCODE "
      "fde3 | EX (SP), IY", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x4298,
        bc: 0xc805,
        de: 0x6030,
        hl: 0x4292,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x473b,
        iy: 0x9510,
        sp: 0x1a38,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xe3);
    poke(0x1a38, 0xe0);
    poke(0x1a39, 0x0f);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x4298,
        bc: 0xc805,
        de: 0x6030,
        hl: 0x4292,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x473b,
        iy: 0x0fe0,
        sp: 0x1a38,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 23);
    expect(peek(6712), equals(0x10));
    expect(peek(6713), equals(0x95));
  });

  // Test instruction fde5 | PUSH IY
  test(
      "OPCODE "
      "fde5 | PUSH IY", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xd139,
        bc: 0xaa0d,
        de: 0xbf2b,
        hl: 0x2a56,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe138,
        iy: 0xd4da,
        sp: 0xa8e1,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xe5);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xd139,
        bc: 0xaa0d,
        de: 0xbf2b,
        hl: 0x2a56,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xe138,
        iy: 0xd4da,
        sp: 0xa8df,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 15);
    expect(peek(43231), equals(0xda));
    expect(peek(43232), equals(0xd4));
  });

  // Test instruction fde9 | JP (IY)
  test(
      "OPCODE "
      "fde9 | JP (IY)", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc14f,
        bc: 0x2eb6,
        de: 0xedf0,
        hl: 0x27cf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x09ee,
        iy: 0xa2a4,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xe9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc14f,
        bc: 0x2eb6,
        de: 0xedf0,
        hl: 0x27cf,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x09ee,
        iy: 0xa2a4,
        sp: 0x0000,
        pc: 0xa2a4);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 8);
  });

  // Test instruction fdf9 | LD SP, IY
  test(
      "OPCODE "
      "fdf9 | LD SP, IY", () {
    // Set up machine initial state
    loadRegisters(
        af: 0xc260,
        bc: 0x992e,
        de: 0xd544,
        hl: 0x67fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xba5e,
        iy: 0x3596,
        sp: 0x353f,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfd);
    poke(0x0001, 0xf9);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0xc260,
        bc: 0x992e,
        de: 0xd544,
        hl: 0x67fb,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0xba5e,
        iy: 0x3596,
        sp: 0x3596,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x02, iff1: false, iff2: false, tStates: 10);
  });

  // Test instruction fe | CP *
  test(
      "OPCODE "
      "fe | CP *", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x6900,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0000);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x0000, 0xfe);
    poke(0x0001, 0x82);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x6987,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x0000,
        pc: 0x0002);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 7);
  });

  // Test instruction ff | RST 38h
  test(
      "OPCODE "
      "ff | RST 38h", () {
    // Set up machine initial state
    loadRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5507,
        pc: 0x6d33);
    z80.i = 0x00;
    z80.r = 0x00;
    z80.iff1 = false;
    z80.iff2 = false;
    poke(0x6d33, 0xff);

    // Execute machine for tState cycles
    while (z80.tStates < 1) {
      z80.executeNextInstruction();
    }

    // Test machine state is as expected
    checkRegisters(
        af: 0x0000,
        bc: 0x0000,
        de: 0x0000,
        hl: 0x0000,
        af_: 0x0000,
        bc_: 0x0000,
        de_: 0x0000,
        hl_: 0x0000,
        ix: 0x0000,
        iy: 0x0000,
        sp: 0x5505,
        pc: 0x0038);
    checkSpecialRegisters(
        i: 0x00, r: 0x01, iff1: false, iff2: false, tStates: 11);
    expect(peek(21765), equals(0x34));
    expect(peek(21766), equals(0x6d));
  });
}
